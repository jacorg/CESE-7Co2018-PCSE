
Proyectos/ProyectoFinalProtocolos_v2/out/ProyectoFinalProtocolos_v2.elf:     file format elf32-littlearm
Proyectos/ProyectoFinalProtocolos_v2/out/ProyectoFinalProtocolos_v2.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0008e1

Program Header:
0x70000001 off    0x00016e40 vaddr 0x1a006e40 paddr 0x1a006e40 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00000ad4 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00006e48 memsz 0x00006e48 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a006e48 align 2**16
         filesz 0x000000f8 memsz 0x000000f8 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006e3c  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f8  10000000  1a006e48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200f8  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200f8  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200f8  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200f8  2**2
                  CONTENTS
  6 .bss          000009dc  100000f8  100000f8  000000f8  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200f8  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200f8  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200f8  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200f8  2**2
                  CONTENTS
 11 .init_array   00000004  1a006e3c  1a006e3c  00016e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a006e40  1a006e40  00016e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000200f8  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000200f8  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000200f8  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000200f8  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000200f8  2**2
                  CONTENTS
 18 .noinit       00000000  10000ad4  10000ad4  000200f8  2**2
                  CONTENTS
 19 .debug_info   0002d001  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00005a04  00000000  00000000  0004d0f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00010436  00000000  00000000  00052afd  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000fd8  00000000  00000000  00062f33  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000f40  00000000  00000000  00063f0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000f8f8  00000000  00000000  00064e4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00013e19  00000000  00000000  00074743  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0002c0e4  00000000  00000000  0008855c  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  000b4640  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  000b46bf  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00003094  00000000  00000000  000b46f8  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000f8 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a006e3c l    d  .init_array	00000000 .init_array
1a006e40 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000ad4 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 ds3231.c
1a000300 l     F .text	00000012 bcdToDec
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 main.c
100000f8 l     O .bss	00000250 fp
10000348 l     O .bss	00000238 fs
00000000 l    df *ABS*	00000000 ciaaI2C.c
00000000 l    df *ABS*	00000000 debounce.c
00000000 l    df *ABS*	00000000 system.c
10000584 l     O .bss	00000004 heap_end.5778
00000000 l    df *ABS*	00000000 ff.c
1a000a34 l     F .text	0000000a ld_word
1a000a3e l     F .text	00000016 ld_dword
1a000a54 l     F .text	000000a8 ld_qword
1a000afc l     F .text	00000008 st_word
1a000b04 l     F .text	00000014 st_dword
1a000b18 l     F .text	00000026 st_qword
1a000b3e l     F .text	00000012 mem_cpy
1a000b50 l     F .text	0000000a mem_set
1a000b5a l     F .text	0000001e mem_cmp
1a000b78 l     F .text	00000010 chk_chr
1a000b88 l     F .text	00000004 dbc_1st
1a000b8c l     F .text	000000c0 tchar2uni
1a000c4c l     F .text	00000018 clst2sect
1a000c64 l     F .text	00000026 ld_clust
1a000c8a l     F .text	00000026 st_clust
1a000cb0 l     F .text	00000088 pick_lfn
1a000d38 l     F .text	00000078 put_lfn
1a000db0 l     F .text	000000b0 gen_numname
1a000e60 l     F .text	0000001c sum_sfn
1a000e7c l     F .text	00000030 xdir_sum
1a000eac l     F .text	0000002e init_alloc_info
1a000edc l     F .text	000000b0 get_ldnumber
1a000f8c l     F .text	00000048 validate
1a000fd4 l     F .text	00000050 sync_window
1a001024 l     F .text	00000034 move_window
1a001058 l     F .text	00000084 check_fs
1a0010dc l     F .text	000004b4 find_volume
1a001590 l     F .text	00000086 find_bitmap
1a001616 l     F .text	00000078 change_bitmap
1a00168e l     F .text	0000011e put_fat
1a0017ac l     F .text	00000030 fill_last_frag
1a0017dc l     F .text	00000032 fill_first_frag
1a00180e l     F .text	00000172 get_fat
1a001980 l     F .text	000000b4 dir_sdi
1a001a34 l     F .text	000001cc create_chain
1a001c00 l     F .text	0000013e remove_chain
1a001d3e l     F .text	00000052 dir_clear
1a001d90 l     F .text	000000dc dir_next
1a001e6c l     F .text	00000100 load_xdir
1a001f6c l     F .text	0000003a load_obj_xdir
1a001fa6 l     F .text	000000ea dir_read
1a002090 l     F .text	0000006c dir_alloc
1a0020fc l     F .text	0000005e store_xdir
1a00215c l     F .text	00000244 create_name
1a0023a0 l     F .text	00000036 xname_sum
1a0023d6 l     F .text	00000082 create_xdir
1a002458 l     F .text	000000a4 cmp_lfn
1a0024fc l     F .text	0000015c dir_find
1a002658 l     F .text	000000b4 follow_path
1a00270c l     F .text	00000208 dir_register
1a002914 l     F .text	0000008c sync_fs
10000588 l     O .bss	00000260 DirBuf
100007e8 l     O .bss	00000008 FatFs
100007f0 l     O .bss	00000002 Fsid
100007f4 l     O .bss	00000200 LfnBuf
1a006414 l     O .text	00000080 ExCvt
1a006494 l     O .text	0000000d LfnOfs
1a0064a4 l     O .text	00000008 VolumeStr
00000000 l    df *ABS*	00000000 ffunicode.c
1a0064e0 l     O .text	000001f2 cvt1.5491
1a0066d4 l     O .text	000000bc cvt2.5492
1a006790 l     O .text	00000100 uc850
00000000 l    df *ABS*	00000000 fssdc.c
1a00314c l     F .text	00000018 newCardStatus
1a003164 l     F .text	00000004 chk_power
1a003168 l     F .text	00000024 SSPSend
1a00318c l     F .text	00000018 xmit_spi
1a0031c8 l     F .text	0000001c rcvr_spi
1a0031e4 l     F .text	00000024 wait_ready
1a003208 l     F .text	00000018 deselect
1a003220 l     F .text	00000024 select_
1a003244 l     F .text	00000084 send_cmd
1a0032c8 l     F .text	0000005c xmit_datablock
1a003324 l     F .text	00000060 rcvr_datablock
100009f4 l     O .bss	00000001 CardType
100009f5 l     O .bss	00000001 Timer1
100009f6 l     O .bss	00000001 Timer2
100009f8 l     O .bss	00000004 g_statusUpdateCallback
10000000 l     O .data	00000001 g_cardStatus
10000001 l     O .data	00000001 g_diskStats
10000004 l     O .data	00000004 g_spiFastClock
10000008 l     O .data	00000004 g_spiSlowClock
00000000 l    df *ABS*	00000000 ffdisks.c
00000000 l    df *ABS*	00000000 board.c
1a003aa4 l     F .text	00000044 Board_LED_Init
1a003ae8 l     F .text	00000040 Board_TEC_Init
1a003b28 l     F .text	00000040 Board_GPIO_Init
1a003b68 l     F .text	00000030 Board_ADC_Init
1a003b98 l     F .text	00000038 Board_SPI_Init
1a003bd0 l     F .text	00000024 Board_I2C_Init
1a006aac l     O .text	00000008 GpioButtons
1a006ab4 l     O .text	0000000c GpioLeds
1a006ac0 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a006ad8 l     O .text	00000004 InitClkStates
1a006adc l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000010 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a003dd0 l     F .text	0000002c Chip_UART_GetIndex
1a006b50 l     O .text	00000008 UART_BClock
1a006b58 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a003f78 l     F .text	00000014 Chip_ADC_GetClockIndex
1a003f8c l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a004040 l     F .text	000000a4 pll_calc_divs
1a0040e4 l     F .text	0000010c pll_get_frac
1a0041f0 l     F .text	0000004c Chip_Clock_FindBaseClock
1a004464 l     F .text	00000022 Chip_Clock_GetDivRate
100009fc l     O .bss	00000008 audio_usb_pll_freq
1a006b6c l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 i2cm_18xx_43xx.c
00000000 l    df *ABS*	00000000 rtc_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a006bd8 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a004898 l     F .text	0000001a SSP_Write2BFifo
1a0048b2 l     F .text	00000018 SSP_Write1BFifo
1a0048ca l     F .text	00000042 SSP_Read2BFifo
1a00490c l     F .text	00000040 SSP_Read1BFifo
1a00494c l     F .text	00000014 Chip_SSP_GetClockIndex
1a004960 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000048 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a006c20 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_spi.c
00000000 l    df *ABS*	00000000 sapi_tick.c
10000a04 l     O .bss	00000004 callBackFuncParams
10000a08 l     O .bss	00000008 tickCounter
10000a10 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a004d0c l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10000a14 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a005108 l     F .text	00000010 clearInterrupt
1a005118 l     F .text	0000005c serveInterrupt
1000004c l     O .data	00000048 ultrasonicSensors
1a006da0 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a005904 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a005cb0 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 impure.c
10000098 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a006e40 l       .init_array	00000000 __init_array_end
1a006e3c l       .bss_RAM5	00000000 __preinit_array_end
1a006e3c l       .init_array	00000000 __init_array_start
1a006e3c l       .bss_RAM5	00000000 __preinit_array_start
1a004288 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000980 g     F .text	00000012 _isatty_r
1a0046e0 g     F .text	0000000e Chip_I2CM_Xfer
1a000858 g     F .text	00000008 buttonReleased
1a005602 g     F .text	00000010 strcpy
1a00551c g     F .text	000000b8 _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a004b18 g     F .text	00000014 uartRxRead
1a000992 g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a003384 g     F .text	0000000c FSSDC_FatFs_DiskStatus
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a004ba8 g     F .text	0000001e uartReadByte
1a0054ec g     F .text	00000030 printf
1a003c9a g     F .text	00000008 __stdio_init
1a004712 g     F .text	0000002e Chip_RTC_GetFullTime
1a0050c4 g     F .text	00000042 delayRead
1a00629a g     F .text	00000024 __sseek
1a005984 g     F .text	00000060 __sinit
1a005624 g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
10000a20 g     O .bss	00000028 fsmButtonStateTEC3
1a005958 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a004032 g     F .text	0000000c Chip_ADC_SetResolution
1a006372 g     F .text	00000002 __malloc_unlock
1a003c48 g     F .text	00000014 Board_UARTPutSTR
1a004cd8 g     F .text	00000034 SysTick_Handler
1a003e50 g     F .text	00000040 Chip_UART_SetBaud
1a0008de  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a003c2c g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000312 g     F .text	000000a4 ds3231_getTime
1a000178  w    F .text	00000002 NMI_Handler
1a006e48 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a000976 g     F .text	0000000a _fstat_r
53ff6fae g       *ABS*	00000000 __valid_user_code_checksum
1a006e48 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0030b0 g     F .text	0000009c ff_wtoupper
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a004506 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a00594c g     F .text	0000000c _cleanup_r
1a003a42 g     F .text	0000000e disk_initialize
1a005194 g     F .text	00000000 .hidden __aeabi_uldivmod
10000ad4 g       .noinit	00000000 _noinit
1a0055d4 g     F .text	00000010 puts
10000ac0 g     O .bss	00000004 SystemCoreClock
10000a48 g     O .bss	00000028 fsmButtonStateTEC2
1a003dfc g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a004584 g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a003a34 g     F .text	0000000e disk_status
1a003cdc g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a0051c4 g     F .text	000002cc .hidden __udivmoddi4
1a000a14 g     F .text	00000020 _sbrk_r
1a006aa8 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a00099c g     F .text	0000004e _read_r
1a003a90 g     F .text	00000012 disk_ioctl
1a00517e g     F .text	0000000a GPIO1_IRQHandler
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a004b00 g     F .text	00000018 uartRxReady
1a006e40 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a006e04 g     O .text	00000004 _global_impure_ptr
1a0035c8 g     F .text	000000b4 FSSDC_FatFs_DiskWrite
1000000c g     O .data	00000004 VolToPart
1a005494 g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a003c5c g     F .text	0000002c Board_Init
1a00096a  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a00498a g     F .text	000000aa Chip_SSP_RWFrames_Blocking
1a003070 g     F .text	00000040 ff_uni2oem
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10000ad4 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a003544 g     F .text	00000084 FSSDC_FatFs_DiskRead
1a0008e0 g     F .text	00000088 Reset_Handler
1a004c5c g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a00367c g     F .text	000002e8 FSSDC_FatFs_DiskIoCtl
1a0046ee g     F .text	00000024 Chip_I2CM_XferBlocking
1a003d98 g     F .text	00000038 Chip_I2C_SetClockRate
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a00423c g     F .text	0000004c Chip_Clock_EnableCrystal
1a003390 g     F .text	000001b4 FSSDC_FatFs_DiskInitialize
1a003964 g     F .text	00000060 FSSDC_InitSPI
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018a g     F .text	0000001e data_init
1a0055e4 g     F .text	0000001e strcat
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a006da4 g     O .text	00000020 __sf_fake_stderr
1a003d74 g     F .text	00000024 Chip_I2C_Init
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a0043f8 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a006c68 g     O .text	00000136 gpioPinsInit
1a004978 g     F .text	00000012 Chip_SSP_SetClockRate
1a004f7e g     F .text	00000016 gpioToggle
1a005cde g     F .text	00000024 __sfputs_r
1a005188 g     F .text	0000000a GPIO2_IRQHandler
1a0062d0 g     F .text	00000000 memchr
1a005b60 g     F .text	0000009c _free_r
1a0044e0 g     F .text	00000026 Chip_Clock_GetBaseClock
1a003a2c g     F .text	00000008 disk_timerproc
100000f8 g       .bss	00000000 _bss
1a004000 g     F .text	00000032 Chip_ADC_SetSampleRate
1a003048 g     F .text	00000028 f_close
1a0050a4 g     F .text	00000020 delayInit
1a000774 g     F .text	00000024 ciaaI2CInit
1a0031a4 g     F .text	00000024 SSPReceive
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a004a34 g     F .text	0000003e Chip_SSP_SetBitRate
1a004740 g     F .text	00000002 Chip_GPIO_Init
1a006ad4 g     O .text	00000004 OscRateIn
1a004b2c g     F .text	0000007c uartInit
10000ad4 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a000558 g     F .text	00000008 diskTickHook
10000580 g     O .bss	00000001 fsmState
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a000828 g     F .text	00000030 buttonPressed
1a00096c g     F .text	0000000a _close_r
1a004d40 g     F .text	00000194 gpioInit
1a0056c8 g     F .text	000000dc __swsetup_r
1a005490  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0059e4 g     F .text	00000078 __sfp
1a006240 g     F .text	00000022 __sread
1a0039f0 g     F .text	0000003c get_fattime
1a004f94 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a006370 g     F .text	00000002 __malloc_lock
1a003c18 g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a0058b0 g     F .text	00000054 _fflush_r
1a006dc4 g     O .text	00000020 __sf_fake_stdin
1a0042a4 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a0054dc g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000560 g     F .text	00000214 main
1a00053c g     F .text	0000001c led3
1a002ee8 g     F .text	00000160 f_sync
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a0003b8 g     F .text	00000134 nameFile
1a004bc8 g     F .text	00000050 spiInit
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a0062be g     F .text	00000008 __sclose
1a005bfc g     F .text	000000b4 _malloc_r
1a0029a0 g     F .text	00000050 f_mount
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a004514 g     F .text	0000003c Chip_Clock_EnableOpts
1a003c92 g     F .text	00000008 __stdio_getchar
10000a70 g     O .bss	00000028 fsmButtonStateTEC4
1a0042c0 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a004378 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a000860 g     F .text	0000007e fsmButtonUpdate
1a004aac g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a004ed4 g     F .text	00000056 gpioWrite
1a000968  w    F .text	00000002 _fini
1a0054ec g     F .text	00000030 iprintf
1a000798 g     F .text	0000003c ciaaI2CWrite
1a003fc0 g     F .text	00000040 Chip_ADC_Init
10000ad0 g     O .bss	00000004 g_pUsbApi
1a003ca4 g     F .text	00000038 Board_SetupMuxing
1a003e90 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a004c18 g     F .text	0000000c tickRead
1a0009ea g     F .text	00000028 _write_r
10000ac8 g     O .bss	00000008 tickRateMS
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a005f30 g     F .text	000000ea _printf_common
10000094 g     O .data	00000004 _impure_ptr
1a0057a4 g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a0045e4 g     F .text	000000fc Chip_I2CM_XferHandler
10000000 g       .data	00000000 _data
1a004c24 g     F .text	00000020 tickCallbackSet
1a0007d4 g     F .text	0000003c ciaaI2CRead
10000ad4 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a004a74 g     F .text	00000038 Chip_SSP_Init
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a005a98 g     F .text	00000048 __swhatbuf_r
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a003bf4 g     F .text	00000024 Board_Debug_Init
1a0004ec g     F .text	00000034 ledsOff
1a003c88 g     F .text	0000000a __stdio_putchar
100000f8 g       .data	00000000 _edata
1a003d54 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a002ca8 g     F .text	00000240 f_write
1a004744 g     F .text	00000154 Chip_SetupCoreClock
1a006262 g     F .text	00000038 __swrite
1a005174 g     F .text	0000000a GPIO0_IRQHandler
1a0029f0 g     F .text	000002b8 f_open
1a003a70 g     F .text	00000020 disk_write
1a005d04 g     F .text	0000022c _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a005a5c g     F .text	0000003c _fwalk_reent
1a0045d0 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a006de4 g     O .text	00000020 __sf_fake_stdout
10000a98 g     O .bss	00000028 fsmButtonStateTEC1
1a005490  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a005ae0 g     F .text	00000080 __smakebuf_r
1a005612 g     F .text	00000010 strlen
1a003a50 g     F .text	00000020 disk_read
1a00601c g     F .text	00000224 _printf_i
1a004550 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
10000a1c g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a004f2a g     F .text	00000054 gpioRead
1a004fb0 g     F .text	000000f4 boardInit
10000a18 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a005d04 g     F .text	0000022c _vfprintf_r
1a000810 g     F .text	00000016 fsmButtonInit
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a004c44 g     F .text	00000018 tickPowerSet
1a000520 g     F .text	0000001c led2
1a0039c4 g     F .text	0000002c FSSDC_Update
1a004488 g     F .text	00000058 Chip_Clock_SetBaseClock
1a004ae4 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a003d48 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 e1 08 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a ae 6f ff 53     }............o.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	d9 4c 00 1a                                         .L..

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	95 4f 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     .O..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	75 51 00 1a 7f 51 00 1a 89 51 00 1a bb 01 00 1a     uQ...Q...Q......
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a006e48 	.word	0x1a006e48
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000f8 	.word	0x000000f8
1a000120:	1a006e48 	.word	0x1a006e48
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a006e48 	.word	0x1a006e48
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a006e48 	.word	0x1a006e48
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a006e48 	.word	0x1a006e48
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000f8 	.word	0x100000f8
1a000154:	000009dc 	.word	0x000009dc
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <bcdToDec>:
	return(((dec / 10) * 16) + (dec % 10));
}

// convert binary coded decimal to normal decimal
static uint8_t bcdToDec(uint8_t bcd) {
  return(((bcd / 16) * 10) + (bcd % 16));
1a000300:	f000 020f 	and.w	r2, r0, #15
1a000304:	0903      	lsrs	r3, r0, #4
1a000306:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00030a:	0058      	lsls	r0, r3, #1
1a00030c:	4410      	add	r0, r2
}
1a00030e:	b2c0      	uxtb	r0, r0
1a000310:	4770      	bx	lr

1a000312 <ds3231_getTime>:

}
// get the time from the rtc, populates a supplied tm struct
// returns true to indicate success
bool_t ds3231_getTime(tm *time)
{
1a000312:	b510      	push	{r4, lr}
1a000314:	b082      	sub	sp, #8
1a000316:	4604      	mov	r4, r0

	int loop;
	uint8_t RTC_Hour[7];

	// start register address
	RTC_Hour[0] = DS3231_ADDR_TIME;
1a000318:	a902      	add	r1, sp, #8
1a00031a:	2300      	movs	r3, #0
1a00031c:	f801 3d08 	strb.w	r3, [r1, #-8]!
	if (!ciaaI2CWrite(DS3231_ADDR, RTC_Hour, 1)) {
1a000320:	2201      	movs	r2, #1
1a000322:	2068      	movs	r0, #104	; 0x68
1a000324:	f000 fa38 	bl	1a000798 <ciaaI2CWrite>
1a000328:	b910      	cbnz	r0, 1a000330 <ds3231_getTime+0x1e>
		return OFF;
1a00032a:	2000      	movs	r0, #0
	time->tm_year = bcdToDec(RTC_Hour[6]);
	time->tm_isdst = 0;

	return ON;

}
1a00032c:	b002      	add	sp, #8
1a00032e:	bd10      	pop	{r4, pc}
	if (!ciaaI2CRead(DS3231_ADDR, RTC_Hour, 7)) {
1a000330:	2207      	movs	r2, #7
1a000332:	4669      	mov	r1, sp
1a000334:	2068      	movs	r0, #104	; 0x68
1a000336:	f000 fa4d 	bl	1a0007d4 <ciaaI2CRead>
1a00033a:	b3d0      	cbz	r0, 1a0003b2 <ds3231_getTime+0xa0>
	time->tm_sec = bcdToDec(RTC_Hour[0]);
1a00033c:	f89d 0000 	ldrb.w	r0, [sp]
1a000340:	f7ff ffde 	bl	1a000300 <bcdToDec>
1a000344:	7020      	strb	r0, [r4, #0]
	time->tm_min = bcdToDec(RTC_Hour[1]);
1a000346:	f89d 0001 	ldrb.w	r0, [sp, #1]
1a00034a:	f7ff ffd9 	bl	1a000300 <bcdToDec>
1a00034e:	7060      	strb	r0, [r4, #1]
	if (RTC_Hour[2] & DS3231_12HOUR_FLAG) {
1a000350:	f89d 0002 	ldrb.w	r0, [sp, #2]
1a000354:	f010 0f40 	tst.w	r0, #64	; 0x40
1a000358:	d00c      	beq.n	1a000374 <ds3231_getTime+0x62>
		time->tm_hour = bcdToDec(RTC_Hour[2] & DS3231_12HOUR_MASK);
1a00035a:	f000 001f 	and.w	r0, r0, #31
1a00035e:	f7ff ffcf 	bl	1a000300 <bcdToDec>
1a000362:	70a0      	strb	r0, [r4, #2]
		if (RTC_Hour[2] & DS3231_PM_FLAG) time->tm_hour += 12;
1a000364:	f89d 3002 	ldrb.w	r3, [sp, #2]
1a000368:	f013 0f20 	tst.w	r3, #32
1a00036c:	d005      	beq.n	1a00037a <ds3231_getTime+0x68>
1a00036e:	300c      	adds	r0, #12
1a000370:	70a0      	strb	r0, [r4, #2]
1a000372:	e002      	b.n	1a00037a <ds3231_getTime+0x68>
		time->tm_hour = bcdToDec(RTC_Hour[2]);
1a000374:	f7ff ffc4 	bl	1a000300 <bcdToDec>
1a000378:	70a0      	strb	r0, [r4, #2]
	time->tm_wday = bcdToDec(RTC_Hour[3]) - 1;
1a00037a:	f89d 0003 	ldrb.w	r0, [sp, #3]
1a00037e:	f7ff ffbf 	bl	1a000300 <bcdToDec>
1a000382:	3801      	subs	r0, #1
1a000384:	70e0      	strb	r0, [r4, #3]
	time->tm_mday = bcdToDec(RTC_Hour[4]);
1a000386:	f89d 0004 	ldrb.w	r0, [sp, #4]
1a00038a:	f7ff ffb9 	bl	1a000300 <bcdToDec>
1a00038e:	7120      	strb	r0, [r4, #4]
	time->tm_mon  = bcdToDec(RTC_Hour[5] & DS3231_MONTH_MASK) - 1;
1a000390:	f89d 0005 	ldrb.w	r0, [sp, #5]
1a000394:	f000 001f 	and.w	r0, r0, #31
1a000398:	f7ff ffb2 	bl	1a000300 <bcdToDec>
1a00039c:	3801      	subs	r0, #1
1a00039e:	7160      	strb	r0, [r4, #5]
	time->tm_year = bcdToDec(RTC_Hour[6]);
1a0003a0:	f89d 0006 	ldrb.w	r0, [sp, #6]
1a0003a4:	f7ff ffac 	bl	1a000300 <bcdToDec>
1a0003a8:	71a0      	strb	r0, [r4, #6]
	time->tm_isdst = 0;
1a0003aa:	2300      	movs	r3, #0
1a0003ac:	71e3      	strb	r3, [r4, #7]
	return ON;
1a0003ae:	2001      	movs	r0, #1
1a0003b0:	e7bc      	b.n	1a00032c <ds3231_getTime+0x1a>
		return OFF;
1a0003b2:	2000      	movs	r0, #0
1a0003b4:	e7ba      	b.n	1a00032c <ds3231_getTime+0x1a>
1a0003b6:	Address 0x000000001a0003b6 is out of bounds.


1a0003b8 <nameFile>:


void nameFile(uint8_t *msj, tm *Current_time){
1a0003b8:	b570      	push	{r4, r5, r6, lr}
1a0003ba:	b08a      	sub	sp, #40	; 0x28
1a0003bc:	4604      	mov	r4, r0
1a0003be:	460d      	mov	r5, r1

	int8_t filename[40]="SDC:/";
1a0003c0:	4b48      	ldr	r3, [pc, #288]	; (1a0004e4 <nameFile+0x12c>)
1a0003c2:	e893 0003 	ldmia.w	r3, {r0, r1}
1a0003c6:	9000      	str	r0, [sp, #0]
1a0003c8:	f8ad 1004 	strh.w	r1, [sp, #4]
1a0003cc:	2222      	movs	r2, #34	; 0x22
1a0003ce:	2100      	movs	r1, #0
1a0003d0:	f10d 0006 	add.w	r0, sp, #6
1a0003d4:	f005 f882 	bl	1a0054dc <memset>

	msj[0]='R';
1a0003d8:	2352      	movs	r3, #82	; 0x52
1a0003da:	7023      	strb	r3, [r4, #0]
	msj[1]='G';
1a0003dc:	2347      	movs	r3, #71	; 0x47
1a0003de:	7063      	strb	r3, [r4, #1]
	msj[2]='L';
1a0003e0:	234c      	movs	r3, #76	; 0x4c
1a0003e2:	70a3      	strb	r3, [r4, #2]
	msj[3]='_';
1a0003e4:	215f      	movs	r1, #95	; 0x5f
1a0003e6:	70e1      	strb	r1, [r4, #3]
	msj[4]=50;  //year
1a0003e8:	2332      	movs	r3, #50	; 0x32
1a0003ea:	7123      	strb	r3, [r4, #4]
	msj[5]=48;
1a0003ec:	2330      	movs	r3, #48	; 0x30
1a0003ee:	7163      	strb	r3, [r4, #5]
	msj[6]=(Current_time->tm_year/10)+48;
1a0003f0:	79aa      	ldrb	r2, [r5, #6]
1a0003f2:	4b3d      	ldr	r3, [pc, #244]	; (1a0004e8 <nameFile+0x130>)
1a0003f4:	fba3 0202 	umull	r0, r2, r3, r2
1a0003f8:	08d2      	lsrs	r2, r2, #3
1a0003fa:	3230      	adds	r2, #48	; 0x30
1a0003fc:	71a2      	strb	r2, [r4, #6]
	msj[7]=(Current_time->tm_year%10)+48;
1a0003fe:	79a8      	ldrb	r0, [r5, #6]
1a000400:	fba3 6200 	umull	r6, r2, r3, r0
1a000404:	08d2      	lsrs	r2, r2, #3
1a000406:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a00040a:	0056      	lsls	r6, r2, #1
1a00040c:	1b80      	subs	r0, r0, r6
1a00040e:	3030      	adds	r0, #48	; 0x30
1a000410:	71e0      	strb	r0, [r4, #7]

	msj[8]=95;   //underscore
1a000412:	7221      	strb	r1, [r4, #8]

	msj[9]=(Current_time->tm_mon/10)+48;  //month
1a000414:	796a      	ldrb	r2, [r5, #5]
1a000416:	fba3 0202 	umull	r0, r2, r3, r2
1a00041a:	08d2      	lsrs	r2, r2, #3
1a00041c:	3230      	adds	r2, #48	; 0x30
1a00041e:	7262      	strb	r2, [r4, #9]
	msj[10]=(Current_time->tm_mon%10)+48;
1a000420:	7968      	ldrb	r0, [r5, #5]
1a000422:	fba3 6200 	umull	r6, r2, r3, r0
1a000426:	08d2      	lsrs	r2, r2, #3
1a000428:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a00042c:	0056      	lsls	r6, r2, #1
1a00042e:	1b80      	subs	r0, r0, r6
1a000430:	3030      	adds	r0, #48	; 0x30
1a000432:	72a0      	strb	r0, [r4, #10]

	msj[11]=95;   //underscore
1a000434:	72e1      	strb	r1, [r4, #11]

	msj[12]=(Current_time->tm_mday/10)+48;   //day
1a000436:	792a      	ldrb	r2, [r5, #4]
1a000438:	fba3 0202 	umull	r0, r2, r3, r2
1a00043c:	08d2      	lsrs	r2, r2, #3
1a00043e:	3230      	adds	r2, #48	; 0x30
1a000440:	7322      	strb	r2, [r4, #12]
	msj[13]=(Current_time->tm_mday%10)+48;
1a000442:	7928      	ldrb	r0, [r5, #4]
1a000444:	fba3 6200 	umull	r6, r2, r3, r0
1a000448:	08d2      	lsrs	r2, r2, #3
1a00044a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a00044e:	0056      	lsls	r6, r2, #1
1a000450:	1b80      	subs	r0, r0, r6
1a000452:	3030      	adds	r0, #48	; 0x30
1a000454:	7360      	strb	r0, [r4, #13]

	msj[14]=95;   //underscore
1a000456:	73a1      	strb	r1, [r4, #14]

	msj[15]=(Current_time->tm_hour/10)+48;   //hour
1a000458:	78aa      	ldrb	r2, [r5, #2]
1a00045a:	fba3 0202 	umull	r0, r2, r3, r2
1a00045e:	08d2      	lsrs	r2, r2, #3
1a000460:	3230      	adds	r2, #48	; 0x30
1a000462:	73e2      	strb	r2, [r4, #15]
	msj[16]=(Current_time->tm_hour%10)+48;
1a000464:	78a8      	ldrb	r0, [r5, #2]
1a000466:	fba3 6200 	umull	r6, r2, r3, r0
1a00046a:	08d2      	lsrs	r2, r2, #3
1a00046c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a000470:	0056      	lsls	r6, r2, #1
1a000472:	1b80      	subs	r0, r0, r6
1a000474:	3030      	adds	r0, #48	; 0x30
1a000476:	7420      	strb	r0, [r4, #16]

	msj[17]=95;   //underscore
1a000478:	7461      	strb	r1, [r4, #17]

	msj[18]=(Current_time->tm_min/10)+48;   //minutes
1a00047a:	786a      	ldrb	r2, [r5, #1]
1a00047c:	fba3 0202 	umull	r0, r2, r3, r2
1a000480:	08d2      	lsrs	r2, r2, #3
1a000482:	3230      	adds	r2, #48	; 0x30
1a000484:	74a2      	strb	r2, [r4, #18]
	msj[19]=(Current_time->tm_min%10)+48;
1a000486:	7868      	ldrb	r0, [r5, #1]
1a000488:	fba3 6200 	umull	r6, r2, r3, r0
1a00048c:	08d2      	lsrs	r2, r2, #3
1a00048e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a000492:	0056      	lsls	r6, r2, #1
1a000494:	1b80      	subs	r0, r0, r6
1a000496:	3030      	adds	r0, #48	; 0x30
1a000498:	74e0      	strb	r0, [r4, #19]

	msj[20]=95;   //underscore
1a00049a:	7521      	strb	r1, [r4, #20]

	msj[21]=(Current_time->tm_sec/10)+48;   //seconds
1a00049c:	782a      	ldrb	r2, [r5, #0]
1a00049e:	fba3 1202 	umull	r1, r2, r3, r2
1a0004a2:	08d2      	lsrs	r2, r2, #3
1a0004a4:	3230      	adds	r2, #48	; 0x30
1a0004a6:	7562      	strb	r2, [r4, #21]
	msj[22]=(Current_time->tm_sec%10)+48;
1a0004a8:	782a      	ldrb	r2, [r5, #0]
1a0004aa:	fba3 1302 	umull	r1, r3, r3, r2
1a0004ae:	08db      	lsrs	r3, r3, #3
1a0004b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0004b4:	0059      	lsls	r1, r3, #1
1a0004b6:	1a52      	subs	r2, r2, r1
1a0004b8:	3230      	adds	r2, #48	; 0x30
1a0004ba:	75a2      	strb	r2, [r4, #22]
	msj[23]='.';
1a0004bc:	232e      	movs	r3, #46	; 0x2e
1a0004be:	75e3      	strb	r3, [r4, #23]
	msj[24]='t';
1a0004c0:	2374      	movs	r3, #116	; 0x74
1a0004c2:	7623      	strb	r3, [r4, #24]
	msj[25]='x';
1a0004c4:	2278      	movs	r2, #120	; 0x78
1a0004c6:	7662      	strb	r2, [r4, #25]
	msj[26]='t';
1a0004c8:	76a3      	strb	r3, [r4, #26]
	msj[27]='\0';
1a0004ca:	2300      	movs	r3, #0
1a0004cc:	76e3      	strb	r3, [r4, #27]
	strcat(filename,msj );
1a0004ce:	4621      	mov	r1, r4
1a0004d0:	4668      	mov	r0, sp
1a0004d2:	f005 f887 	bl	1a0055e4 <strcat>
	strcpy(msj,filename);
1a0004d6:	4669      	mov	r1, sp
1a0004d8:	4620      	mov	r0, r4
1a0004da:	f005 f892 	bl	1a005602 <strcpy>


}
1a0004de:	b00a      	add	sp, #40	; 0x28
1a0004e0:	bd70      	pop	{r4, r5, r6, pc}
1a0004e2:	bf00      	nop
1a0004e4:	1a006374 	.word	0x1a006374
1a0004e8:	cccccccd 	.word	0xcccccccd

1a0004ec <ledsOff>:
/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/

void ledsOff(void)
{
1a0004ec:	b508      	push	{r3, lr}
	gpioWrite(LED1,OFF);
1a0004ee:	2100      	movs	r1, #0
1a0004f0:	202b      	movs	r0, #43	; 0x2b
1a0004f2:	f004 fcef 	bl	1a004ed4 <gpioWrite>
	gpioWrite(LED2,OFF);
1a0004f6:	2100      	movs	r1, #0
1a0004f8:	202c      	movs	r0, #44	; 0x2c
1a0004fa:	f004 fceb 	bl	1a004ed4 <gpioWrite>
	gpioWrite(LED3,OFF);
1a0004fe:	2100      	movs	r1, #0
1a000500:	202d      	movs	r0, #45	; 0x2d
1a000502:	f004 fce7 	bl	1a004ed4 <gpioWrite>

	gpioWrite(LEDR,OFF);
1a000506:	2100      	movs	r1, #0
1a000508:	2028      	movs	r0, #40	; 0x28
1a00050a:	f004 fce3 	bl	1a004ed4 <gpioWrite>
	gpioWrite(LEDG,OFF);
1a00050e:	2100      	movs	r1, #0
1a000510:	2029      	movs	r0, #41	; 0x29
1a000512:	f004 fcdf 	bl	1a004ed4 <gpioWrite>
	gpioWrite(LEDB,OFF);
1a000516:	2100      	movs	r1, #0
1a000518:	202a      	movs	r0, #42	; 0x2a
1a00051a:	f004 fcdb 	bl	1a004ed4 <gpioWrite>
}
1a00051e:	bd08      	pop	{r3, pc}

1a000520 <led2>:
	gpioWrite(LED2,OFF);
	gpioWrite(LED3,OFF);

}
void led2(void)
{
1a000520:	b508      	push	{r3, lr}
	gpioWrite(LED1,OFF);
1a000522:	2100      	movs	r1, #0
1a000524:	202b      	movs	r0, #43	; 0x2b
1a000526:	f004 fcd5 	bl	1a004ed4 <gpioWrite>
	gpioWrite(LED2,ON);
1a00052a:	2101      	movs	r1, #1
1a00052c:	202c      	movs	r0, #44	; 0x2c
1a00052e:	f004 fcd1 	bl	1a004ed4 <gpioWrite>
	gpioWrite(LED3,OFF);
1a000532:	2100      	movs	r1, #0
1a000534:	202d      	movs	r0, #45	; 0x2d
1a000536:	f004 fccd 	bl	1a004ed4 <gpioWrite>

}
1a00053a:	bd08      	pop	{r3, pc}

1a00053c <led3>:
void led3 ( void)
{
1a00053c:	b508      	push	{r3, lr}
	gpioWrite(LED1,OFF);
1a00053e:	2100      	movs	r1, #0
1a000540:	202b      	movs	r0, #43	; 0x2b
1a000542:	f004 fcc7 	bl	1a004ed4 <gpioWrite>
	gpioWrite(LED2,OFF);
1a000546:	2100      	movs	r1, #0
1a000548:	202c      	movs	r0, #44	; 0x2c
1a00054a:	f004 fcc3 	bl	1a004ed4 <gpioWrite>
	gpioWrite(LED3,ON);
1a00054e:	2101      	movs	r1, #1
1a000550:	202d      	movs	r0, #45	; 0x2d
1a000552:	f004 fcbf 	bl	1a004ed4 <gpioWrite>

}
1a000556:	bd08      	pop	{r3, pc}

1a000558 <diskTickHook>:


void diskTickHook( void *ptr );

/*==================[external functions definition]==========================*/
void diskTickHook( void *ptr ){
1a000558:	b508      	push	{r3, lr}
   disk_timerproc();   // Disk timer process
1a00055a:	f003 fa67 	bl	1a003a2c <disk_timerproc>
}
1a00055e:	bd08      	pop	{r3, pc}

1a000560 <main>:
fsmButtonStateBoard_t fsmButtonStateTEC1;
fsmButtonStateBoard_t fsmButtonStateTEC2;
fsmButtonStateBoard_t fsmButtonStateTEC3;
fsmButtonStateBoard_t fsmButtonStateTEC4;
/* FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE RESET. */
int main(void){
1a000560:	b570      	push	{r4, r5, r6, lr}
1a000562:	b09c      	sub	sp, #112	; 0x70




   /*Board Config*/
   boardConfig();
1a000564:	f004 fd24 	bl	1a004fb0 <boardInit>

   fsmState=init;
1a000568:	2400      	movs	r4, #0
1a00056a:	4b75      	ldr	r3, [pc, #468]	; (1a000740 <main+0x1e0>)
1a00056c:	701c      	strb	r4, [r3, #0]
   fsmButtonInit(&fsmButtonStateTEC1,TEC1);
1a00056e:	2124      	movs	r1, #36	; 0x24
1a000570:	4874      	ldr	r0, [pc, #464]	; (1a000744 <main+0x1e4>)
1a000572:	f000 f94d 	bl	1a000810 <fsmButtonInit>
   fsmButtonInit(&fsmButtonStateTEC2,TEC2);
1a000576:	2125      	movs	r1, #37	; 0x25
1a000578:	4873      	ldr	r0, [pc, #460]	; (1a000748 <main+0x1e8>)
1a00057a:	f000 f949 	bl	1a000810 <fsmButtonInit>
   fsmButtonInit(&fsmButtonStateTEC3,TEC3);
1a00057e:	2126      	movs	r1, #38	; 0x26
1a000580:	4872      	ldr	r0, [pc, #456]	; (1a00074c <main+0x1ec>)
1a000582:	f000 f945 	bl	1a000810 <fsmButtonInit>
   fsmButtonInit(&fsmButtonStateTEC4,TEC4);
1a000586:	2127      	movs	r1, #39	; 0x27
1a000588:	4871      	ldr	r0, [pc, #452]	; (1a000750 <main+0x1f0>)
1a00058a:	f000 f941 	bl	1a000810 <fsmButtonInit>


   /* Inicializar UART_USB a 115200 baudios */
   uartConfig( UART_USB, 115200 );
1a00058e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000592:	2003      	movs	r0, #3
1a000594:	f004 faca 	bl	1a004b2c <uartInit>

   // using I2C for communication
   // starting the I2C bus
   ciaaI2CInit();
1a000598:	f000 f8ec 	bl	1a000774 <ciaaI2CInit>


   // SPI configuration
   spiConfig( SPI0 );
1a00059c:	4620      	mov	r0, r4
1a00059e:	f004 fb13 	bl	1a004bc8 <spiInit>
   // Inicializar el conteo de Ticks con resolucion de 10ms,
   // con tickHook diskTickHook
   tickConfig( 1 );
1a0005a2:	2001      	movs	r0, #1
1a0005a4:	2100      	movs	r1, #0
1a0005a6:	f004 fb59 	bl	1a004c5c <tickInit>
   tickCallbackSet( diskTickHook, NULL );
1a0005aa:	4621      	mov	r1, r4
1a0005ac:	4869      	ldr	r0, [pc, #420]	; (1a000754 <main+0x1f4>)
1a0005ae:	f004 fb39 	bl	1a004c24 <tickCallbackSet>


   // ------ PROGRAMA QUE ESCRIBE EN LA SD -------
   UINT nbytes;
   // Initialize SD card driver
   FSSDC_InitSPI ();
1a0005b2:	f003 f9d7 	bl	1a003964 <FSSDC_InitSPI>
   // Give a work area to the default drive
   if( f_mount( &fs, "SDC:", 0 ) != FR_OK ) {
1a0005b6:	4622      	mov	r2, r4
1a0005b8:	4967      	ldr	r1, [pc, #412]	; (1a000758 <main+0x1f8>)
1a0005ba:	4868      	ldr	r0, [pc, #416]	; (1a00075c <main+0x1fc>)
1a0005bc:	f002 f9f0 	bl	1a0029a0 <f_mount>
   tm Current_time;

   uint16_t i=0;

   //delayConfig( &delayTec, 40 );
   delayInit( &delayLedInit, 200 );
1a0005c0:	22c8      	movs	r2, #200	; 0xc8
1a0005c2:	2300      	movs	r3, #0
1a0005c4:	a808      	add	r0, sp, #32
1a0005c6:	f004 fd6d 	bl	1a0050a4 <delayInit>
   delayInit( &delayLedStop, 1000 );
1a0005ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a0005ce:	2300      	movs	r3, #0
1a0005d0:	a802      	add	r0, sp, #8
1a0005d2:	f004 fd67 	bl	1a0050a4 <delayInit>
  // 	    	 delay(20);
   	    	 gpioToggle(LED2);}
   f_close(&fp);
*/

   printf("Entrando a modo Init. Presione TEC1 para iniciar. \r\n");
1a0005d6:	4862      	ldr	r0, [pc, #392]	; (1a000760 <main+0x200>)
1a0005d8:	f004 fffc 	bl	1a0055d4 <puts>
1a0005dc:	e003      	b.n	1a0005e6 <main+0x86>
	   fsmButtonUpdate(&fsmButtonStateTEC3);
	   fsmButtonUpdate(&fsmButtonStateTEC4);

	   switch(fsmState){
	      case init:
	    	 if(delayRead(&delayLedInit))
1a0005de:	a808      	add	r0, sp, #32
1a0005e0:	f004 fd70 	bl	1a0050c4 <delayRead>
1a0005e4:	bb00      	cbnz	r0, 1a000628 <main+0xc8>
	   fsmButtonUpdate(&fsmButtonStateTEC1);
1a0005e6:	4857      	ldr	r0, [pc, #348]	; (1a000744 <main+0x1e4>)
1a0005e8:	f000 f93a 	bl	1a000860 <fsmButtonUpdate>
	   fsmButtonUpdate(&fsmButtonStateTEC2);
1a0005ec:	4856      	ldr	r0, [pc, #344]	; (1a000748 <main+0x1e8>)
1a0005ee:	f000 f937 	bl	1a000860 <fsmButtonUpdate>
	   fsmButtonUpdate(&fsmButtonStateTEC3);
1a0005f2:	4856      	ldr	r0, [pc, #344]	; (1a00074c <main+0x1ec>)
1a0005f4:	f000 f934 	bl	1a000860 <fsmButtonUpdate>
	   fsmButtonUpdate(&fsmButtonStateTEC4);
1a0005f8:	4855      	ldr	r0, [pc, #340]	; (1a000750 <main+0x1f0>)
1a0005fa:	f000 f931 	bl	1a000860 <fsmButtonUpdate>
	   switch(fsmState){
1a0005fe:	4b50      	ldr	r3, [pc, #320]	; (1a000740 <main+0x1e0>)
1a000600:	781b      	ldrb	r3, [r3, #0]
1a000602:	2b00      	cmp	r3, #0
1a000604:	d0eb      	beq.n	1a0005de <main+0x7e>
1a000606:	2b01      	cmp	r3, #1
1a000608:	d1ed      	bne.n	1a0005e6 <main+0x86>
	    	   gpioToggle(LED1);
	      break;

	      case adq:
	    	  /* Si recibe un byte de la UART_USB lo guardarlo en la variable dato. */
	    	   if(  uartReadByte( UART_USB, &dato )){
1a00060a:	f10d 0143 	add.w	r1, sp, #67	; 0x43
1a00060e:	2003      	movs	r0, #3
1a000610:	f004 faca 	bl	1a004ba8 <uartReadByte>
1a000614:	b960      	cbnz	r0, 1a000630 <main+0xd0>
	    		   else
	    	 	       i=0;


	    	   }
	    	   if(delayRead(&delayLedStop))
1a000616:	a802      	add	r0, sp, #8
1a000618:	f004 fd54 	bl	1a0050c4 <delayRead>
1a00061c:	2800      	cmp	r0, #0
1a00061e:	d0e2      	beq.n	1a0005e6 <main+0x86>
	    	     gpioToggle(LED3);
1a000620:	202d      	movs	r0, #45	; 0x2d
1a000622:	f004 fcac 	bl	1a004f7e <gpioToggle>
1a000626:	e7de      	b.n	1a0005e6 <main+0x86>
	    	   gpioToggle(LED1);
1a000628:	202b      	movs	r0, #43	; 0x2b
1a00062a:	f004 fca8 	bl	1a004f7e <gpioToggle>
1a00062e:	e7da      	b.n	1a0005e6 <main+0x86>
	    		   printf("recibiendo byte n:%d\r\n",i);
1a000630:	4621      	mov	r1, r4
1a000632:	484c      	ldr	r0, [pc, #304]	; (1a000764 <main+0x204>)
1a000634:	f004 ff5a 	bl	1a0054ec <iprintf>
	    		   if(i<2048 && i>0){
1a000638:	1e63      	subs	r3, r4, #1
1a00063a:	b29b      	uxth	r3, r3
1a00063c:	f240 72fe 	movw	r2, #2046	; 0x7fe
1a000640:	4293      	cmp	r3, r2
1a000642:	d903      	bls.n	1a00064c <main+0xec>
	    		   else if(i==0){
1a000644:	2c00      	cmp	r4, #0
1a000646:	d037      	beq.n	1a0006b8 <main+0x158>
	    	 	       i=0;
1a000648:	2400      	movs	r4, #0
1a00064a:	e7e4      	b.n	1a000616 <main+0xb6>
	    		  	 if( f_open( &fp, msj, FA_WRITE | FA_OPEN_APPEND ) == FR_OK ){
1a00064c:	2232      	movs	r2, #50	; 0x32
1a00064e:	a911      	add	r1, sp, #68	; 0x44
1a000650:	4845      	ldr	r0, [pc, #276]	; (1a000768 <main+0x208>)
1a000652:	f002 f9cd 	bl	1a0029f0 <f_open>
1a000656:	b110      	cbz	r0, 1a00065e <main+0xfe>
	    		  	  i++;
1a000658:	3401      	adds	r4, #1
1a00065a:	b2a4      	uxth	r4, r4
1a00065c:	e7db      	b.n	1a000616 <main+0xb6>
	    		     uartBuff[0]=dato;
1a00065e:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
1a000662:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	    		     uartBuff[1]='\0';
1a000666:	2300      	movs	r3, #0
1a000668:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
	    		     strcat (uartBuff, "\r\n");
1a00066c:	ad0e      	add	r5, sp, #56	; 0x38
1a00066e:	4628      	mov	r0, r5
1a000670:	f004 ffcf 	bl	1a005612 <strlen>
1a000674:	182a      	adds	r2, r5, r0
1a000676:	4b3d      	ldr	r3, [pc, #244]	; (1a00076c <main+0x20c>)
1a000678:	8819      	ldrh	r1, [r3, #0]
1a00067a:	789b      	ldrb	r3, [r3, #2]
1a00067c:	5229      	strh	r1, [r5, r0]
1a00067e:	7093      	strb	r3, [r2, #2]
	    		  	 f_write( &fp,uartBuff,strlen(uartBuff), &nbytes );
1a000680:	4628      	mov	r0, r5
1a000682:	f004 ffc6 	bl	1a005612 <strlen>
1a000686:	4e38      	ldr	r6, [pc, #224]	; (1a000768 <main+0x208>)
1a000688:	ab1b      	add	r3, sp, #108	; 0x6c
1a00068a:	4602      	mov	r2, r0
1a00068c:	4629      	mov	r1, r5
1a00068e:	4630      	mov	r0, r6
1a000690:	f002 fb0a 	bl	1a002ca8 <f_write>
	    		     f_close(&fp);
1a000694:	4630      	mov	r0, r6
1a000696:	f002 fcd7 	bl	1a003048 <f_close>
	    		     if( nbytes == strlen(uartBuff) ){
1a00069a:	4628      	mov	r0, r5
1a00069c:	f004 ffb9 	bl	1a005612 <strlen>
1a0006a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a0006a2:	4298      	cmp	r0, r3
1a0006a4:	d004      	beq.n	1a0006b0 <main+0x150>
	    		    	 gpioWrite(LEDR,ON);
1a0006a6:	2101      	movs	r1, #1
1a0006a8:	2028      	movs	r0, #40	; 0x28
1a0006aa:	f004 fc13 	bl	1a004ed4 <gpioWrite>
1a0006ae:	e7d3      	b.n	1a000658 <main+0xf8>
	    		  	  gpioToggle(LEDB);
1a0006b0:	202a      	movs	r0, #42	; 0x2a
1a0006b2:	f004 fc64 	bl	1a004f7e <gpioToggle>
1a0006b6:	e7cf      	b.n	1a000658 <main+0xf8>
	    		   	  if (ds3231_getTime(&Current_time)){
1a0006b8:	4668      	mov	r0, sp
1a0006ba:	f7ff fe2a 	bl	1a000312 <ds3231_getTime>
1a0006be:	2800      	cmp	r0, #0
1a0006c0:	d0a9      	beq.n	1a000616 <main+0xb6>
	    		   	  nameFile(msj, &Current_time);
1a0006c2:	4669      	mov	r1, sp
1a0006c4:	a811      	add	r0, sp, #68	; 0x44
1a0006c6:	f7ff fe77 	bl	1a0003b8 <nameFile>
	    		   	  printf("archivo a guardar en microSD %s \r\n",msj);
1a0006ca:	a911      	add	r1, sp, #68	; 0x44
1a0006cc:	4828      	ldr	r0, [pc, #160]	; (1a000770 <main+0x210>)
1a0006ce:	f004 ff0d 	bl	1a0054ec <iprintf>
	    		   	  if( f_open( &fp, msj, FA_WRITE | FA_OPEN_APPEND ) == FR_OK ){
1a0006d2:	2232      	movs	r2, #50	; 0x32
1a0006d4:	a911      	add	r1, sp, #68	; 0x44
1a0006d6:	4824      	ldr	r0, [pc, #144]	; (1a000768 <main+0x208>)
1a0006d8:	f002 f98a 	bl	1a0029f0 <f_open>
1a0006dc:	b110      	cbz	r0, 1a0006e4 <main+0x184>
	    		   	  i++;
1a0006de:	3401      	adds	r4, #1
1a0006e0:	b2a4      	uxth	r4, r4
1a0006e2:	e798      	b.n	1a000616 <main+0xb6>
	    		   	uartBuff[0]=dato;
1a0006e4:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
1a0006e8:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	    		   	  uartBuff[1]='\0';
1a0006ec:	2300      	movs	r3, #0
1a0006ee:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
	    		   	  strcat (uartBuff, "\r\n");
1a0006f2:	ad0e      	add	r5, sp, #56	; 0x38
1a0006f4:	4628      	mov	r0, r5
1a0006f6:	f004 ff8c 	bl	1a005612 <strlen>
1a0006fa:	182a      	adds	r2, r5, r0
1a0006fc:	4b1b      	ldr	r3, [pc, #108]	; (1a00076c <main+0x20c>)
1a0006fe:	8819      	ldrh	r1, [r3, #0]
1a000700:	789b      	ldrb	r3, [r3, #2]
1a000702:	5229      	strh	r1, [r5, r0]
1a000704:	7093      	strb	r3, [r2, #2]
	    		   	  f_write( &fp,uartBuff,strlen(uartBuff), &nbytes );
1a000706:	4628      	mov	r0, r5
1a000708:	f004 ff83 	bl	1a005612 <strlen>
1a00070c:	4e16      	ldr	r6, [pc, #88]	; (1a000768 <main+0x208>)
1a00070e:	ab1b      	add	r3, sp, #108	; 0x6c
1a000710:	4602      	mov	r2, r0
1a000712:	4629      	mov	r1, r5
1a000714:	4630      	mov	r0, r6
1a000716:	f002 fac7 	bl	1a002ca8 <f_write>
	    		   	  f_close(&fp);
1a00071a:	4630      	mov	r0, r6
1a00071c:	f002 fc94 	bl	1a003048 <f_close>
	    		      if( nbytes == strlen(uartBuff) ){
1a000720:	4628      	mov	r0, r5
1a000722:	f004 ff76 	bl	1a005612 <strlen>
1a000726:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a000728:	4298      	cmp	r0, r3
1a00072a:	d004      	beq.n	1a000736 <main+0x1d6>
	    		        gpioWrite(LEDR,ON);
1a00072c:	2101      	movs	r1, #1
1a00072e:	2028      	movs	r0, #40	; 0x28
1a000730:	f004 fbd0 	bl	1a004ed4 <gpioWrite>
1a000734:	e7d3      	b.n	1a0006de <main+0x17e>
	    		   	  gpioToggle(LEDB);
1a000736:	202a      	movs	r0, #42	; 0x2a
1a000738:	f004 fc21 	bl	1a004f7e <gpioToggle>
1a00073c:	e7cf      	b.n	1a0006de <main+0x17e>
1a00073e:	bf00      	nop
1a000740:	10000580 	.word	0x10000580
1a000744:	10000a98 	.word	0x10000a98
1a000748:	10000a48 	.word	0x10000a48
1a00074c:	10000a20 	.word	0x10000a20
1a000750:	10000a70 	.word	0x10000a70
1a000754:	1a000559 	.word	0x1a000559
1a000758:	1a00639c 	.word	0x1a00639c
1a00075c:	10000348 	.word	0x10000348
1a000760:	1a0063a4 	.word	0x1a0063a4
1a000764:	1a0063d8 	.word	0x1a0063d8
1a000768:	100000f8 	.word	0x100000f8
1a00076c:	1a006410 	.word	0x1a006410
1a000770:	1a0063f0 	.word	0x1a0063f0

1a000774 <ciaaI2CInit>:

#include "ciaaI2C.h"


void ciaaI2CInit(void)
{
1a000774:	b508      	push	{r3, lr}
	//configuro i2c y lo activo
	Chip_I2C_Init(I2C0);
1a000776:	2000      	movs	r0, #0
1a000778:	f003 fafc 	bl	1a003d74 <Chip_I2C_Init>
	Chip_I2C_SetClockRate(I2C0, 400000);
1a00077c:	4904      	ldr	r1, [pc, #16]	; (1a000790 <ciaaI2CInit+0x1c>)
1a00077e:	2000      	movs	r0, #0
1a000780:	f003 fb0a 	bl	1a003d98 <Chip_I2C_SetClockRate>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a000784:	4b03      	ldr	r3, [pc, #12]	; (1a000794 <ciaaI2CInit+0x20>)
1a000786:	f640 0208 	movw	r2, #2056	; 0x808
1a00078a:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
	Chip_SCU_I2C0PinConfig(I2C0_STANDARD_FAST_MODE);

}
1a00078e:	bd08      	pop	{r3, pc}
1a000790:	00061a80 	.word	0x00061a80
1a000794:	40086000 	.word	0x40086000

1a000798 <ciaaI2CWrite>:

Status ciaaI2CWrite(uint8_t sl_addr, uint8_t * buffer, int len)
{
1a000798:	b500      	push	{lr}
1a00079a:	b085      	sub	sp, #20
	I2CM_XFER_T xfer;

	xfer.slaveAddr = sl_addr;
1a00079c:	f88d 0000 	strb.w	r0, [sp]
	xfer.txBuff = buffer;
1a0007a0:	9102      	str	r1, [sp, #8]
	xfer.txSz = len;
1a0007a2:	f8ad 2004 	strh.w	r2, [sp, #4]
	xfer.rxBuff = 0;
1a0007a6:	2300      	movs	r3, #0
1a0007a8:	9303      	str	r3, [sp, #12]
	xfer.rxSz = 0;
1a0007aa:	f8ad 3006 	strh.w	r3, [sp, #6]
	xfer.options = 0;
1a0007ae:	f88d 3001 	strb.w	r3, [sp, #1]
	xfer.status = 0;
1a0007b2:	f8ad 3002 	strh.w	r3, [sp, #2]

	Chip_I2CM_XferBlocking(LPC_I2C0, &xfer);
1a0007b6:	4669      	mov	r1, sp
1a0007b8:	4805      	ldr	r0, [pc, #20]	; (1a0007d0 <ciaaI2CWrite+0x38>)
1a0007ba:	f003 ff98 	bl	1a0046ee <Chip_I2CM_XferBlocking>

	if(xfer.status == I2CM_STATUS_OK) return SUCCESS;
1a0007be:	f8bd 3002 	ldrh.w	r3, [sp, #2]
1a0007c2:	b11b      	cbz	r3, 1a0007cc <ciaaI2CWrite+0x34>
	else return ERROR;
1a0007c4:	2000      	movs	r0, #0

}
1a0007c6:	b005      	add	sp, #20
1a0007c8:	f85d fb04 	ldr.w	pc, [sp], #4
	if(xfer.status == I2CM_STATUS_OK) return SUCCESS;
1a0007cc:	2001      	movs	r0, #1
1a0007ce:	e7fa      	b.n	1a0007c6 <ciaaI2CWrite+0x2e>
1a0007d0:	400a1000 	.word	0x400a1000

1a0007d4 <ciaaI2CRead>:

Status ciaaI2CRead(uint8_t sl_addr, uint8_t * buffer, int len)
{
1a0007d4:	b500      	push	{lr}
1a0007d6:	b085      	sub	sp, #20
	I2CM_XFER_T xfer;

	xfer.slaveAddr = sl_addr;
1a0007d8:	f88d 0000 	strb.w	r0, [sp]
	xfer.txBuff = 0;
1a0007dc:	2300      	movs	r3, #0
1a0007de:	9302      	str	r3, [sp, #8]
	xfer.txSz = 0;
1a0007e0:	f8ad 3004 	strh.w	r3, [sp, #4]
	xfer.rxBuff = buffer;
1a0007e4:	9103      	str	r1, [sp, #12]
	xfer.rxSz = len;
1a0007e6:	f8ad 2006 	strh.w	r2, [sp, #6]
	xfer.options = 0;
1a0007ea:	f88d 3001 	strb.w	r3, [sp, #1]
	xfer.status = 0;
1a0007ee:	f8ad 3002 	strh.w	r3, [sp, #2]

	Chip_I2CM_XferBlocking(LPC_I2C0, &xfer);
1a0007f2:	4669      	mov	r1, sp
1a0007f4:	4805      	ldr	r0, [pc, #20]	; (1a00080c <ciaaI2CRead+0x38>)
1a0007f6:	f003 ff7a 	bl	1a0046ee <Chip_I2CM_XferBlocking>

	if(xfer.status == I2CM_STATUS_OK) return SUCCESS;
1a0007fa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
1a0007fe:	b11b      	cbz	r3, 1a000808 <ciaaI2CRead+0x34>
	else return ERROR;
1a000800:	2000      	movs	r0, #0
}
1a000802:	b005      	add	sp, #20
1a000804:	f85d fb04 	ldr.w	pc, [sp], #4
	if(xfer.status == I2CM_STATUS_OK) return SUCCESS;
1a000808:	2001      	movs	r0, #1
1a00080a:	e7fa      	b.n	1a000802 <ciaaI2CRead+0x2e>
1a00080c:	400a1000 	.word	0x400a1000

1a000810 <fsmButtonInit>:
	        }stateFsm_t;
/*==================[external data definition]===============================*/
extern  stateFsm_t fsmState;
/*==================[internal functions definition]==========================*/
void fsmButtonInit( fsmButtonStateBoard_t* fsmButtonState,gpioMap_t TEC)
{
1a000810:	b508      	push	{r3, lr}
	fsmButtonState->ButtonState=BUTTON_UP_s;
1a000812:	2300      	movs	r3, #0
1a000814:	7003      	strb	r3, [r0, #0]
	fsmButtonState->countTick=0;
1a000816:	6043      	str	r3, [r0, #4]
	fsmButtonState->TEC=TEC;
1a000818:	7201      	strb	r1, [r0, #8]
	delayInit(&(fsmButtonState->delayTEC),TIME_TEC_PUSH);
1a00081a:	2228      	movs	r2, #40	; 0x28
1a00081c:	2300      	movs	r3, #0
1a00081e:	3010      	adds	r0, #16
1a000820:	f004 fc40 	bl	1a0050a4 <delayInit>

}
1a000824:	bd08      	pop	{r3, pc}
1a000826:	Address 0x000000001a000826 is out of bounds.


1a000828 <buttonPressed>:
}



void buttonPressed  ( gpioMap_t key )
{
1a000828:	b508      	push	{r3, lr}


	switch(key)
1a00082a:	3824      	subs	r0, #36	; 0x24
1a00082c:	2803      	cmp	r0, #3
1a00082e:	d806      	bhi.n	1a00083e <buttonPressed+0x16>
1a000830:	e8df f000 	tbb	[pc, r0]
1a000834:	0c090602 	.word	0x0c090602
	{
	case TEC1:
		//led1();
		fsmState=adq;
1a000838:	4b06      	ldr	r3, [pc, #24]	; (1a000854 <buttonPressed+0x2c>)
1a00083a:	2201      	movs	r2, #1
1a00083c:	701a      	strb	r2, [r3, #0]
		//ledG();
		fsmState=init;
		break;
	}

}
1a00083e:	bd08      	pop	{r3, pc}
		led2();
1a000840:	f7ff fe6e 	bl	1a000520 <led2>
		break;
1a000844:	e7fb      	b.n	1a00083e <buttonPressed+0x16>
		led3();
1a000846:	f7ff fe79 	bl	1a00053c <led3>
		break;
1a00084a:	e7f8      	b.n	1a00083e <buttonPressed+0x16>
		fsmState=init;
1a00084c:	4b01      	ldr	r3, [pc, #4]	; (1a000854 <buttonPressed+0x2c>)
1a00084e:	2200      	movs	r2, #0
1a000850:	701a      	strb	r2, [r3, #0]
}
1a000852:	e7f4      	b.n	1a00083e <buttonPressed+0x16>
1a000854:	10000580 	.word	0x10000580

1a000858 <buttonReleased>:
void buttonReleased ( void )
{
1a000858:	b508      	push	{r3, lr}
	ledsOff();
1a00085a:	f7ff fe47 	bl	1a0004ec <ledsOff>

}
1a00085e:	bd08      	pop	{r3, pc}

1a000860 <fsmButtonUpdate>:
{
1a000860:	b538      	push	{r3, r4, r5, lr}
1a000862:	4604      	mov	r4, r0
	switch(fsmButtonState->ButtonState)
1a000864:	7803      	ldrb	r3, [r0, #0]
1a000866:	2b03      	cmp	r3, #3
1a000868:	d835      	bhi.n	1a0008d6 <fsmButtonUpdate+0x76>
1a00086a:	e8df f003 	tbb	[pc, r3]
1a00086e:	0902      	.short	0x0902
1a000870:	2310      	.short	0x2310
			if(!gpioRead(fsmButtonState->TEC))
1a000872:	7a00      	ldrb	r0, [r0, #8]
1a000874:	f004 fb59 	bl	1a004f2a <gpioRead>
1a000878:	bb80      	cbnz	r0, 1a0008dc <fsmButtonUpdate+0x7c>
				fsmButtonState->ButtonState=BUTTON_FALLING_s;
1a00087a:	2302      	movs	r3, #2
1a00087c:	7023      	strb	r3, [r4, #0]
1a00087e:	e02d      	b.n	1a0008dc <fsmButtonUpdate+0x7c>
			if(gpioRead(fsmButtonState->TEC))
1a000880:	7a00      	ldrb	r0, [r0, #8]
1a000882:	f004 fb52 	bl	1a004f2a <gpioRead>
1a000886:	b348      	cbz	r0, 1a0008dc <fsmButtonUpdate+0x7c>
				fsmButtonState->ButtonState=BUTTON_RISING_s;
1a000888:	2303      	movs	r3, #3
1a00088a:	7023      	strb	r3, [r4, #0]
1a00088c:	e026      	b.n	1a0008dc <fsmButtonUpdate+0x7c>
			if(delayRead(&(fsmButtonState->delayTEC)))
1a00088e:	3010      	adds	r0, #16
1a000890:	f004 fc18 	bl	1a0050c4 <delayRead>
1a000894:	b310      	cbz	r0, 1a0008dc <fsmButtonUpdate+0x7c>
				if(!gpioRead(fsmButtonState->TEC))
1a000896:	7a20      	ldrb	r0, [r4, #8]
1a000898:	f004 fb47 	bl	1a004f2a <gpioRead>
1a00089c:	b110      	cbz	r0, 1a0008a4 <fsmButtonUpdate+0x44>
					fsmButtonState->ButtonState=BUTTON_UP_s;
1a00089e:	2300      	movs	r3, #0
1a0008a0:	7023      	strb	r3, [r4, #0]
1a0008a2:	e01b      	b.n	1a0008dc <fsmButtonUpdate+0x7c>
					fsmButtonState->ButtonState=BUTTON_DOWN_s;
1a0008a4:	2301      	movs	r3, #1
1a0008a6:	7023      	strb	r3, [r4, #0]
					buttonPressed(fsmButtonState->TEC);             //action TEC1
1a0008a8:	7a20      	ldrb	r0, [r4, #8]
1a0008aa:	f7ff ffbd 	bl	1a000828 <buttonPressed>
					fsmButtonState->countTick=0;
1a0008ae:	2300      	movs	r3, #0
1a0008b0:	6063      	str	r3, [r4, #4]
1a0008b2:	e013      	b.n	1a0008dc <fsmButtonUpdate+0x7c>
			if(delayRead(&(fsmButtonState->delayTEC)))
1a0008b4:	3010      	adds	r0, #16
1a0008b6:	f004 fc05 	bl	1a0050c4 <delayRead>
1a0008ba:	b178      	cbz	r0, 1a0008dc <fsmButtonUpdate+0x7c>
				if(gpioRead(fsmButtonState->TEC))
1a0008bc:	7a20      	ldrb	r0, [r4, #8]
1a0008be:	f004 fb34 	bl	1a004f2a <gpioRead>
1a0008c2:	b910      	cbnz	r0, 1a0008ca <fsmButtonUpdate+0x6a>
					fsmButtonState->ButtonState=BUTTON_DOWN_s;
1a0008c4:	2301      	movs	r3, #1
1a0008c6:	7023      	strb	r3, [r4, #0]
1a0008c8:	e008      	b.n	1a0008dc <fsmButtonUpdate+0x7c>
					fsmButtonState->ButtonState=BUTTON_UP_s;
1a0008ca:	2500      	movs	r5, #0
1a0008cc:	7025      	strb	r5, [r4, #0]
					buttonReleased();
1a0008ce:	f7ff ffc3 	bl	1a000858 <buttonReleased>
					fsmButtonState->countTick=0;
1a0008d2:	6065      	str	r5, [r4, #4]
1a0008d4:	e002      	b.n	1a0008dc <fsmButtonUpdate+0x7c>
			 fsmButtonInit(fsmButtonState,fsmButtonState->TEC);
1a0008d6:	7a01      	ldrb	r1, [r0, #8]
1a0008d8:	f7ff ff9a 	bl	1a000810 <fsmButtonInit>
}
1a0008dc:	bd38      	pop	{r3, r4, r5, pc}

1a0008de <initialise_monitor_handles>:
}
1a0008de:	4770      	bx	lr

1a0008e0 <Reset_Handler>:
void Reset_Handler(void) {
1a0008e0:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a0008e2:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0008e4:	4b19      	ldr	r3, [pc, #100]	; (1a00094c <Reset_Handler+0x6c>)
1a0008e6:	4a1a      	ldr	r2, [pc, #104]	; (1a000950 <Reset_Handler+0x70>)
1a0008e8:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0008ea:	3304      	adds	r3, #4
1a0008ec:	4a19      	ldr	r2, [pc, #100]	; (1a000954 <Reset_Handler+0x74>)
1a0008ee:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0008f0:	2300      	movs	r3, #0
1a0008f2:	e005      	b.n	1a000900 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0008f4:	4a18      	ldr	r2, [pc, #96]	; (1a000958 <Reset_Handler+0x78>)
1a0008f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0008fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0008fe:	3301      	adds	r3, #1
1a000900:	2b07      	cmp	r3, #7
1a000902:	d9f7      	bls.n	1a0008f4 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000904:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000906:	4b15      	ldr	r3, [pc, #84]	; (1a00095c <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000908:	e007      	b.n	1a00091a <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a00090a:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00090e:	689a      	ldr	r2, [r3, #8]
1a000910:	6859      	ldr	r1, [r3, #4]
1a000912:	6818      	ldr	r0, [r3, #0]
1a000914:	f7ff fc39 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000918:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a00091a:	4a11      	ldr	r2, [pc, #68]	; (1a000960 <Reset_Handler+0x80>)
1a00091c:	4293      	cmp	r3, r2
1a00091e:	d3f4      	bcc.n	1a00090a <Reset_Handler+0x2a>
1a000920:	e006      	b.n	1a000930 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a000922:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000924:	6859      	ldr	r1, [r3, #4]
1a000926:	f854 0b08 	ldr.w	r0, [r4], #8
1a00092a:	f7ff fc3d 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a00092e:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000930:	4a0c      	ldr	r2, [pc, #48]	; (1a000964 <Reset_Handler+0x84>)
1a000932:	4293      	cmp	r3, r2
1a000934:	d3f5      	bcc.n	1a000922 <Reset_Handler+0x42>
    SystemInit();
1a000936:	f004 f8b9 	bl	1a004aac <SystemInit>
    __libc_init_array();
1a00093a:	f004 fdab 	bl	1a005494 <__libc_init_array>
    initialise_monitor_handles();
1a00093e:	f7ff ffce 	bl	1a0008de <initialise_monitor_handles>
    main();
1a000942:	f7ff fe0d 	bl	1a000560 <main>
        __asm__ volatile("wfi");
1a000946:	bf30      	wfi
1a000948:	e7fd      	b.n	1a000946 <Reset_Handler+0x66>
1a00094a:	bf00      	nop
1a00094c:	40053100 	.word	0x40053100
1a000950:	10df1000 	.word	0x10df1000
1a000954:	01dff7ff 	.word	0x01dff7ff
1a000958:	e000e280 	.word	0xe000e280
1a00095c:	1a000114 	.word	0x1a000114
1a000960:	1a000150 	.word	0x1a000150
1a000964:	1a000178 	.word	0x1a000178

1a000968 <_fini>:
void _fini(void) {}
1a000968:	4770      	bx	lr

1a00096a <_init>:
void _init(void) {}
1a00096a:	4770      	bx	lr

1a00096c <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a00096c:	2309      	movs	r3, #9
1a00096e:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000974:	4770      	bx	lr

1a000976 <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a000976:	2358      	movs	r3, #88	; 0x58
1a000978:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00097a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00097e:	4770      	bx	lr

1a000980 <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000980:	2902      	cmp	r1, #2
1a000982:	d801      	bhi.n	1a000988 <_isatty_r+0x8>
   case 0:
   case 1:
   case 2:
       return 1;
1a000984:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a000986:	4770      	bx	lr
       SET_ERR(EBADF);
1a000988:	2309      	movs	r3, #9
1a00098a:	6003      	str	r3, [r0, #0]
       return -1;
1a00098c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000990:	4770      	bx	lr

1a000992 <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a000992:	2358      	movs	r3, #88	; 0x58
1a000994:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000996:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00099a:	4770      	bx	lr

1a00099c <_read_r>:
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a00099c:	2902      	cmp	r1, #2
1a00099e:	d81f      	bhi.n	1a0009e0 <_read_r+0x44>
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a0009a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0009a4:	461d      	mov	r5, r3
1a0009a6:	4617      	mov	r7, r2
1a0009a8:	4606      	mov	r6, r0
  size_t i = 0;
1a0009aa:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a0009ac:	42ac      	cmp	r4, r5
1a0009ae:	d211      	bcs.n	1a0009d4 <_read_r+0x38>
         int c = __stdio_getchar();
1a0009b0:	f003 f96f 	bl	1a003c92 <__stdio_getchar>
         if( c != -1 ){
1a0009b4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0009b8:	d0f8      	beq.n	1a0009ac <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a0009ba:	f104 0801 	add.w	r8, r4, #1
1a0009be:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a0009c0:	280d      	cmp	r0, #13
1a0009c2:	d003      	beq.n	1a0009cc <_read_r+0x30>
1a0009c4:	280a      	cmp	r0, #10
1a0009c6:	d001      	beq.n	1a0009cc <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a0009c8:	4644      	mov	r4, r8
1a0009ca:	e7ef      	b.n	1a0009ac <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a0009cc:	f003 f961 	bl	1a003c92 <__stdio_getchar>
               return i;
1a0009d0:	4640      	mov	r0, r8
1a0009d2:	e003      	b.n	1a0009dc <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a0009d4:	2313      	movs	r3, #19
1a0009d6:	6033      	str	r3, [r6, #0]
      return -1;
1a0009d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a0009dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a0009e0:	2313      	movs	r3, #19
1a0009e2:	6003      	str	r3, [r0, #0]
      return -1;
1a0009e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0009e8:	4770      	bx	lr

1a0009ea <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a0009ea:	2902      	cmp	r1, #2
1a0009ec:	d80c      	bhi.n	1a000a08 <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a0009ee:	b570      	push	{r4, r5, r6, lr}
1a0009f0:	461d      	mov	r5, r3
1a0009f2:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a0009f4:	2400      	movs	r4, #0
1a0009f6:	e003      	b.n	1a000a00 <_write_r+0x16>
           __stdio_putchar(((char*) b)[i]);
1a0009f8:	5d30      	ldrb	r0, [r6, r4]
1a0009fa:	f003 f945 	bl	1a003c88 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a0009fe:	3401      	adds	r4, #1
1a000a00:	42ac      	cmp	r4, r5
1a000a02:	d3f9      	bcc.n	1a0009f8 <_write_r+0xe>
       return n;
1a000a04:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a000a06:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a000a08:	2313      	movs	r3, #19
1a000a0a:	6003      	str	r3, [r0, #0]
       return -1;
1a000a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000a10:	4770      	bx	lr
1a000a12:	Address 0x000000001a000a12 is out of bounds.


1a000a14 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a000a14:	4b05      	ldr	r3, [pc, #20]	; (1a000a2c <_sbrk_r+0x18>)
1a000a16:	681b      	ldr	r3, [r3, #0]
1a000a18:	b123      	cbz	r3, 1a000a24 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a000a1a:	4b04      	ldr	r3, [pc, #16]	; (1a000a2c <_sbrk_r+0x18>)
1a000a1c:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a000a1e:	4401      	add	r1, r0
1a000a20:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a000a22:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a000a24:	4b01      	ldr	r3, [pc, #4]	; (1a000a2c <_sbrk_r+0x18>)
1a000a26:	4a02      	ldr	r2, [pc, #8]	; (1a000a30 <_sbrk_r+0x1c>)
1a000a28:	601a      	str	r2, [r3, #0]
1a000a2a:	e7f6      	b.n	1a000a1a <_sbrk_r+0x6>
1a000a2c:	10000584 	.word	0x10000584
1a000a30:	10000ad4 	.word	0x10000ad4

1a000a34 <ld_word>:

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
1a000a34:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
1a000a36:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
1a000a38:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
1a000a3c:	4770      	bx	lr

1a000a3e <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
1a000a3e:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
1a000a40:	7883      	ldrb	r3, [r0, #2]
1a000a42:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
1a000a46:	7843      	ldrb	r3, [r0, #1]
1a000a48:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
1a000a4c:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
1a000a4e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
1a000a52:	4770      	bx	lr

1a000a54 <ld_qword>:

#if FF_FS_EXFAT
static QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
1a000a54:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
	QWORD rv;

	rv = ptr[7];
1a000a58:	79c2      	ldrb	r2, [r0, #7]
	rv = rv << 8 | ptr[6];
1a000a5a:	2500      	movs	r5, #0
1a000a5c:	0214      	lsls	r4, r2, #8
1a000a5e:	7982      	ldrb	r2, [r0, #6]
1a000a60:	2300      	movs	r3, #0
1a000a62:	ea44 0b02 	orr.w	fp, r4, r2
1a000a66:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[5];
1a000a6a:	ea4f 230c 	mov.w	r3, ip, lsl #8
1a000a6e:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
1a000a72:	ea4f 220b 	mov.w	r2, fp, lsl #8
1a000a76:	7944      	ldrb	r4, [r0, #5]
1a000a78:	2500      	movs	r5, #0
1a000a7a:	ea44 0b02 	orr.w	fp, r4, r2
1a000a7e:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[4];
1a000a82:	ea4f 230c 	mov.w	r3, ip, lsl #8
1a000a86:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
1a000a8a:	ea4f 220b 	mov.w	r2, fp, lsl #8
1a000a8e:	7904      	ldrb	r4, [r0, #4]
1a000a90:	2500      	movs	r5, #0
1a000a92:	ea44 0b02 	orr.w	fp, r4, r2
1a000a96:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[3];
1a000a9a:	ea4f 230c 	mov.w	r3, ip, lsl #8
1a000a9e:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
1a000aa2:	ea4f 220b 	mov.w	r2, fp, lsl #8
1a000aa6:	78c4      	ldrb	r4, [r0, #3]
1a000aa8:	2500      	movs	r5, #0
1a000aaa:	ea44 0b02 	orr.w	fp, r4, r2
1a000aae:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[2];
1a000ab2:	ea4f 230c 	mov.w	r3, ip, lsl #8
1a000ab6:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
1a000aba:	ea4f 220b 	mov.w	r2, fp, lsl #8
1a000abe:	7884      	ldrb	r4, [r0, #2]
1a000ac0:	2500      	movs	r5, #0
1a000ac2:	ea44 0602 	orr.w	r6, r4, r2
1a000ac6:	ea45 0703 	orr.w	r7, r5, r3
	rv = rv << 8 | ptr[1];
1a000aca:	ea4f 2c07 	mov.w	ip, r7, lsl #8
1a000ace:	ea4c 6c16 	orr.w	ip, ip, r6, lsr #24
1a000ad2:	ea4f 2b06 	mov.w	fp, r6, lsl #8
1a000ad6:	7844      	ldrb	r4, [r0, #1]
1a000ad8:	2500      	movs	r5, #0
1a000ada:	ea4b 0204 	orr.w	r2, fp, r4
1a000ade:	ea4c 0305 	orr.w	r3, ip, r5
	rv = rv << 8 | ptr[0];
1a000ae2:	021d      	lsls	r5, r3, #8
1a000ae4:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
1a000ae8:	0214      	lsls	r4, r2, #8
1a000aea:	7802      	ldrb	r2, [r0, #0]
1a000aec:	2300      	movs	r3, #0
	return rv;
}
1a000aee:	ea42 0004 	orr.w	r0, r2, r4
1a000af2:	ea43 0105 	orr.w	r1, r3, r5
1a000af6:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
1a000afa:	4770      	bx	lr

1a000afc <st_word>:
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
1a000afc:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
1a000afe:	0a09      	lsrs	r1, r1, #8
1a000b00:	7041      	strb	r1, [r0, #1]
}
1a000b02:	4770      	bx	lr

1a000b04 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
1a000b04:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
1a000b06:	f3c1 2307 	ubfx	r3, r1, #8, #8
1a000b0a:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
1a000b0c:	f3c1 4307 	ubfx	r3, r1, #16, #8
1a000b10:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
1a000b12:	0e09      	lsrs	r1, r1, #24
1a000b14:	70c1      	strb	r1, [r0, #3]
}
1a000b16:	4770      	bx	lr

1a000b18 <st_qword>:

#if FF_FS_EXFAT
static void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
1a000b18:	7002      	strb	r2, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
1a000b1a:	f3c2 2107 	ubfx	r1, r2, #8, #8
1a000b1e:	7041      	strb	r1, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
1a000b20:	f3c2 4107 	ubfx	r1, r2, #16, #8
1a000b24:	7081      	strb	r1, [r0, #2]
	*ptr++ = (BYTE)val; val >>= 8;
1a000b26:	0e12      	lsrs	r2, r2, #24
1a000b28:	70c2      	strb	r2, [r0, #3]
	*ptr++ = (BYTE)val; val >>= 8;
1a000b2a:	7103      	strb	r3, [r0, #4]
	*ptr++ = (BYTE)val; val >>= 8;
1a000b2c:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a000b30:	7142      	strb	r2, [r0, #5]
	*ptr++ = (BYTE)val; val >>= 8;
1a000b32:	f3c3 4207 	ubfx	r2, r3, #16, #8
1a000b36:	7182      	strb	r2, [r0, #6]
	*ptr++ = (BYTE)val;
1a000b38:	0e1b      	lsrs	r3, r3, #24
1a000b3a:	71c3      	strb	r3, [r0, #7]
}
1a000b3c:	4770      	bx	lr

1a000b3e <mem_cpy>:
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt != 0) {
1a000b3e:	4613      	mov	r3, r2
1a000b40:	b12a      	cbz	r2, 1a000b4e <mem_cpy+0x10>
		do {
			*d++ = *s++;
1a000b42:	780a      	ldrb	r2, [r1, #0]
1a000b44:	7002      	strb	r2, [r0, #0]
1a000b46:	3001      	adds	r0, #1
1a000b48:	3101      	adds	r1, #1
		} while (--cnt);
1a000b4a:	3b01      	subs	r3, #1
1a000b4c:	d1f9      	bne.n	1a000b42 <mem_cpy+0x4>
	}
}
1a000b4e:	4770      	bx	lr

1a000b50 <mem_set>:
static void mem_set (void* dst, int val, UINT cnt)
{
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
1a000b50:	7001      	strb	r1, [r0, #0]
1a000b52:	3001      	adds	r0, #1
	} while (--cnt);
1a000b54:	3a01      	subs	r2, #1
1a000b56:	d1fb      	bne.n	1a000b50 <mem_set>
}
1a000b58:	4770      	bx	lr

1a000b5a <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
1a000b5a:	b430      	push	{r4, r5}
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
1a000b5c:	1c45      	adds	r5, r0, #1
1a000b5e:	7803      	ldrb	r3, [r0, #0]
1a000b60:	7808      	ldrb	r0, [r1, #0]
1a000b62:	1a1b      	subs	r3, r3, r0
	} while (--cnt && r == 0);
1a000b64:	3a01      	subs	r2, #1
1a000b66:	d004      	beq.n	1a000b72 <mem_cmp+0x18>
1a000b68:	1c4c      	adds	r4, r1, #1
		r = *d++ - *s++;
1a000b6a:	4628      	mov	r0, r5
1a000b6c:	4621      	mov	r1, r4
	} while (--cnt && r == 0);
1a000b6e:	2b00      	cmp	r3, #0
1a000b70:	d0f4      	beq.n	1a000b5c <mem_cmp+0x2>

	return r;
}
1a000b72:	4618      	mov	r0, r3
1a000b74:	bc30      	pop	{r4, r5}
1a000b76:	4770      	bx	lr

1a000b78 <chk_chr>:


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
	while (*str && *str != chr) str++;
1a000b78:	e000      	b.n	1a000b7c <chk_chr+0x4>
1a000b7a:	3001      	adds	r0, #1
1a000b7c:	7803      	ldrb	r3, [r0, #0]
1a000b7e:	b10b      	cbz	r3, 1a000b84 <chk_chr+0xc>
1a000b80:	428b      	cmp	r3, r1
1a000b82:	d1fa      	bne.n	1a000b7a <chk_chr+0x2>
	return *str;
}
1a000b84:	4618      	mov	r0, r3
1a000b86:	4770      	bx	lr

1a000b88 <dbc_1st>:
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
}
1a000b88:	2000      	movs	r0, #0
1a000b8a:	4770      	bx	lr

1a000b8c <tchar2uni>:
static DWORD tchar2uni (	/* Returns character in UTF-16 encoding (>=0x10000 on double encoding unit, 0xFFFFFFFF on decode error) */
	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
)
{
	DWORD uc;
	const TCHAR *p = *str;
1a000b8c:	6802      	ldr	r2, [r0, #0]

#elif FF_LFN_UNICODE == 2	/* UTF-8 input */
	BYTE b;
	int nf;

	uc = (BYTE)*p++;	/* Get a unit */
1a000b8e:	1c53      	adds	r3, r2, #1
1a000b90:	7811      	ldrb	r1, [r2, #0]
1a000b92:	460a      	mov	r2, r1
	if (uc & 0x80) {	/* Multiple byte code? */
1a000b94:	f011 0f80 	tst.w	r1, #128	; 0x80
1a000b98:	d101      	bne.n	1a000b9e <tchar2uni+0x12>
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
	}
	uc = wc;

#endif
	*str = p;	/* Next read pointer */
1a000b9a:	6003      	str	r3, [r0, #0]
1a000b9c:	e046      	b.n	1a000c2c <tchar2uni+0xa0>
		if ((uc & 0xE0) == 0xC0) {	/* 2-byte sequence? */
1a000b9e:	f001 02e0 	and.w	r2, r1, #224	; 0xe0
1a000ba2:	2ac0      	cmp	r2, #192	; 0xc0
1a000ba4:	d00b      	beq.n	1a000bbe <tchar2uni+0x32>
			if ((uc & 0xF0) == 0xE0) {	/* 3-byte sequence? */
1a000ba6:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
1a000baa:	2ae0      	cmp	r2, #224	; 0xe0
1a000bac:	d036      	beq.n	1a000c1c <tchar2uni+0x90>
				if ((uc & 0xF8) == 0xF0) {	/* 4-byte sequence? */
1a000bae:	f001 02f8 	and.w	r2, r1, #248	; 0xf8
1a000bb2:	2af0      	cmp	r2, #240	; 0xf0
1a000bb4:	d138      	bne.n	1a000c28 <tchar2uni+0x9c>
					uc &= 0x07; nf = 3;
1a000bb6:	f001 0207 	and.w	r2, r1, #7
1a000bba:	2103      	movs	r1, #3
1a000bbc:	e002      	b.n	1a000bc4 <tchar2uni+0x38>
			uc &= 0x1F; nf = 1;
1a000bbe:	f001 021f 	and.w	r2, r1, #31
1a000bc2:	2101      	movs	r1, #1
{
1a000bc4:	b430      	push	{r4, r5}
			b = (BYTE)*p++;
1a000bc6:	1c5d      	adds	r5, r3, #1
1a000bc8:	781b      	ldrb	r3, [r3, #0]
			if ((b & 0xC0) != 0x80) return 0xFFFFFFFF;	/* Wrong sequence? */
1a000bca:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
1a000bce:	2c80      	cmp	r4, #128	; 0x80
1a000bd0:	d12e      	bne.n	1a000c30 <tchar2uni+0xa4>
			uc = uc << 6 | (b & 0x3F);
1a000bd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
1a000bd6:	ea43 1282 	orr.w	r2, r3, r2, lsl #6
			b = (BYTE)*p++;
1a000bda:	462b      	mov	r3, r5
		} while (--nf != 0);
1a000bdc:	3901      	subs	r1, #1
1a000bde:	d1f2      	bne.n	1a000bc6 <tchar2uni+0x3a>
		if (uc < 0x80 || IsSurrogate(uc) || uc >= 0x110000) return 0xFFFFFFFF;	/* Wrong code? */
1a000be0:	2a7f      	cmp	r2, #127	; 0x7f
1a000be2:	d928      	bls.n	1a000c36 <tchar2uni+0xaa>
1a000be4:	f5a2 4358 	sub.w	r3, r2, #55296	; 0xd800
1a000be8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
1a000bec:	d326      	bcc.n	1a000c3c <tchar2uni+0xb0>
1a000bee:	f5b2 1f88 	cmp.w	r2, #1114112	; 0x110000
1a000bf2:	d226      	bcs.n	1a000c42 <tchar2uni+0xb6>
		if (uc >= 0x010000) uc = 0xD800DC00 | ((uc - 0x10000) << 6 & 0x3FF0000) | (uc & 0x3FF);	/* Make a surrogate pair if needed */
1a000bf4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
1a000bf8:	d314      	bcc.n	1a000c24 <tchar2uni+0x98>
1a000bfa:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
1a000bfe:	4b12      	ldr	r3, [pc, #72]	; (1a000c48 <tchar2uni+0xbc>)
1a000c00:	ea03 1381 	and.w	r3, r3, r1, lsl #6
1a000c04:	f3c2 0209 	ubfx	r2, r2, #0, #10
1a000c08:	431a      	orrs	r2, r3
1a000c0a:	f042 4258 	orr.w	r2, r2, #3623878656	; 0xd8000000
1a000c0e:	f442 425c 	orr.w	r2, r2, #56320	; 0xdc00
			b = (BYTE)*p++;
1a000c12:	462b      	mov	r3, r5
	*str = p;	/* Next read pointer */
1a000c14:	6003      	str	r3, [r0, #0]
	return uc;
}
1a000c16:	4610      	mov	r0, r2
1a000c18:	bc30      	pop	{r4, r5}
1a000c1a:	4770      	bx	lr
				uc &= 0x0F; nf = 2;
1a000c1c:	f001 020f 	and.w	r2, r1, #15
1a000c20:	2102      	movs	r1, #2
1a000c22:	e7cf      	b.n	1a000bc4 <tchar2uni+0x38>
			b = (BYTE)*p++;
1a000c24:	462b      	mov	r3, r5
1a000c26:	e7f5      	b.n	1a000c14 <tchar2uni+0x88>
					return 0xFFFFFFFF;
1a000c28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
}
1a000c2c:	4610      	mov	r0, r2
1a000c2e:	4770      	bx	lr
			if ((b & 0xC0) != 0x80) return 0xFFFFFFFF;	/* Wrong sequence? */
1a000c30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000c34:	e7ef      	b.n	1a000c16 <tchar2uni+0x8a>
		if (uc < 0x80 || IsSurrogate(uc) || uc >= 0x110000) return 0xFFFFFFFF;	/* Wrong code? */
1a000c36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000c3a:	e7ec      	b.n	1a000c16 <tchar2uni+0x8a>
1a000c3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000c40:	e7e9      	b.n	1a000c16 <tchar2uni+0x8a>
1a000c42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000c46:	e7e6      	b.n	1a000c16 <tchar2uni+0x8a>
1a000c48:	03ff0000 	.word	0x03ff0000

1a000c4c <clst2sect>:
static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
1a000c4c:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
1a000c4e:	69c3      	ldr	r3, [r0, #28]
1a000c50:	3b02      	subs	r3, #2
1a000c52:	428b      	cmp	r3, r1
1a000c54:	d904      	bls.n	1a000c60 <clst2sect+0x14>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
1a000c56:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a000c58:	8940      	ldrh	r0, [r0, #10]
1a000c5a:	fb01 3000 	mla	r0, r1, r0, r3
1a000c5e:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
1a000c60:	2000      	movs	r0, #0
}
1a000c62:	4770      	bx	lr

1a000c64 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
1a000c64:	b570      	push	{r4, r5, r6, lr}
1a000c66:	4606      	mov	r6, r0
1a000c68:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
1a000c6a:	f101 001a 	add.w	r0, r1, #26
1a000c6e:	f7ff fee1 	bl	1a000a34 <ld_word>
	if (fs->fs_type == FS_FAT32) {
1a000c72:	7833      	ldrb	r3, [r6, #0]
1a000c74:	2b03      	cmp	r3, #3
1a000c76:	d000      	beq.n	1a000c7a <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
1a000c78:	bd70      	pop	{r4, r5, r6, pc}
1a000c7a:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
1a000c7c:	f105 0014 	add.w	r0, r5, #20
1a000c80:	f7ff fed8 	bl	1a000a34 <ld_word>
1a000c84:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
1a000c88:	e7f6      	b.n	1a000c78 <ld_clust+0x14>

1a000c8a <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
1a000c8a:	b570      	push	{r4, r5, r6, lr}
1a000c8c:	4606      	mov	r6, r0
1a000c8e:	460c      	mov	r4, r1
1a000c90:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
1a000c92:	b291      	uxth	r1, r2
1a000c94:	f104 001a 	add.w	r0, r4, #26
1a000c98:	f7ff ff30 	bl	1a000afc <st_word>
	if (fs->fs_type == FS_FAT32) {
1a000c9c:	7833      	ldrb	r3, [r6, #0]
1a000c9e:	2b03      	cmp	r3, #3
1a000ca0:	d000      	beq.n	1a000ca4 <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
1a000ca2:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
1a000ca4:	0c29      	lsrs	r1, r5, #16
1a000ca6:	f104 0014 	add.w	r0, r4, #20
1a000caa:	f7ff ff27 	bl	1a000afc <st_word>
}
1a000cae:	e7f8      	b.n	1a000ca2 <st_clust+0x18>

1a000cb0 <pick_lfn>:

static int pick_lfn (	/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
1a000cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000cb4:	4607      	mov	r7, r0
1a000cb6:	460e      	mov	r6, r1
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
1a000cb8:	f101 001a 	add.w	r0, r1, #26
1a000cbc:	f7ff feba 	bl	1a000a34 <ld_word>
1a000cc0:	bb60      	cbnz	r0, 1a000d1c <pick_lfn+0x6c>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
1a000cc2:	7835      	ldrb	r5, [r6, #0]
1a000cc4:	f025 0540 	bic.w	r5, r5, #64	; 0x40
1a000cc8:	3d01      	subs	r5, #1
1a000cca:	eb05 0345 	add.w	r3, r5, r5, lsl #1
1a000cce:	eb05 0583 	add.w	r5, r5, r3, lsl #2

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1a000cd2:	f04f 0801 	mov.w	r8, #1
1a000cd6:	2400      	movs	r4, #0
1a000cd8:	e004      	b.n	1a000ce4 <pick_lfn+0x34>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc != 0) {
			if (i >= FF_MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
1a000cda:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a000cde:	4298      	cmp	r0, r3
1a000ce0:	d121      	bne.n	1a000d26 <pick_lfn+0x76>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1a000ce2:	3401      	adds	r4, #1
1a000ce4:	2c0c      	cmp	r4, #12
1a000ce6:	d80e      	bhi.n	1a000d06 <pick_lfn+0x56>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
1a000ce8:	4b12      	ldr	r3, [pc, #72]	; (1a000d34 <pick_lfn+0x84>)
1a000cea:	5d18      	ldrb	r0, [r3, r4]
1a000cec:	4430      	add	r0, r6
1a000cee:	f7ff fea1 	bl	1a000a34 <ld_word>
		if (wc != 0) {
1a000cf2:	f1b8 0f00 	cmp.w	r8, #0
1a000cf6:	d0f0      	beq.n	1a000cda <pick_lfn+0x2a>
			if (i >= FF_MAX_LFN) return 0;	/* Buffer overflow? */
1a000cf8:	2dfe      	cmp	r5, #254	; 0xfe
1a000cfa:	d812      	bhi.n	1a000d22 <pick_lfn+0x72>
			lfnbuf[i++] = wc = uc;			/* Store it */
1a000cfc:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
1a000d00:	4680      	mov	r8, r0
1a000d02:	3501      	adds	r5, #1
1a000d04:	e7ed      	b.n	1a000ce2 <pick_lfn+0x32>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
1a000d06:	7833      	ldrb	r3, [r6, #0]
1a000d08:	f013 0f40 	tst.w	r3, #64	; 0x40
1a000d0c:	d00d      	beq.n	1a000d2a <pick_lfn+0x7a>
		if (i >= FF_MAX_LFN) return 0;		/* Buffer overflow? */
1a000d0e:	2dfe      	cmp	r5, #254	; 0xfe
1a000d10:	d80d      	bhi.n	1a000d2e <pick_lfn+0x7e>
		lfnbuf[i] = 0;
1a000d12:	2300      	movs	r3, #0
1a000d14:	f827 3015 	strh.w	r3, [r7, r5, lsl #1]
	}

	return 1;		/* The part of LFN is valid */
1a000d18:	2001      	movs	r0, #1
1a000d1a:	e000      	b.n	1a000d1e <pick_lfn+0x6e>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
1a000d1c:	2000      	movs	r0, #0
}
1a000d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (i >= FF_MAX_LFN) return 0;	/* Buffer overflow? */
1a000d22:	2000      	movs	r0, #0
1a000d24:	e7fb      	b.n	1a000d1e <pick_lfn+0x6e>
			if (uc != 0xFFFF) return 0;		/* Check filler */
1a000d26:	2000      	movs	r0, #0
1a000d28:	e7f9      	b.n	1a000d1e <pick_lfn+0x6e>
	return 1;		/* The part of LFN is valid */
1a000d2a:	2001      	movs	r0, #1
1a000d2c:	e7f7      	b.n	1a000d1e <pick_lfn+0x6e>
		if (i >= FF_MAX_LFN) return 0;		/* Buffer overflow? */
1a000d2e:	2000      	movs	r0, #0
1a000d30:	e7f5      	b.n	1a000d1e <pick_lfn+0x6e>
1a000d32:	bf00      	nop
1a000d34:	1a006494 	.word	0x1a006494

1a000d38 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
1a000d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a000d3c:	4680      	mov	r8, r0
1a000d3e:	460f      	mov	r7, r1
1a000d40:	4691      	mov	r9, r2
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
1a000d42:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
1a000d44:	230f      	movs	r3, #15
1a000d46:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
1a000d48:	2400      	movs	r4, #0
1a000d4a:	730c      	strb	r4, [r1, #12]
	st_word(dir + LDIR_FstClusLO, 0);
1a000d4c:	4621      	mov	r1, r4
1a000d4e:	f107 001a 	add.w	r0, r7, #26
1a000d52:	f7ff fed3 	bl	1a000afc <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
1a000d56:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
1a000d5a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
1a000d5e:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	s = wc = 0;
1a000d62:	4625      	mov	r5, r4
1a000d64:	e002      	b.n	1a000d6c <put_lfn+0x34>
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
	} while (++s < 13);
1a000d66:	3401      	adds	r4, #1
1a000d68:	2c0c      	cmp	r4, #12
1a000d6a:	d811      	bhi.n	1a000d90 <put_lfn+0x58>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
1a000d6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a000d70:	429d      	cmp	r5, r3
1a000d72:	d002      	beq.n	1a000d7a <put_lfn+0x42>
1a000d74:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
1a000d78:	3601      	adds	r6, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
1a000d7a:	4b0c      	ldr	r3, [pc, #48]	; (1a000dac <put_lfn+0x74>)
1a000d7c:	5d18      	ldrb	r0, [r3, r4]
1a000d7e:	4629      	mov	r1, r5
1a000d80:	4438      	add	r0, r7
1a000d82:	f7ff febb 	bl	1a000afc <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
1a000d86:	2d00      	cmp	r5, #0
1a000d88:	d1ed      	bne.n	1a000d66 <put_lfn+0x2e>
1a000d8a:	f64f 75ff 	movw	r5, #65535	; 0xffff
1a000d8e:	e7ea      	b.n	1a000d66 <put_lfn+0x2e>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
1a000d90:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a000d94:	429d      	cmp	r5, r3
1a000d96:	d002      	beq.n	1a000d9e <put_lfn+0x66>
1a000d98:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
1a000d9c:	b90b      	cbnz	r3, 1a000da2 <put_lfn+0x6a>
1a000d9e:	f049 0940 	orr.w	r9, r9, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
1a000da2:	f887 9000 	strb.w	r9, [r7]
}
1a000da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a000daa:	bf00      	nop
1a000dac:	1a006494 	.word	0x1a006494

1a000db0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
1a000db0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000db2:	b083      	sub	sp, #12
1a000db4:	4607      	mov	r7, r0
1a000db6:	4615      	mov	r5, r2
1a000db8:	461c      	mov	r4, r3
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
1a000dba:	220b      	movs	r2, #11
1a000dbc:	f7ff febf 	bl	1a000b3e <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
1a000dc0:	2c05      	cmp	r4, #5
1a000dc2:	d811      	bhi.n	1a000de8 <gen_numname+0x38>
		sr = seq;
		while (*lfn) {	/* Create a CRC as hash value */
			wc = *lfn++;
			for (i = 0; i < 16; i++) {
1a000dc4:	2607      	movs	r6, #7
1a000dc6:	e01d      	b.n	1a000e04 <gen_numname+0x54>
1a000dc8:	3201      	adds	r2, #1
1a000dca:	2a0f      	cmp	r2, #15
1a000dcc:	d80c      	bhi.n	1a000de8 <gen_numname+0x38>
				sr = (sr << 1) + (wc & 1);
1a000dce:	f003 0101 	and.w	r1, r3, #1
1a000dd2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
				wc >>= 1;
1a000dd6:	085b      	lsrs	r3, r3, #1
				if (sr & 0x10000) sr ^= 0x11021;
1a000dd8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
1a000ddc:	d0f4      	beq.n	1a000dc8 <gen_numname+0x18>
1a000dde:	f484 3488 	eor.w	r4, r4, #69632	; 0x11000
1a000de2:	f084 0421 	eor.w	r4, r4, #33	; 0x21
1a000de6:	e7ef      	b.n	1a000dc8 <gen_numname+0x18>
		while (*lfn) {	/* Create a CRC as hash value */
1a000de8:	882b      	ldrh	r3, [r5, #0]
1a000dea:	2b00      	cmp	r3, #0
1a000dec:	d0ea      	beq.n	1a000dc4 <gen_numname+0x14>
			wc = *lfn++;
1a000dee:	3502      	adds	r5, #2
			for (i = 0; i < 16; i++) {
1a000df0:	2200      	movs	r2, #0
1a000df2:	e7ea      	b.n	1a000dca <gen_numname+0x1a>
	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (BYTE)((seq % 16) + '0');
		if (c > '9') c += 7;
		ns[i--] = c;
1a000df4:	1e75      	subs	r5, r6, #1
1a000df6:	aa02      	add	r2, sp, #8
1a000df8:	4432      	add	r2, r6
1a000dfa:	f802 3c08 	strb.w	r3, [r2, #-8]
		seq /= 16;
	} while (seq);
1a000dfe:	0924      	lsrs	r4, r4, #4
1a000e00:	d009      	beq.n	1a000e16 <gen_numname+0x66>
		ns[i--] = c;
1a000e02:	462e      	mov	r6, r5
		c = (BYTE)((seq % 16) + '0');
1a000e04:	f004 020f 	and.w	r2, r4, #15
1a000e08:	f102 0330 	add.w	r3, r2, #48	; 0x30
		if (c > '9') c += 7;
1a000e0c:	2b39      	cmp	r3, #57	; 0x39
1a000e0e:	d9f1      	bls.n	1a000df4 <gen_numname+0x44>
1a000e10:	f102 0337 	add.w	r3, r2, #55	; 0x37
1a000e14:	e7ee      	b.n	1a000df4 <gen_numname+0x44>
	ns[i] = '~';
1a000e16:	227e      	movs	r2, #126	; 0x7e
1a000e18:	ab02      	add	r3, sp, #8
1a000e1a:	442b      	add	r3, r5
1a000e1c:	f803 2c08 	strb.w	r2, [r3, #-8]

	/* Append the number to the SFN body */
	for (j = 0; j < i && dst[j] != ' '; j++) {
1a000e20:	e000      	b.n	1a000e24 <gen_numname+0x74>
1a000e22:	3401      	adds	r4, #1
1a000e24:	42ac      	cmp	r4, r5
1a000e26:	d211      	bcs.n	1a000e4c <gen_numname+0x9c>
1a000e28:	5d38      	ldrb	r0, [r7, r4]
1a000e2a:	2820      	cmp	r0, #32
1a000e2c:	d00e      	beq.n	1a000e4c <gen_numname+0x9c>
		if (dbc_1st(dst[j])) {
1a000e2e:	f7ff feab 	bl	1a000b88 <dbc_1st>
1a000e32:	2800      	cmp	r0, #0
1a000e34:	d0f5      	beq.n	1a000e22 <gen_numname+0x72>
			if (j == i - 1) break;
1a000e36:	1eb3      	subs	r3, r6, #2
1a000e38:	42a3      	cmp	r3, r4
1a000e3a:	d007      	beq.n	1a000e4c <gen_numname+0x9c>
			j++;
1a000e3c:	3401      	adds	r4, #1
1a000e3e:	e7f0      	b.n	1a000e22 <gen_numname+0x72>
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
1a000e40:	2220      	movs	r2, #32
1a000e42:	1c63      	adds	r3, r4, #1
1a000e44:	553a      	strb	r2, [r7, r4]
	} while (j < 8);
1a000e46:	2b07      	cmp	r3, #7
1a000e48:	d808      	bhi.n	1a000e5c <gen_numname+0xac>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
1a000e4a:	461c      	mov	r4, r3
1a000e4c:	2d07      	cmp	r5, #7
1a000e4e:	d8f7      	bhi.n	1a000e40 <gen_numname+0x90>
1a000e50:	ab02      	add	r3, sp, #8
1a000e52:	442b      	add	r3, r5
1a000e54:	f813 2c08 	ldrb.w	r2, [r3, #-8]
1a000e58:	3501      	adds	r5, #1
1a000e5a:	e7f2      	b.n	1a000e42 <gen_numname+0x92>
}
1a000e5c:	b003      	add	sp, #12
1a000e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a000e60 <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
1a000e60:	4601      	mov	r1, r0
	BYTE sum = 0;
	UINT n = 11;
1a000e62:	220b      	movs	r2, #11
	BYTE sum = 0;
1a000e64:	2000      	movs	r0, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
1a000e66:	01c3      	lsls	r3, r0, #7
1a000e68:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
1a000e6c:	7808      	ldrb	r0, [r1, #0]
1a000e6e:	fa50 f383 	uxtab	r3, r0, r3
1a000e72:	b2d8      	uxtb	r0, r3
1a000e74:	3101      	adds	r1, #1
	} while (--n);
1a000e76:	3a01      	subs	r2, #1
1a000e78:	d1f5      	bne.n	1a000e66 <sum_sfn+0x6>
	return sum;
}
1a000e7a:	4770      	bx	lr

1a000e7c <xdir_sum>:
/*-----------------------------------------------------------------------*/

static WORD xdir_sum (	/* Get checksum of the directoly entry block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
1a000e7c:	b430      	push	{r4, r5}
1a000e7e:	4605      	mov	r5, r0
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
1a000e80:	7841      	ldrb	r1, [r0, #1]
1a000e82:	3101      	adds	r1, #1
1a000e84:	0149      	lsls	r1, r1, #5
	for (i = sum = 0; i < szblk; i++) {
1a000e86:	2000      	movs	r0, #0
1a000e88:	4603      	mov	r3, r0
1a000e8a:	e001      	b.n	1a000e90 <xdir_sum+0x14>
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
			i++;
1a000e8c:	3301      	adds	r3, #1
	for (i = sum = 0; i < szblk; i++) {
1a000e8e:	3301      	adds	r3, #1
1a000e90:	428b      	cmp	r3, r1
1a000e92:	d209      	bcs.n	1a000ea8 <xdir_sum+0x2c>
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
1a000e94:	2b02      	cmp	r3, #2
1a000e96:	d0f9      	beq.n	1a000e8c <xdir_sum+0x10>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
1a000e98:	0842      	lsrs	r2, r0, #1
1a000e9a:	eb02 32c0 	add.w	r2, r2, r0, lsl #15
1a000e9e:	5cec      	ldrb	r4, [r5, r3]
1a000ea0:	fa14 f282 	uxtah	r2, r4, r2
1a000ea4:	b290      	uxth	r0, r2
1a000ea6:	e7f2      	b.n	1a000e8e <xdir_sum+0x12>
		}
	}
	return sum;
}
1a000ea8:	bc30      	pop	{r4, r5}
1a000eaa:	4770      	bx	lr

1a000eac <init_alloc_info>:

static void init_alloc_info (
	FATFS* fs,		/* Filesystem object */
	FFOBJID* obj	/* Object allocation information to be initialized */
)
{
1a000eac:	b538      	push	{r3, r4, r5, lr}
1a000eae:	4605      	mov	r5, r0
1a000eb0:	460c      	mov	r4, r1
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
1a000eb2:	6900      	ldr	r0, [r0, #16]
1a000eb4:	3034      	adds	r0, #52	; 0x34
1a000eb6:	f7ff fdc2 	bl	1a000a3e <ld_dword>
1a000eba:	60a0      	str	r0, [r4, #8]
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
1a000ebc:	6928      	ldr	r0, [r5, #16]
1a000ebe:	3038      	adds	r0, #56	; 0x38
1a000ec0:	f7ff fdc8 	bl	1a000a54 <ld_qword>
1a000ec4:	e9c4 0104 	strd	r0, r1, [r4, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
1a000ec8:	692b      	ldr	r3, [r5, #16]
1a000eca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
1a000ece:	f003 0302 	and.w	r3, r3, #2
1a000ed2:	71e3      	strb	r3, [r4, #7]
	obj->n_frag = 0;										/* No last fragment info */
1a000ed4:	2300      	movs	r3, #0
1a000ed6:	61e3      	str	r3, [r4, #28]
}
1a000ed8:	bd38      	pop	{r3, r4, r5, pc}
1a000eda:	Address 0x000000001a000eda is out of bounds.


1a000edc <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
1a000edc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
1a000ede:	6807      	ldr	r7, [r0, #0]
	if (!tp) return vol;	/* Invalid path name? */
1a000ee0:	2f00      	cmp	r7, #0
1a000ee2:	d04a      	beq.n	1a000f7a <get_ldnumber+0x9e>
	tt = tp = *path;
1a000ee4:	463a      	mov	r2, r7
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
1a000ee6:	1c54      	adds	r4, r2, #1
1a000ee8:	7813      	ldrb	r3, [r2, #0]
1a000eea:	2b1f      	cmp	r3, #31
1a000eec:	d902      	bls.n	1a000ef4 <get_ldnumber+0x18>
1a000eee:	4622      	mov	r2, r4
1a000ef0:	2b3a      	cmp	r3, #58	; 0x3a
1a000ef2:	d1f8      	bne.n	1a000ee6 <get_ldnumber+0xa>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
1a000ef4:	2b3a      	cmp	r3, #58	; 0x3a
1a000ef6:	d003      	beq.n	1a000f00 <get_ldnumber+0x24>
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
1a000ef8:	f04f 0e00 	mov.w	lr, #0
}
1a000efc:	4670      	mov	r0, lr
1a000efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
1a000f00:	f897 e000 	ldrb.w	lr, [r7]
1a000f04:	f1ae 0330 	sub.w	r3, lr, #48	; 0x30
1a000f08:	b2db      	uxtb	r3, r3
1a000f0a:	2b09      	cmp	r3, #9
1a000f0c:	d808      	bhi.n	1a000f20 <get_ldnumber+0x44>
1a000f0e:	1cbb      	adds	r3, r7, #2
1a000f10:	42a3      	cmp	r3, r4
1a000f12:	d002      	beq.n	1a000f1a <get_ldnumber+0x3e>
1a000f14:	f04f 0e00 	mov.w	lr, #0
1a000f18:	e004      	b.n	1a000f24 <get_ldnumber+0x48>
			i = (int)*tp - '0';	/* Get the LD number */
1a000f1a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
1a000f1e:	e027      	b.n	1a000f70 <get_ldnumber+0x94>
1a000f20:	f04f 0e00 	mov.w	lr, #0
				sp = VolumeStr[i]; tp = *path;	/* This string volume ID and path name */
1a000f24:	4b18      	ldr	r3, [pc, #96]	; (1a000f88 <get_ldnumber+0xac>)
1a000f26:	f853 502e 	ldr.w	r5, [r3, lr, lsl #2]
1a000f2a:	4639      	mov	r1, r7
1a000f2c:	e004      	b.n	1a000f38 <get_ldnumber+0x5c>
				} while (c && (TCHAR)c == tc);
1a000f2e:	b1bb      	cbz	r3, 1a000f60 <get_ldnumber+0x84>
					c = *sp++; tc = *tp++;
1a000f30:	4631      	mov	r1, r6
1a000f32:	4665      	mov	r5, ip
				} while (c && (TCHAR)c == tc);
1a000f34:	429a      	cmp	r2, r3
1a000f36:	d113      	bne.n	1a000f60 <get_ldnumber+0x84>
					c = *sp++; tc = *tp++;
1a000f38:	f105 0c01 	add.w	ip, r5, #1
1a000f3c:	782b      	ldrb	r3, [r5, #0]
1a000f3e:	1c4e      	adds	r6, r1, #1
1a000f40:	780a      	ldrb	r2, [r1, #0]
					if (IsLower(c)) c -= 0x20;
1a000f42:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
1a000f46:	b2c9      	uxtb	r1, r1
1a000f48:	2919      	cmp	r1, #25
1a000f4a:	d801      	bhi.n	1a000f50 <get_ldnumber+0x74>
1a000f4c:	3b20      	subs	r3, #32
1a000f4e:	b2db      	uxtb	r3, r3
					if (IsLower(tc)) tc -= 0x20;
1a000f50:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
1a000f54:	b2c9      	uxtb	r1, r1
1a000f56:	2919      	cmp	r1, #25
1a000f58:	d8e9      	bhi.n	1a000f2e <get_ldnumber+0x52>
1a000f5a:	3a20      	subs	r2, #32
1a000f5c:	b2d2      	uxtb	r2, r2
1a000f5e:	e7e6      	b.n	1a000f2e <get_ldnumber+0x52>
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
1a000f60:	b90b      	cbnz	r3, 1a000f66 <get_ldnumber+0x8a>
1a000f62:	42b4      	cmp	r4, r6
1a000f64:	d004      	beq.n	1a000f70 <get_ldnumber+0x94>
1a000f66:	f10e 0e01 	add.w	lr, lr, #1
1a000f6a:	f1be 0f01 	cmp.w	lr, #1
1a000f6e:	ddd9      	ble.n	1a000f24 <get_ldnumber+0x48>
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
1a000f70:	f1be 0f01 	cmp.w	lr, #1
1a000f74:	dc04      	bgt.n	1a000f80 <get_ldnumber+0xa4>
			*path = tt;		/* Snip the drive prefix off */
1a000f76:	6004      	str	r4, [r0, #0]
1a000f78:	e7c0      	b.n	1a000efc <get_ldnumber+0x20>
	if (!tp) return vol;	/* Invalid path name? */
1a000f7a:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
1a000f7e:	e7bd      	b.n	1a000efc <get_ldnumber+0x20>
	int i, vol = -1;
1a000f80:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
1a000f84:	e7ba      	b.n	1a000efc <get_ldnumber+0x20>
1a000f86:	bf00      	nop
1a000f88:	1a0064a4 	.word	0x1a0064a4

1a000f8c <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
1a000f8c:	b538      	push	{r3, r4, r5, lr}
1a000f8e:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
1a000f90:	b1a8      	cbz	r0, 1a000fbe <validate+0x32>
1a000f92:	4604      	mov	r4, r0
1a000f94:	6803      	ldr	r3, [r0, #0]
1a000f96:	b1ab      	cbz	r3, 1a000fc4 <validate+0x38>
1a000f98:	781a      	ldrb	r2, [r3, #0]
1a000f9a:	b1aa      	cbz	r2, 1a000fc8 <validate+0x3c>
1a000f9c:	8881      	ldrh	r1, [r0, #4]
1a000f9e:	88da      	ldrh	r2, [r3, #6]
1a000fa0:	4291      	cmp	r1, r2
1a000fa2:	d003      	beq.n	1a000fac <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
1a000fa4:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
1a000fa6:	2300      	movs	r3, #0
1a000fa8:	602b      	str	r3, [r5, #0]
	return res;
}
1a000faa:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
1a000fac:	7858      	ldrb	r0, [r3, #1]
1a000fae:	f002 fd41 	bl	1a003a34 <disk_status>
1a000fb2:	f010 0f01 	tst.w	r0, #1
1a000fb6:	d10a      	bne.n	1a000fce <validate+0x42>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
1a000fb8:	6823      	ldr	r3, [r4, #0]
			res = FR_OK;
1a000fba:	2000      	movs	r0, #0
1a000fbc:	e7f4      	b.n	1a000fa8 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
1a000fbe:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
1a000fc0:	2300      	movs	r3, #0
1a000fc2:	e7f1      	b.n	1a000fa8 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
1a000fc4:	2009      	movs	r0, #9
1a000fc6:	e7ef      	b.n	1a000fa8 <validate+0x1c>
1a000fc8:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
1a000fca:	2300      	movs	r3, #0
1a000fcc:	e7ec      	b.n	1a000fa8 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
1a000fce:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
1a000fd0:	2300      	movs	r3, #0
1a000fd2:	e7e9      	b.n	1a000fa8 <validate+0x1c>

1a000fd4 <sync_window>:
{
1a000fd4:	b538      	push	{r3, r4, r5, lr}
	if (fs->wflag) {	/* Is the disk access window dirty */
1a000fd6:	78c3      	ldrb	r3, [r0, #3]
1a000fd8:	b90b      	cbnz	r3, 1a000fde <sync_window+0xa>
	FRESULT res = FR_OK;
1a000fda:	2000      	movs	r0, #0
}
1a000fdc:	bd38      	pop	{r3, r4, r5, pc}
1a000fde:	4604      	mov	r4, r0
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
1a000fe0:	f100 0538 	add.w	r5, r0, #56	; 0x38
1a000fe4:	2301      	movs	r3, #1
1a000fe6:	6b42      	ldr	r2, [r0, #52]	; 0x34
1a000fe8:	4629      	mov	r1, r5
1a000fea:	7840      	ldrb	r0, [r0, #1]
1a000fec:	f002 fd40 	bl	1a003a70 <disk_write>
1a000ff0:	b9a0      	cbnz	r0, 1a00101c <sync_window+0x48>
			fs->wflag = 0;	/* Clear window dirty flag */
1a000ff2:	2300      	movs	r3, #0
1a000ff4:	70e3      	strb	r3, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
1a000ff6:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a000ff8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
1a000ffa:	1acb      	subs	r3, r1, r3
1a000ffc:	6a22      	ldr	r2, [r4, #32]
1a000ffe:	4293      	cmp	r3, r2
1a001000:	d20e      	bcs.n	1a001020 <sync_window+0x4c>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
1a001002:	78a3      	ldrb	r3, [r4, #2]
1a001004:	2b02      	cmp	r3, #2
1a001006:	d001      	beq.n	1a00100c <sync_window+0x38>
	FRESULT res = FR_OK;
1a001008:	2000      	movs	r0, #0
1a00100a:	e7e7      	b.n	1a000fdc <sync_window+0x8>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
1a00100c:	2301      	movs	r3, #1
1a00100e:	440a      	add	r2, r1
1a001010:	4629      	mov	r1, r5
1a001012:	7860      	ldrb	r0, [r4, #1]
1a001014:	f002 fd2c 	bl	1a003a70 <disk_write>
	FRESULT res = FR_OK;
1a001018:	2000      	movs	r0, #0
1a00101a:	e7df      	b.n	1a000fdc <sync_window+0x8>
			res = FR_DISK_ERR;
1a00101c:	2001      	movs	r0, #1
1a00101e:	e7dd      	b.n	1a000fdc <sync_window+0x8>
	FRESULT res = FR_OK;
1a001020:	2000      	movs	r0, #0
1a001022:	e7db      	b.n	1a000fdc <sync_window+0x8>

1a001024 <move_window>:
{
1a001024:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
1a001026:	6b43      	ldr	r3, [r0, #52]	; 0x34
1a001028:	428b      	cmp	r3, r1
1a00102a:	d012      	beq.n	1a001052 <move_window+0x2e>
1a00102c:	4604      	mov	r4, r0
1a00102e:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
1a001030:	f7ff ffd0 	bl	1a000fd4 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
1a001034:	4606      	mov	r6, r0
1a001036:	b968      	cbnz	r0, 1a001054 <move_window+0x30>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
1a001038:	2301      	movs	r3, #1
1a00103a:	462a      	mov	r2, r5
1a00103c:	f104 0138 	add.w	r1, r4, #56	; 0x38
1a001040:	7860      	ldrb	r0, [r4, #1]
1a001042:	f002 fd05 	bl	1a003a50 <disk_read>
1a001046:	b110      	cbz	r0, 1a00104e <move_window+0x2a>
				res = FR_DISK_ERR;
1a001048:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
1a00104a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
			fs->winsect = sector;
1a00104e:	6365      	str	r5, [r4, #52]	; 0x34
1a001050:	e000      	b.n	1a001054 <move_window+0x30>
	FRESULT res = FR_OK;
1a001052:	2600      	movs	r6, #0
}
1a001054:	4630      	mov	r0, r6
1a001056:	bd70      	pop	{r4, r5, r6, pc}

1a001058 <check_fs>:
{
1a001058:	b510      	push	{r4, lr}
1a00105a:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
1a00105c:	2300      	movs	r3, #0
1a00105e:	70c3      	strb	r3, [r0, #3]
1a001060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a001064:	6343      	str	r3, [r0, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
1a001066:	f7ff ffdd 	bl	1a001024 <move_window>
1a00106a:	bb30      	cbnz	r0, 1a0010ba <check_fs+0x62>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
1a00106c:	f204 2036 	addw	r0, r4, #566	; 0x236
1a001070:	f7ff fce0 	bl	1a000a34 <ld_word>
1a001074:	f64a 2355 	movw	r3, #43605	; 0xaa55
1a001078:	4298      	cmp	r0, r3
1a00107a:	d120      	bne.n	1a0010be <check_fs+0x66>
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
1a00107c:	220b      	movs	r2, #11
1a00107e:	4914      	ldr	r1, [pc, #80]	; (1a0010d0 <check_fs+0x78>)
1a001080:	f104 0038 	add.w	r0, r4, #56	; 0x38
1a001084:	f7ff fd69 	bl	1a000b5a <mem_cmp>
1a001088:	b1d8      	cbz	r0, 1a0010c2 <check_fs+0x6a>
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
1a00108a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
1a00108e:	2be9      	cmp	r3, #233	; 0xe9
1a001090:	d003      	beq.n	1a00109a <check_fs+0x42>
1a001092:	2beb      	cmp	r3, #235	; 0xeb
1a001094:	d001      	beq.n	1a00109a <check_fs+0x42>
1a001096:	2be8      	cmp	r3, #232	; 0xe8
1a001098:	d115      	bne.n	1a0010c6 <check_fs+0x6e>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
1a00109a:	2203      	movs	r2, #3
1a00109c:	490d      	ldr	r1, [pc, #52]	; (1a0010d4 <check_fs+0x7c>)
1a00109e:	f104 006e 	add.w	r0, r4, #110	; 0x6e
1a0010a2:	f7ff fd5a 	bl	1a000b5a <mem_cmp>
1a0010a6:	b180      	cbz	r0, 1a0010ca <check_fs+0x72>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
1a0010a8:	2205      	movs	r2, #5
1a0010aa:	490b      	ldr	r1, [pc, #44]	; (1a0010d8 <check_fs+0x80>)
1a0010ac:	f104 008a 	add.w	r0, r4, #138	; 0x8a
1a0010b0:	f7ff fd53 	bl	1a000b5a <mem_cmp>
1a0010b4:	b120      	cbz	r0, 1a0010c0 <check_fs+0x68>
	return 2;	/* Valid BS but not FAT */
1a0010b6:	2002      	movs	r0, #2
1a0010b8:	e002      	b.n	1a0010c0 <check_fs+0x68>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
1a0010ba:	2004      	movs	r0, #4
1a0010bc:	e000      	b.n	1a0010c0 <check_fs+0x68>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
1a0010be:	2003      	movs	r0, #3
}
1a0010c0:	bd10      	pop	{r4, pc}
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
1a0010c2:	2001      	movs	r0, #1
1a0010c4:	e7fc      	b.n	1a0010c0 <check_fs+0x68>
	return 2;	/* Valid BS but not FAT */
1a0010c6:	2002      	movs	r0, #2
1a0010c8:	e7fa      	b.n	1a0010c0 <check_fs+0x68>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
1a0010ca:	2000      	movs	r0, #0
1a0010cc:	e7f8      	b.n	1a0010c0 <check_fs+0x68>
1a0010ce:	bf00      	nop
1a0010d0:	1a0064ac 	.word	0x1a0064ac
1a0010d4:	1a0064b8 	.word	0x1a0064b8
1a0010d8:	1a0064bc 	.word	0x1a0064bc

1a0010dc <find_volume>:
{
1a0010dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0010e0:	b084      	sub	sp, #16
1a0010e2:	460d      	mov	r5, r1
1a0010e4:	4617      	mov	r7, r2
	*rfs = 0;
1a0010e6:	2300      	movs	r3, #0
1a0010e8:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
1a0010ea:	f7ff fef7 	bl	1a000edc <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
1a0010ee:	1e06      	subs	r6, r0, #0
1a0010f0:	f2c0 8205 	blt.w	1a0014fe <find_volume+0x422>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
1a0010f4:	4bbf      	ldr	r3, [pc, #764]	; (1a0013f4 <find_volume+0x318>)
1a0010f6:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
1a0010fa:	2c00      	cmp	r4, #0
1a0010fc:	f000 8203 	beq.w	1a001506 <find_volume+0x42a>
	*rfs = fs;							/* Return pointer to the filesystem object */
1a001100:	602c      	str	r4, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
1a001102:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
1a001106:	7823      	ldrb	r3, [r4, #0]
1a001108:	b173      	cbz	r3, 1a001128 <find_volume+0x4c>
		stat = disk_status(fs->pdrv);
1a00110a:	7860      	ldrb	r0, [r4, #1]
1a00110c:	f002 fc92 	bl	1a003a34 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
1a001110:	f010 0f01 	tst.w	r0, #1
1a001114:	d108      	bne.n	1a001128 <find_volume+0x4c>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
1a001116:	2f00      	cmp	r7, #0
1a001118:	f000 81f7 	beq.w	1a00150a <find_volume+0x42e>
1a00111c:	f010 0f04 	tst.w	r0, #4
1a001120:	f040 81f5 	bne.w	1a00150e <find_volume+0x432>
			return FR_OK;				/* The filesystem object is valid */
1a001124:	2000      	movs	r0, #0
1a001126:	e1eb      	b.n	1a001500 <find_volume+0x424>
	fs->fs_type = 0;					/* Clear the filesystem object */
1a001128:	2300      	movs	r3, #0
1a00112a:	7023      	strb	r3, [r4, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
1a00112c:	4bb2      	ldr	r3, [pc, #712]	; (1a0013f8 <find_volume+0x31c>)
1a00112e:	f813 0016 	ldrb.w	r0, [r3, r6, lsl #1]
1a001132:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
1a001134:	f002 fc85 	bl	1a003a42 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
1a001138:	f010 0f01 	tst.w	r0, #1
1a00113c:	f040 81e9 	bne.w	1a001512 <find_volume+0x436>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
1a001140:	b11f      	cbz	r7, 1a00114a <find_volume+0x6e>
1a001142:	f010 0f04 	tst.w	r0, #4
1a001146:	f040 81e6 	bne.w	1a001516 <find_volume+0x43a>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
1a00114a:	2100      	movs	r1, #0
1a00114c:	4620      	mov	r0, r4
1a00114e:	f7ff ff83 	bl	1a001058 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
1a001152:	2802      	cmp	r0, #2
1a001154:	f000 8095 	beq.w	1a001282 <find_volume+0x1a6>
1a001158:	2801      	cmp	r0, #1
1a00115a:	d975      	bls.n	1a001248 <find_volume+0x16c>
	bsect = 0;
1a00115c:	2700      	movs	r7, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
1a00115e:	2804      	cmp	r0, #4
1a001160:	f000 81db 	beq.w	1a00151a <find_volume+0x43e>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
1a001164:	2801      	cmp	r0, #1
1a001166:	f200 81da 	bhi.w	1a00151e <find_volume+0x442>
	if (fmt == 1) {
1a00116a:	f000 8120 	beq.w	1a0013ae <find_volume+0x2d2>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
1a00116e:	f104 0043 	add.w	r0, r4, #67	; 0x43
1a001172:	f7ff fc5f 	bl	1a000a34 <ld_word>
1a001176:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
1a00117a:	f040 81e6 	bne.w	1a00154a <find_volume+0x46e>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
1a00117e:	f104 004e 	add.w	r0, r4, #78	; 0x4e
1a001182:	f7ff fc57 	bl	1a000a34 <ld_word>
1a001186:	4606      	mov	r6, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
1a001188:	b920      	cbnz	r0, 1a001194 <find_volume+0xb8>
1a00118a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a00118e:	f7ff fc56 	bl	1a000a3e <ld_dword>
1a001192:	4606      	mov	r6, r0
		fs->fsize = fasize;
1a001194:	6226      	str	r6, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
1a001196:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
1a00119a:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
1a00119c:	1e53      	subs	r3, r2, #1
1a00119e:	b2db      	uxtb	r3, r3
1a0011a0:	2b01      	cmp	r3, #1
1a0011a2:	f200 81d4 	bhi.w	1a00154e <find_volume+0x472>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
1a0011a6:	fb06 f502 	mul.w	r5, r6, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
1a0011aa:	f894 8045 	ldrb.w	r8, [r4, #69]	; 0x45
1a0011ae:	f8a4 800a 	strh.w	r8, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
1a0011b2:	f1b8 0f00 	cmp.w	r8, #0
1a0011b6:	f000 81cc 	beq.w	1a001552 <find_volume+0x476>
1a0011ba:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
1a0011be:	ea18 0f03 	tst.w	r8, r3
1a0011c2:	f040 81c8 	bne.w	1a001556 <find_volume+0x47a>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
1a0011c6:	f104 0049 	add.w	r0, r4, #73	; 0x49
1a0011ca:	f7ff fc33 	bl	1a000a34 <ld_word>
1a0011ce:	4682      	mov	sl, r0
1a0011d0:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
1a0011d2:	f010 0f0f 	tst.w	r0, #15
1a0011d6:	f040 81c0 	bne.w	1a00155a <find_volume+0x47e>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
1a0011da:	f104 004b 	add.w	r0, r4, #75	; 0x4b
1a0011de:	f7ff fc29 	bl	1a000a34 <ld_word>
1a0011e2:	4681      	mov	r9, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
1a0011e4:	b920      	cbnz	r0, 1a0011f0 <find_volume+0x114>
1a0011e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a0011ea:	f7ff fc28 	bl	1a000a3e <ld_dword>
1a0011ee:	4681      	mov	r9, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
1a0011f0:	f104 0046 	add.w	r0, r4, #70	; 0x46
1a0011f4:	f7ff fc1e 	bl	1a000a34 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
1a0011f8:	4601      	mov	r1, r0
1a0011fa:	2800      	cmp	r0, #0
1a0011fc:	f000 81af 	beq.w	1a00155e <find_volume+0x482>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
1a001200:	1942      	adds	r2, r0, r5
1a001202:	eb02 121a 	add.w	r2, r2, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
1a001206:	4591      	cmp	r9, r2
1a001208:	f0c0 81ab 	bcc.w	1a001562 <find_volume+0x486>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
1a00120c:	eba9 0302 	sub.w	r3, r9, r2
1a001210:	fbb3 f3f8 	udiv	r3, r3, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
1a001214:	2b00      	cmp	r3, #0
1a001216:	f000 81a6 	beq.w	1a001566 <find_volume+0x48a>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
1a00121a:	4878      	ldr	r0, [pc, #480]	; (1a0013fc <find_volume+0x320>)
1a00121c:	4283      	cmp	r3, r0
1a00121e:	f240 80e5 	bls.w	1a0013ec <find_volume+0x310>
		fmt = 0;
1a001222:	f04f 0900 	mov.w	r9, #0
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
1a001226:	f64f 70f5 	movw	r0, #65525	; 0xfff5
1a00122a:	4283      	cmp	r3, r0
1a00122c:	d801      	bhi.n	1a001232 <find_volume+0x156>
1a00122e:	f04f 0902 	mov.w	r9, #2
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
1a001232:	f640 70f5 	movw	r0, #4085	; 0xff5
1a001236:	4283      	cmp	r3, r0
1a001238:	f240 80e4 	bls.w	1a001404 <find_volume+0x328>
		if (fmt == 0) return FR_NO_FILESYSTEM;
1a00123c:	f1b9 0f00 	cmp.w	r9, #0
1a001240:	f040 80e2 	bne.w	1a001408 <find_volume+0x32c>
1a001244:	200d      	movs	r0, #13
1a001246:	e15b      	b.n	1a001500 <find_volume+0x424>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
1a001248:	4b6b      	ldr	r3, [pc, #428]	; (1a0013f8 <find_volume+0x31c>)
1a00124a:	eb03 0346 	add.w	r3, r3, r6, lsl #1
1a00124e:	785b      	ldrb	r3, [r3, #1]
1a001250:	b9cb      	cbnz	r3, 1a001286 <find_volume+0x1aa>
	bsect = 0;
1a001252:	2700      	movs	r7, #0
1a001254:	e783      	b.n	1a00115e <find_volume+0x82>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
1a001256:	2000      	movs	r0, #0
1a001258:	ab04      	add	r3, sp, #16
1a00125a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
1a00125e:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
1a001262:	3501      	adds	r5, #1
1a001264:	2d03      	cmp	r5, #3
1a001266:	d810      	bhi.n	1a00128a <find_volume+0x1ae>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
1a001268:	f104 0038 	add.w	r0, r4, #56	; 0x38
1a00126c:	012b      	lsls	r3, r5, #4
1a00126e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
1a001272:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
1a001274:	7903      	ldrb	r3, [r0, #4]
1a001276:	2b00      	cmp	r3, #0
1a001278:	d0ed      	beq.n	1a001256 <find_volume+0x17a>
1a00127a:	3008      	adds	r0, #8
1a00127c:	f7ff fbdf 	bl	1a000a3e <ld_dword>
1a001280:	e7ea      	b.n	1a001258 <find_volume+0x17c>
1a001282:	2500      	movs	r5, #0
1a001284:	e7ee      	b.n	1a001264 <find_volume+0x188>
1a001286:	2500      	movs	r5, #0
1a001288:	e7ec      	b.n	1a001264 <find_volume+0x188>
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
1a00128a:	4b5b      	ldr	r3, [pc, #364]	; (1a0013f8 <find_volume+0x31c>)
1a00128c:	eb03 0346 	add.w	r3, r3, r6, lsl #1
1a001290:	785d      	ldrb	r5, [r3, #1]
		if (i != 0) i--;
1a001292:	b19d      	cbz	r5, 1a0012bc <find_volume+0x1e0>
1a001294:	3d01      	subs	r5, #1
1a001296:	e011      	b.n	1a0012bc <find_volume+0x1e0>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
1a001298:	4639      	mov	r1, r7
1a00129a:	4620      	mov	r0, r4
1a00129c:	f7ff fedc 	bl	1a001058 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
1a0012a0:	4b55      	ldr	r3, [pc, #340]	; (1a0013f8 <find_volume+0x31c>)
1a0012a2:	eb03 0346 	add.w	r3, r3, r6, lsl #1
1a0012a6:	785b      	ldrb	r3, [r3, #1]
1a0012a8:	2b00      	cmp	r3, #0
1a0012aa:	f47f af58 	bne.w	1a00115e <find_volume+0x82>
1a0012ae:	2801      	cmp	r0, #1
1a0012b0:	f67f af55 	bls.w	1a00115e <find_volume+0x82>
1a0012b4:	3501      	adds	r5, #1
1a0012b6:	2d03      	cmp	r5, #3
1a0012b8:	f63f af51 	bhi.w	1a00115e <find_volume+0x82>
			bsect = br[i];
1a0012bc:	ab04      	add	r3, sp, #16
1a0012be:	eb03 0385 	add.w	r3, r3, r5, lsl #2
1a0012c2:	f853 7c10 	ldr.w	r7, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
1a0012c6:	2f00      	cmp	r7, #0
1a0012c8:	d1e6      	bne.n	1a001298 <find_volume+0x1bc>
1a0012ca:	2003      	movs	r0, #3
1a0012cc:	e7e8      	b.n	1a0012a0 <find_volume+0x1c4>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
1a0012ce:	3301      	adds	r3, #1
1a0012d0:	2b3f      	cmp	r3, #63	; 0x3f
1a0012d2:	d804      	bhi.n	1a0012de <find_volume+0x202>
1a0012d4:	18e2      	adds	r2, r4, r3
1a0012d6:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
1a0012da:	2a00      	cmp	r2, #0
1a0012dc:	d0f7      	beq.n	1a0012ce <find_volume+0x1f2>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
1a0012de:	2b3f      	cmp	r3, #63	; 0x3f
1a0012e0:	f240 811f 	bls.w	1a001522 <find_volume+0x446>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
1a0012e4:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
1a0012e8:	f7ff fba4 	bl	1a000a34 <ld_word>
1a0012ec:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
1a0012f0:	f040 8119 	bne.w	1a001526 <find_volume+0x44a>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
1a0012f4:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
1a0012f8:	2b09      	cmp	r3, #9
1a0012fa:	f040 8116 	bne.w	1a00152a <find_volume+0x44e>
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
1a0012fe:	f104 0080 	add.w	r0, r4, #128	; 0x80
1a001302:	f7ff fba7 	bl	1a000a54 <ld_qword>
1a001306:	eb10 0807 	adds.w	r8, r0, r7
1a00130a:	f141 0900 	adc.w	r9, r1, #0
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
1a00130e:	f1b9 0f01 	cmp.w	r9, #1
1a001312:	bf08      	it	eq
1a001314:	f1b8 0f00 	cmpeq.w	r8, #0
1a001318:	f080 8109 	bcs.w	1a00152e <find_volume+0x452>
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
1a00131c:	f104 008c 	add.w	r0, r4, #140	; 0x8c
1a001320:	f7ff fb8d 	bl	1a000a3e <ld_dword>
1a001324:	6220      	str	r0, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
1a001326:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
1a00132a:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
1a00132c:	2b01      	cmp	r3, #1
1a00132e:	f040 8100 	bne.w	1a001532 <find_volume+0x456>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
1a001332:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
1a001336:	2501      	movs	r5, #1
1a001338:	409d      	lsls	r5, r3
1a00133a:	b2ad      	uxth	r5, r5
1a00133c:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
1a00133e:	2d00      	cmp	r5, #0
1a001340:	f000 80f9 	beq.w	1a001536 <find_volume+0x45a>
		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
1a001344:	f104 0094 	add.w	r0, r4, #148	; 0x94
1a001348:	f7ff fb79 	bl	1a000a3e <ld_dword>
1a00134c:	4682      	mov	sl, r0
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
1a00134e:	4b2c      	ldr	r3, [pc, #176]	; (1a001400 <find_volume+0x324>)
1a001350:	4298      	cmp	r0, r3
1a001352:	f200 80f2 	bhi.w	1a00153a <find_volume+0x45e>
		fs->n_fatent = nclst + 2;
1a001356:	1c83      	adds	r3, r0, #2
1a001358:	61e3      	str	r3, [r4, #28]
		fs->volbase = bsect;
1a00135a:	6267      	str	r7, [r4, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
1a00135c:	f104 0090 	add.w	r0, r4, #144	; 0x90
1a001360:	f7ff fb6d 	bl	1a000a3e <ld_dword>
1a001364:	19c6      	adds	r6, r0, r7
1a001366:	6326      	str	r6, [r4, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
1a001368:	f104 0088 	add.w	r0, r4, #136	; 0x88
1a00136c:	f7ff fb67 	bl	1a000a3e <ld_dword>
1a001370:	4438      	add	r0, r7
1a001372:	62a0      	str	r0, [r4, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
1a001374:	fb0a f205 	mul.w	r2, sl, r5
1a001378:	2100      	movs	r1, #0
1a00137a:	1992      	adds	r2, r2, r6
1a00137c:	f141 0300 	adc.w	r3, r1, #0
1a001380:	4599      	cmp	r9, r3
1a001382:	bf08      	it	eq
1a001384:	4590      	cmpeq	r8, r2
1a001386:	f0c0 80da 	bcc.w	1a00153e <find_volume+0x462>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
1a00138a:	f104 0098 	add.w	r0, r4, #152	; 0x98
1a00138e:	f7ff fb56 	bl	1a000a3e <ld_dword>
1a001392:	4601      	mov	r1, r0
1a001394:	62e0      	str	r0, [r4, #44]	; 0x2c
		if (move_window(fs, clst2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
1a001396:	4620      	mov	r0, r4
1a001398:	f7ff fc58 	bl	1a000c4c <clst2sect>
1a00139c:	4601      	mov	r1, r0
1a00139e:	4620      	mov	r0, r4
1a0013a0:	f7ff fe40 	bl	1a001024 <move_window>
1a0013a4:	2800      	cmp	r0, #0
1a0013a6:	f040 80cc 	bne.w	1a001542 <find_volume+0x466>
		for (i = 0; i < SS(fs); i += SZDIRE) {
1a0013aa:	2500      	movs	r5, #0
1a0013ac:	e002      	b.n	1a0013b4 <find_volume+0x2d8>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
1a0013ae:	230b      	movs	r3, #11
1a0013b0:	e78e      	b.n	1a0012d0 <find_volume+0x1f4>
		for (i = 0; i < SS(fs); i += SZDIRE) {
1a0013b2:	3520      	adds	r5, #32
1a0013b4:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
1a0013b8:	d20d      	bcs.n	1a0013d6 <find_volume+0x2fa>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
1a0013ba:	1963      	adds	r3, r4, r5
1a0013bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
1a0013c0:	2b81      	cmp	r3, #129	; 0x81
1a0013c2:	d1f6      	bne.n	1a0013b2 <find_volume+0x2d6>
1a0013c4:	f104 0338 	add.w	r3, r4, #56	; 0x38
1a0013c8:	f105 0014 	add.w	r0, r5, #20
1a0013cc:	4418      	add	r0, r3
1a0013ce:	f7ff fb36 	bl	1a000a3e <ld_dword>
1a0013d2:	2802      	cmp	r0, #2
1a0013d4:	d1ed      	bne.n	1a0013b2 <find_volume+0x2d6>
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
1a0013d6:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
1a0013da:	f000 80b4 	beq.w	1a001546 <find_volume+0x46a>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
1a0013de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0013e2:	61a3      	str	r3, [r4, #24]
1a0013e4:	6163      	str	r3, [r4, #20]
		fmt = FS_EXFAT;			/* FAT sub-type */
1a0013e6:	f04f 0904 	mov.w	r9, #4
1a0013ea:	e037      	b.n	1a00145c <find_volume+0x380>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
1a0013ec:	f04f 0903 	mov.w	r9, #3
1a0013f0:	e719      	b.n	1a001226 <find_volume+0x14a>
1a0013f2:	bf00      	nop
1a0013f4:	100007e8 	.word	0x100007e8
1a0013f8:	1000000c 	.word	0x1000000c
1a0013fc:	0ffffff5 	.word	0x0ffffff5
1a001400:	7ffffffd 	.word	0x7ffffffd
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
1a001404:	f04f 0901 	mov.w	r9, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
1a001408:	f103 0802 	add.w	r8, r3, #2
1a00140c:	f8c4 801c 	str.w	r8, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
1a001410:	6267      	str	r7, [r4, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
1a001412:	19cb      	adds	r3, r1, r7
1a001414:	62a3      	str	r3, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
1a001416:	443a      	add	r2, r7
1a001418:	6322      	str	r2, [r4, #48]	; 0x30
		if (fmt == FS_FAT32) {
1a00141a:	f1b9 0f03 	cmp.w	r9, #3
1a00141e:	d02b      	beq.n	1a001478 <find_volume+0x39c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
1a001420:	f1ba 0f00 	cmp.w	sl, #0
1a001424:	f000 80a5 	beq.w	1a001572 <find_volume+0x496>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
1a001428:	442b      	add	r3, r5
1a00142a:	62e3      	str	r3, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
1a00142c:	f1b9 0f02 	cmp.w	r9, #2
1a001430:	d033      	beq.n	1a00149a <find_volume+0x3be>
1a001432:	eb08 0248 	add.w	r2, r8, r8, lsl #1
1a001436:	f008 0301 	and.w	r3, r8, #1
1a00143a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
1a00143e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
1a001442:	ebb6 2f53 	cmp.w	r6, r3, lsr #9
1a001446:	f0c0 8096 	bcc.w	1a001576 <find_volume+0x49a>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
1a00144a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a00144e:	61a3      	str	r3, [r4, #24]
1a001450:	6163      	str	r3, [r4, #20]
		fs->fsi_flag = 0x80;
1a001452:	2380      	movs	r3, #128	; 0x80
1a001454:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
1a001456:	f1b9 0f03 	cmp.w	r9, #3
1a00145a:	d021      	beq.n	1a0014a0 <find_volume+0x3c4>
	fs->fs_type = fmt;		/* FAT sub-type */
1a00145c:	f884 9000 	strb.w	r9, [r4]
	fs->id = ++Fsid;		/* Volume mount ID */
1a001460:	4a46      	ldr	r2, [pc, #280]	; (1a00157c <find_volume+0x4a0>)
1a001462:	8813      	ldrh	r3, [r2, #0]
1a001464:	3301      	adds	r3, #1
1a001466:	b29b      	uxth	r3, r3
1a001468:	8013      	strh	r3, [r2, #0]
1a00146a:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
1a00146c:	4b44      	ldr	r3, [pc, #272]	; (1a001580 <find_volume+0x4a4>)
1a00146e:	60e3      	str	r3, [r4, #12]
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
1a001470:	4b44      	ldr	r3, [pc, #272]	; (1a001584 <find_volume+0x4a8>)
1a001472:	6123      	str	r3, [r4, #16]
	return FR_OK;
1a001474:	2000      	movs	r0, #0
1a001476:	e043      	b.n	1a001500 <find_volume+0x424>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
1a001478:	f104 0062 	add.w	r0, r4, #98	; 0x62
1a00147c:	f7ff fada 	bl	1a000a34 <ld_word>
1a001480:	2800      	cmp	r0, #0
1a001482:	d172      	bne.n	1a00156a <find_volume+0x48e>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
1a001484:	f1ba 0f00 	cmp.w	sl, #0
1a001488:	d171      	bne.n	1a00156e <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
1a00148a:	f104 0064 	add.w	r0, r4, #100	; 0x64
1a00148e:	f7ff fad6 	bl	1a000a3e <ld_dword>
1a001492:	62e0      	str	r0, [r4, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
1a001494:	ea4f 0388 	mov.w	r3, r8, lsl #2
1a001498:	e7d1      	b.n	1a00143e <find_volume+0x362>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
1a00149a:	ea4f 0348 	mov.w	r3, r8, lsl #1
1a00149e:	e7ce      	b.n	1a00143e <find_volume+0x362>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
1a0014a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
1a0014a4:	f7ff fac6 	bl	1a000a34 <ld_word>
1a0014a8:	2801      	cmp	r0, #1
1a0014aa:	d1d7      	bne.n	1a00145c <find_volume+0x380>
			&& move_window(fs, bsect + 1) == FR_OK)
1a0014ac:	1c79      	adds	r1, r7, #1
1a0014ae:	4620      	mov	r0, r4
1a0014b0:	f7ff fdb8 	bl	1a001024 <move_window>
1a0014b4:	2800      	cmp	r0, #0
1a0014b6:	d1d1      	bne.n	1a00145c <find_volume+0x380>
			fs->fsi_flag = 0;
1a0014b8:	2300      	movs	r3, #0
1a0014ba:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
1a0014bc:	f204 2036 	addw	r0, r4, #566	; 0x236
1a0014c0:	f7ff fab8 	bl	1a000a34 <ld_word>
1a0014c4:	f64a 2355 	movw	r3, #43605	; 0xaa55
1a0014c8:	4298      	cmp	r0, r3
1a0014ca:	d1c7      	bne.n	1a00145c <find_volume+0x380>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
1a0014cc:	f104 0038 	add.w	r0, r4, #56	; 0x38
1a0014d0:	f7ff fab5 	bl	1a000a3e <ld_dword>
1a0014d4:	4b2c      	ldr	r3, [pc, #176]	; (1a001588 <find_volume+0x4ac>)
1a0014d6:	4298      	cmp	r0, r3
1a0014d8:	d1c0      	bne.n	1a00145c <find_volume+0x380>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
1a0014da:	f504 7007 	add.w	r0, r4, #540	; 0x21c
1a0014de:	f7ff faae 	bl	1a000a3e <ld_dword>
1a0014e2:	4b2a      	ldr	r3, [pc, #168]	; (1a00158c <find_volume+0x4b0>)
1a0014e4:	4298      	cmp	r0, r3
1a0014e6:	d1b9      	bne.n	1a00145c <find_volume+0x380>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
1a0014e8:	f504 7008 	add.w	r0, r4, #544	; 0x220
1a0014ec:	f7ff faa7 	bl	1a000a3e <ld_dword>
1a0014f0:	61a0      	str	r0, [r4, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
1a0014f2:	f504 7009 	add.w	r0, r4, #548	; 0x224
1a0014f6:	f7ff faa2 	bl	1a000a3e <ld_dword>
1a0014fa:	6160      	str	r0, [r4, #20]
1a0014fc:	e7ae      	b.n	1a00145c <find_volume+0x380>
	if (vol < 0) return FR_INVALID_DRIVE;
1a0014fe:	200b      	movs	r0, #11
}
1a001500:	b004      	add	sp, #16
1a001502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
1a001506:	200c      	movs	r0, #12
1a001508:	e7fa      	b.n	1a001500 <find_volume+0x424>
			return FR_OK;				/* The filesystem object is valid */
1a00150a:	2000      	movs	r0, #0
1a00150c:	e7f8      	b.n	1a001500 <find_volume+0x424>
				return FR_WRITE_PROTECTED;
1a00150e:	200a      	movs	r0, #10
1a001510:	e7f6      	b.n	1a001500 <find_volume+0x424>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
1a001512:	2003      	movs	r0, #3
1a001514:	e7f4      	b.n	1a001500 <find_volume+0x424>
		return FR_WRITE_PROTECTED;
1a001516:	200a      	movs	r0, #10
1a001518:	e7f2      	b.n	1a001500 <find_volume+0x424>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
1a00151a:	2001      	movs	r0, #1
1a00151c:	e7f0      	b.n	1a001500 <find_volume+0x424>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
1a00151e:	200d      	movs	r0, #13
1a001520:	e7ee      	b.n	1a001500 <find_volume+0x424>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
1a001522:	200d      	movs	r0, #13
1a001524:	e7ec      	b.n	1a001500 <find_volume+0x424>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
1a001526:	200d      	movs	r0, #13
1a001528:	e7ea      	b.n	1a001500 <find_volume+0x424>
			return FR_NO_FILESYSTEM;
1a00152a:	200d      	movs	r0, #13
1a00152c:	e7e8      	b.n	1a001500 <find_volume+0x424>
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
1a00152e:	200d      	movs	r0, #13
1a001530:	e7e6      	b.n	1a001500 <find_volume+0x424>
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
1a001532:	200d      	movs	r0, #13
1a001534:	e7e4      	b.n	1a001500 <find_volume+0x424>
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
1a001536:	200d      	movs	r0, #13
1a001538:	e7e2      	b.n	1a001500 <find_volume+0x424>
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
1a00153a:	200d      	movs	r0, #13
1a00153c:	e7e0      	b.n	1a001500 <find_volume+0x424>
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
1a00153e:	200d      	movs	r0, #13
1a001540:	e7de      	b.n	1a001500 <find_volume+0x424>
		if (move_window(fs, clst2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
1a001542:	2001      	movs	r0, #1
1a001544:	e7dc      	b.n	1a001500 <find_volume+0x424>
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
1a001546:	200d      	movs	r0, #13
1a001548:	e7da      	b.n	1a001500 <find_volume+0x424>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
1a00154a:	200d      	movs	r0, #13
1a00154c:	e7d8      	b.n	1a001500 <find_volume+0x424>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
1a00154e:	200d      	movs	r0, #13
1a001550:	e7d6      	b.n	1a001500 <find_volume+0x424>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
1a001552:	200d      	movs	r0, #13
1a001554:	e7d4      	b.n	1a001500 <find_volume+0x424>
1a001556:	200d      	movs	r0, #13
1a001558:	e7d2      	b.n	1a001500 <find_volume+0x424>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
1a00155a:	200d      	movs	r0, #13
1a00155c:	e7d0      	b.n	1a001500 <find_volume+0x424>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
1a00155e:	200d      	movs	r0, #13
1a001560:	e7ce      	b.n	1a001500 <find_volume+0x424>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
1a001562:	200d      	movs	r0, #13
1a001564:	e7cc      	b.n	1a001500 <find_volume+0x424>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
1a001566:	200d      	movs	r0, #13
1a001568:	e7ca      	b.n	1a001500 <find_volume+0x424>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
1a00156a:	200d      	movs	r0, #13
1a00156c:	e7c8      	b.n	1a001500 <find_volume+0x424>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
1a00156e:	200d      	movs	r0, #13
1a001570:	e7c6      	b.n	1a001500 <find_volume+0x424>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
1a001572:	200d      	movs	r0, #13
1a001574:	e7c4      	b.n	1a001500 <find_volume+0x424>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
1a001576:	200d      	movs	r0, #13
1a001578:	e7c2      	b.n	1a001500 <find_volume+0x424>
1a00157a:	bf00      	nop
1a00157c:	100007f0 	.word	0x100007f0
1a001580:	100007f4 	.word	0x100007f4
1a001584:	10000588 	.word	0x10000588
1a001588:	41615252 	.word	0x41615252
1a00158c:	61417272 	.word	0x61417272

1a001590 <find_bitmap>:
{
1a001590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001594:	4605      	mov	r5, r0
1a001596:	4691      	mov	r9, r2
	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
1a001598:	1e8f      	subs	r7, r1, #2
	if (clst >= fs->n_fatent - 2) clst = 0;
1a00159a:	69c3      	ldr	r3, [r0, #28]
1a00159c:	3b02      	subs	r3, #2
1a00159e:	42bb      	cmp	r3, r7
1a0015a0:	d800      	bhi.n	1a0015a4 <find_bitmap+0x14>
1a0015a2:	2700      	movs	r7, #0
	scl = val = clst; ctr = 0;
1a0015a4:	46b8      	mov	r8, r7
1a0015a6:	463c      	mov	r4, r7
1a0015a8:	2600      	movs	r6, #0
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
1a0015aa:	6b29      	ldr	r1, [r5, #48]	; 0x30
1a0015ac:	eb01 3114 	add.w	r1, r1, r4, lsr #12
1a0015b0:	4628      	mov	r0, r5
1a0015b2:	f7ff fd37 	bl	1a001024 <move_window>
1a0015b6:	bb40      	cbnz	r0, 1a00160a <find_bitmap+0x7a>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
1a0015b8:	f3c4 00c8 	ubfx	r0, r4, #3, #9
1a0015bc:	f004 0207 	and.w	r2, r4, #7
1a0015c0:	2301      	movs	r3, #1
1a0015c2:	4093      	lsls	r3, r2
1a0015c4:	b2db      	uxtb	r3, r3
1a0015c6:	e009      	b.n	1a0015dc <find_bitmap+0x4c>
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
1a0015c8:	46a0      	mov	r8, r4
1a0015ca:	2600      	movs	r6, #0
				if (val == clst) return 0;	/* All cluster scanned? */
1a0015cc:	42a7      	cmp	r7, r4
1a0015ce:	d01f      	beq.n	1a001610 <find_bitmap+0x80>
			} while (bm != 0);
1a0015d0:	b923      	cbnz	r3, 1a0015dc <find_bitmap+0x4c>
		} while (++i < SS(fs));
1a0015d2:	3001      	adds	r0, #1
1a0015d4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
1a0015d8:	d2e7      	bcs.n	1a0015aa <find_bitmap+0x1a>
			bm = 1;
1a0015da:	2301      	movs	r3, #1
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
1a0015dc:	182a      	adds	r2, r5, r0
1a0015de:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
1a0015e2:	401a      	ands	r2, r3
1a0015e4:	005b      	lsls	r3, r3, #1
1a0015e6:	b2db      	uxtb	r3, r3
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
1a0015e8:	3401      	adds	r4, #1
1a0015ea:	69e9      	ldr	r1, [r5, #28]
1a0015ec:	3902      	subs	r1, #2
1a0015ee:	42a1      	cmp	r1, r4
1a0015f0:	d803      	bhi.n	1a0015fa <find_bitmap+0x6a>
					val = 0; bm = 0; i = SS(fs);
1a0015f2:	2400      	movs	r4, #0
1a0015f4:	f44f 7000 	mov.w	r0, #512	; 0x200
1a0015f8:	4623      	mov	r3, r4
				if (bv == 0) {	/* Is it a free cluster? */
1a0015fa:	2a00      	cmp	r2, #0
1a0015fc:	d1e4      	bne.n	1a0015c8 <find_bitmap+0x38>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
1a0015fe:	3601      	adds	r6, #1
1a001600:	454e      	cmp	r6, r9
1a001602:	d1e3      	bne.n	1a0015cc <find_bitmap+0x3c>
1a001604:	f108 0002 	add.w	r0, r8, #2
1a001608:	e003      	b.n	1a001612 <find_bitmap+0x82>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
1a00160a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00160e:	e000      	b.n	1a001612 <find_bitmap+0x82>
				if (val == clst) return 0;	/* All cluster scanned? */
1a001610:	2000      	movs	r0, #0
}
1a001612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a001616 <change_bitmap>:
{
1a001616:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00161a:	4606      	mov	r6, r0
1a00161c:	4617      	mov	r7, r2
1a00161e:	4698      	mov	r8, r3
	clst -= 2;	/* The first bit corresponds to cluster #2 */
1a001620:	1e8c      	subs	r4, r1, #2
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
1a001622:	6b01      	ldr	r1, [r0, #48]	; 0x30
1a001624:	eb01 3114 	add.w	r1, r1, r4, lsr #12
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
1a001628:	f3c4 05c8 	ubfx	r5, r4, #3, #9
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
1a00162c:	f004 0407 	and.w	r4, r4, #7
1a001630:	2301      	movs	r3, #1
1a001632:	fa03 f404 	lsl.w	r4, r3, r4
1a001636:	b2e4      	uxtb	r4, r4
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
1a001638:	f101 0901 	add.w	r9, r1, #1
1a00163c:	4630      	mov	r0, r6
1a00163e:	f7ff fcf1 	bl	1a001024 <move_window>
1a001642:	4601      	mov	r1, r0
1a001644:	b110      	cbz	r0, 1a00164c <change_bitmap+0x36>
1a001646:	2101      	movs	r1, #1
1a001648:	e01e      	b.n	1a001688 <change_bitmap+0x72>
			bm = 1;
1a00164a:	2401      	movs	r4, #1
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
1a00164c:	1973      	adds	r3, r6, r5
1a00164e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
1a001652:	4223      	tst	r3, r4
1a001654:	bf14      	ite	ne
1a001656:	2201      	movne	r2, #1
1a001658:	2200      	moveq	r2, #0
1a00165a:	4542      	cmp	r2, r8
1a00165c:	d013      	beq.n	1a001686 <change_bitmap+0x70>
				fs->win[i] ^= bm;	/* Flip the bit */
1a00165e:	1972      	adds	r2, r6, r5
1a001660:	4063      	eors	r3, r4
1a001662:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
				fs->wflag = 1;
1a001666:	2301      	movs	r3, #1
1a001668:	70f3      	strb	r3, [r6, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
1a00166a:	3f01      	subs	r7, #1
1a00166c:	d00c      	beq.n	1a001688 <change_bitmap+0x72>
			} while (bm <<= 1);		/* Next bit */
1a00166e:	409c      	lsls	r4, r3
1a001670:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
1a001674:	d1ea      	bne.n	1a00164c <change_bitmap+0x36>
		} while (++i < SS(fs));		/* Next byte */
1a001676:	441d      	add	r5, r3
			bm = 1;
1a001678:	461c      	mov	r4, r3
		} while (++i < SS(fs));		/* Next byte */
1a00167a:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
1a00167e:	d3e4      	bcc.n	1a00164a <change_bitmap+0x34>
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
1a001680:	4649      	mov	r1, r9
		i = 0;
1a001682:	2500      	movs	r5, #0
1a001684:	e7d8      	b.n	1a001638 <change_bitmap+0x22>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
1a001686:	2102      	movs	r1, #2
}
1a001688:	4608      	mov	r0, r1
1a00168a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a00168e <put_fat>:
{
1a00168e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
1a001692:	2901      	cmp	r1, #1
1a001694:	f240 8082 	bls.w	1a00179c <put_fat+0x10e>
1a001698:	4605      	mov	r5, r0
1a00169a:	460c      	mov	r4, r1
1a00169c:	4617      	mov	r7, r2
1a00169e:	69c3      	ldr	r3, [r0, #28]
1a0016a0:	428b      	cmp	r3, r1
1a0016a2:	d97d      	bls.n	1a0017a0 <put_fat+0x112>
		switch (fs->fs_type) {
1a0016a4:	7803      	ldrb	r3, [r0, #0]
1a0016a6:	3b01      	subs	r3, #1
1a0016a8:	2b03      	cmp	r3, #3
1a0016aa:	d87d      	bhi.n	1a0017a8 <put_fat+0x11a>
1a0016ac:	e8df f003 	tbb	[pc, r3]
1a0016b0:	53534002 	.word	0x53534002
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
1a0016b4:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1a0016b8:	6a81      	ldr	r1, [r0, #40]	; 0x28
1a0016ba:	eb01 2158 	add.w	r1, r1, r8, lsr #9
1a0016be:	f7ff fcb1 	bl	1a001024 <move_window>
			if (res != FR_OK) break;
1a0016c2:	4606      	mov	r6, r0
1a0016c4:	2800      	cmp	r0, #0
1a0016c6:	d16c      	bne.n	1a0017a2 <put_fat+0x114>
			p = fs->win + bc++ % SS(fs);
1a0016c8:	f105 0a38 	add.w	sl, r5, #56	; 0x38
1a0016cc:	f108 0901 	add.w	r9, r8, #1
1a0016d0:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
1a0016d4:	f014 0401 	ands.w	r4, r4, #1
1a0016d8:	d01f      	beq.n	1a00171a <put_fat+0x8c>
1a0016da:	f91a 3008 	ldrsb.w	r3, [sl, r8]
1a0016de:	f003 030f 	and.w	r3, r3, #15
1a0016e2:	013a      	lsls	r2, r7, #4
1a0016e4:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
1a0016e8:	4313      	orrs	r3, r2
1a0016ea:	b2db      	uxtb	r3, r3
1a0016ec:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
1a0016f0:	2301      	movs	r3, #1
1a0016f2:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1a0016f4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a0016f6:	eb01 2159 	add.w	r1, r1, r9, lsr #9
1a0016fa:	4628      	mov	r0, r5
1a0016fc:	f7ff fc92 	bl	1a001024 <move_window>
			if (res != FR_OK) break;
1a001700:	4606      	mov	r6, r0
1a001702:	2800      	cmp	r0, #0
1a001704:	d14d      	bne.n	1a0017a2 <put_fat+0x114>
			p = fs->win + bc % SS(fs);
1a001706:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
1a00170a:	b144      	cbz	r4, 1a00171e <put_fat+0x90>
1a00170c:	f3c7 1707 	ubfx	r7, r7, #4, #8
1a001710:	f80a 7009 	strb.w	r7, [sl, r9]
			fs->wflag = 1;
1a001714:	2301      	movs	r3, #1
1a001716:	70eb      	strb	r3, [r5, #3]
			break;
1a001718:	e043      	b.n	1a0017a2 <put_fat+0x114>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
1a00171a:	b2fb      	uxtb	r3, r7
1a00171c:	e7e6      	b.n	1a0016ec <put_fat+0x5e>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
1a00171e:	f91a 3009 	ldrsb.w	r3, [sl, r9]
1a001722:	f023 030f 	bic.w	r3, r3, #15
1a001726:	f3c7 2703 	ubfx	r7, r7, #8, #4
1a00172a:	431f      	orrs	r7, r3
1a00172c:	b2ff      	uxtb	r7, r7
1a00172e:	e7ef      	b.n	1a001710 <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
1a001730:	6a81      	ldr	r1, [r0, #40]	; 0x28
1a001732:	eb01 2114 	add.w	r1, r1, r4, lsr #8
1a001736:	f7ff fc75 	bl	1a001024 <move_window>
			if (res != FR_OK) break;
1a00173a:	4606      	mov	r6, r0
1a00173c:	bb88      	cbnz	r0, 1a0017a2 <put_fat+0x114>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
1a00173e:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a001742:	0064      	lsls	r4, r4, #1
1a001744:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
1a001748:	b2b9      	uxth	r1, r7
1a00174a:	4420      	add	r0, r4
1a00174c:	f7ff f9d6 	bl	1a000afc <st_word>
			fs->wflag = 1;
1a001750:	2301      	movs	r3, #1
1a001752:	70eb      	strb	r3, [r5, #3]
			break;
1a001754:	e025      	b.n	1a0017a2 <put_fat+0x114>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
1a001756:	6a81      	ldr	r1, [r0, #40]	; 0x28
1a001758:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
1a00175c:	f7ff fc62 	bl	1a001024 <move_window>
			if (res != FR_OK) break;
1a001760:	4606      	mov	r6, r0
1a001762:	b9f0      	cbnz	r0, 1a0017a2 <put_fat+0x114>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1a001764:	782b      	ldrb	r3, [r5, #0]
1a001766:	2b04      	cmp	r3, #4
1a001768:	d00c      	beq.n	1a001784 <put_fat+0xf6>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
1a00176a:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
1a00176e:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a001772:	00a3      	lsls	r3, r4, #2
1a001774:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
1a001778:	4418      	add	r0, r3
1a00177a:	f7ff f960 	bl	1a000a3e <ld_dword>
1a00177e:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
1a001782:	4307      	orrs	r7, r0
			st_dword(fs->win + clst * 4 % SS(fs), val);
1a001784:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a001788:	00a4      	lsls	r4, r4, #2
1a00178a:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
1a00178e:	4639      	mov	r1, r7
1a001790:	4420      	add	r0, r4
1a001792:	f7ff f9b7 	bl	1a000b04 <st_dword>
			fs->wflag = 1;
1a001796:	2301      	movs	r3, #1
1a001798:	70eb      	strb	r3, [r5, #3]
			break;
1a00179a:	e002      	b.n	1a0017a2 <put_fat+0x114>
	FRESULT res = FR_INT_ERR;
1a00179c:	2602      	movs	r6, #2
1a00179e:	e000      	b.n	1a0017a2 <put_fat+0x114>
1a0017a0:	2602      	movs	r6, #2
}
1a0017a2:	4630      	mov	r0, r6
1a0017a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	FRESULT res = FR_INT_ERR;
1a0017a8:	2602      	movs	r6, #2
1a0017aa:	e7fa      	b.n	1a0017a2 <put_fat+0x114>

1a0017ac <fill_last_frag>:
{
1a0017ac:	b570      	push	{r4, r5, r6, lr}
1a0017ae:	4604      	mov	r4, r0
1a0017b0:	460d      	mov	r5, r1
1a0017b2:	4616      	mov	r6, r2
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
1a0017b4:	e007      	b.n	1a0017c6 <fill_last_frag+0x1a>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
1a0017b6:	4632      	mov	r2, r6
1a0017b8:	f7ff ff69 	bl	1a00168e <put_fat>
		if (res != FR_OK) return res;
1a0017bc:	4603      	mov	r3, r0
1a0017be:	b958      	cbnz	r0, 1a0017d8 <fill_last_frag+0x2c>
		obj->n_frag--;
1a0017c0:	69e3      	ldr	r3, [r4, #28]
1a0017c2:	3b01      	subs	r3, #1
1a0017c4:	61e3      	str	r3, [r4, #28]
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
1a0017c6:	69e3      	ldr	r3, [r4, #28]
1a0017c8:	b133      	cbz	r3, 1a0017d8 <fill_last_frag+0x2c>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
1a0017ca:	6820      	ldr	r0, [r4, #0]
1a0017cc:	1aea      	subs	r2, r5, r3
1a0017ce:	1c51      	adds	r1, r2, #1
1a0017d0:	2b01      	cmp	r3, #1
1a0017d2:	d9f0      	bls.n	1a0017b6 <fill_last_frag+0xa>
1a0017d4:	3202      	adds	r2, #2
1a0017d6:	e7ef      	b.n	1a0017b8 <fill_last_frag+0xc>
}
1a0017d8:	4618      	mov	r0, r3
1a0017da:	bd70      	pop	{r4, r5, r6, pc}

1a0017dc <fill_first_frag>:
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
1a0017dc:	79c3      	ldrb	r3, [r0, #7]
1a0017de:	2b03      	cmp	r3, #3
1a0017e0:	d002      	beq.n	1a0017e8 <fill_first_frag+0xc>
	return FR_OK;
1a0017e2:	2300      	movs	r3, #0
}
1a0017e4:	4618      	mov	r0, r3
1a0017e6:	4770      	bx	lr
{
1a0017e8:	b570      	push	{r4, r5, r6, lr}
1a0017ea:	4606      	mov	r6, r0
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
1a0017ec:	6881      	ldr	r1, [r0, #8]
1a0017ee:	6984      	ldr	r4, [r0, #24]
1a0017f0:	b14c      	cbz	r4, 1a001806 <fill_first_frag+0x2a>
			res = put_fat(obj->fs, cl, cl + 1);
1a0017f2:	1c4d      	adds	r5, r1, #1
1a0017f4:	462a      	mov	r2, r5
1a0017f6:	6830      	ldr	r0, [r6, #0]
1a0017f8:	f7ff ff49 	bl	1a00168e <put_fat>
			if (res != FR_OK) return res;
1a0017fc:	4603      	mov	r3, r0
1a0017fe:	b920      	cbnz	r0, 1a00180a <fill_first_frag+0x2e>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
1a001800:	3c01      	subs	r4, #1
1a001802:	4629      	mov	r1, r5
1a001804:	e7f4      	b.n	1a0017f0 <fill_first_frag+0x14>
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
1a001806:	2300      	movs	r3, #0
1a001808:	71f3      	strb	r3, [r6, #7]
}
1a00180a:	4618      	mov	r0, r3
1a00180c:	bd70      	pop	{r4, r5, r6, pc}

1a00180e <get_fat>:
{
1a00180e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
1a001810:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
1a001812:	2901      	cmp	r1, #1
1a001814:	f240 8095 	bls.w	1a001942 <get_fat+0x134>
1a001818:	69eb      	ldr	r3, [r5, #28]
1a00181a:	428b      	cmp	r3, r1
1a00181c:	f240 8093 	bls.w	1a001946 <get_fat+0x138>
1a001820:	460c      	mov	r4, r1
		switch (fs->fs_type) {
1a001822:	782b      	ldrb	r3, [r5, #0]
1a001824:	3b01      	subs	r3, #1
1a001826:	2b03      	cmp	r3, #3
1a001828:	f200 808f 	bhi.w	1a00194a <get_fat+0x13c>
1a00182c:	e8df f003 	tbb	[pc, r3]
1a001830:	4e3b2a02 	.word	0x4e3b2a02
			bc = (UINT)clst; bc += bc / 2;
1a001834:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
1a001838:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a00183a:	eb01 2156 	add.w	r1, r1, r6, lsr #9
1a00183e:	4628      	mov	r0, r5
1a001840:	f7ff fbf0 	bl	1a001024 <move_window>
1a001844:	2800      	cmp	r0, #0
1a001846:	f040 8082 	bne.w	1a00194e <get_fat+0x140>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
1a00184a:	1c77      	adds	r7, r6, #1
1a00184c:	f3c6 0608 	ubfx	r6, r6, #0, #9
1a001850:	442e      	add	r6, r5
1a001852:	f896 6038 	ldrb.w	r6, [r6, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
1a001856:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a001858:	eb01 2157 	add.w	r1, r1, r7, lsr #9
1a00185c:	4628      	mov	r0, r5
1a00185e:	f7ff fbe1 	bl	1a001024 <move_window>
1a001862:	2800      	cmp	r0, #0
1a001864:	d176      	bne.n	1a001954 <get_fat+0x146>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
1a001866:	f3c7 0008 	ubfx	r0, r7, #0, #9
1a00186a:	4428      	add	r0, r5
1a00186c:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
1a001870:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
1a001874:	f014 0f01 	tst.w	r4, #1
1a001878:	d001      	beq.n	1a00187e <get_fat+0x70>
1a00187a:	0900      	lsrs	r0, r0, #4
1a00187c:	e062      	b.n	1a001944 <get_fat+0x136>
1a00187e:	f3c0 000b 	ubfx	r0, r0, #0, #12
1a001882:	e05f      	b.n	1a001944 <get_fat+0x136>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
1a001884:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a001886:	eb01 2114 	add.w	r1, r1, r4, lsr #8
1a00188a:	4628      	mov	r0, r5
1a00188c:	f7ff fbca 	bl	1a001024 <move_window>
1a001890:	2800      	cmp	r0, #0
1a001892:	d162      	bne.n	1a00195a <get_fat+0x14c>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
1a001894:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a001898:	0064      	lsls	r4, r4, #1
1a00189a:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
1a00189e:	4420      	add	r0, r4
1a0018a0:	f7ff f8c8 	bl	1a000a34 <ld_word>
			break;
1a0018a4:	e04e      	b.n	1a001944 <get_fat+0x136>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1a0018a6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a0018a8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
1a0018ac:	4628      	mov	r0, r5
1a0018ae:	f7ff fbb9 	bl	1a001024 <move_window>
1a0018b2:	2800      	cmp	r0, #0
1a0018b4:	d154      	bne.n	1a001960 <get_fat+0x152>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
1a0018b6:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a0018ba:	00a4      	lsls	r4, r4, #2
1a0018bc:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
1a0018c0:	4420      	add	r0, r4
1a0018c2:	f7ff f8bc 	bl	1a000a3e <ld_dword>
1a0018c6:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
1a0018ca:	e03b      	b.n	1a001944 <get_fat+0x136>
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
1a0018cc:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
1a0018d0:	ea52 0103 	orrs.w	r1, r2, r3
1a0018d4:	d001      	beq.n	1a0018da <get_fat+0xcc>
1a0018d6:	6881      	ldr	r1, [r0, #8]
1a0018d8:	b911      	cbnz	r1, 1a0018e0 <get_fat+0xd2>
1a0018da:	79c1      	ldrb	r1, [r0, #7]
1a0018dc:	2900      	cmp	r1, #0
1a0018de:	d142      	bne.n	1a001966 <get_fat+0x158>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
1a0018e0:	6881      	ldr	r1, [r0, #8]
1a0018e2:	1a61      	subs	r1, r4, r1
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
1a0018e4:	f112 36ff 	adds.w	r6, r2, #4294967295	; 0xffffffff
1a0018e8:	f143 37ff 	adc.w	r7, r3, #4294967295	; 0xffffffff
1a0018ec:	0a72      	lsrs	r2, r6, #9
1a0018ee:	ea42 52c7 	orr.w	r2, r2, r7, lsl #23
1a0018f2:	896b      	ldrh	r3, [r5, #10]
1a0018f4:	fbb2 f2f3 	udiv	r2, r2, r3
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
1a0018f8:	79c3      	ldrb	r3, [r0, #7]
1a0018fa:	2b02      	cmp	r3, #2
1a0018fc:	d017      	beq.n	1a00192e <get_fat+0x120>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
1a0018fe:	2b03      	cmp	r3, #3
1a001900:	d01a      	beq.n	1a001938 <get_fat+0x12a>
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
1a001902:	2b02      	cmp	r3, #2
1a001904:	d034      	beq.n	1a001970 <get_fat+0x162>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
1a001906:	69c3      	ldr	r3, [r0, #28]
1a001908:	bba3      	cbnz	r3, 1a001974 <get_fat+0x166>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1a00190a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a00190c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
1a001910:	4628      	mov	r0, r5
1a001912:	f7ff fb87 	bl	1a001024 <move_window>
1a001916:	bb80      	cbnz	r0, 1a00197a <get_fat+0x16c>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
1a001918:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a00191c:	00a3      	lsls	r3, r4, #2
1a00191e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
1a001922:	4418      	add	r0, r3
1a001924:	f7ff f88b 	bl	1a000a3e <ld_dword>
1a001928:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
1a00192c:	e00a      	b.n	1a001944 <get_fat+0x136>
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
1a00192e:	4291      	cmp	r1, r2
1a001930:	d8e5      	bhi.n	1a0018fe <get_fat+0xf0>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
1a001932:	d01a      	beq.n	1a00196a <get_fat+0x15c>
1a001934:	1c60      	adds	r0, r4, #1
1a001936:	e005      	b.n	1a001944 <get_fat+0x136>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
1a001938:	6982      	ldr	r2, [r0, #24]
1a00193a:	428a      	cmp	r2, r1
1a00193c:	d9e1      	bls.n	1a001902 <get_fat+0xf4>
					val = clst + 1; 	/* Generate the value */
1a00193e:	1c60      	adds	r0, r4, #1
					break;
1a001940:	e000      	b.n	1a001944 <get_fat+0x136>
		val = 1;	/* Internal error */
1a001942:	2001      	movs	r0, #1
}
1a001944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
1a001946:	2001      	movs	r0, #1
1a001948:	e7fc      	b.n	1a001944 <get_fat+0x136>
			val = 1;	/* Internal error */
1a00194a:	2001      	movs	r0, #1
1a00194c:	e7fa      	b.n	1a001944 <get_fat+0x136>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
1a00194e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001952:	e7f7      	b.n	1a001944 <get_fat+0x136>
1a001954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001958:	e7f4      	b.n	1a001944 <get_fat+0x136>
1a00195a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00195e:	e7f1      	b.n	1a001944 <get_fat+0x136>
1a001960:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001964:	e7ee      	b.n	1a001944 <get_fat+0x136>
			val = 1;	/* Internal error */
1a001966:	2001      	movs	r0, #1
1a001968:	e7ec      	b.n	1a001944 <get_fat+0x136>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
1a00196a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
1a00196e:	e7e9      	b.n	1a001944 <get_fat+0x136>
			val = 1;	/* Internal error */
1a001970:	2001      	movs	r0, #1
1a001972:	e7e7      	b.n	1a001944 <get_fat+0x136>
						val = 0x7FFFFFFF;	/* Generate EOC */
1a001974:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
1a001978:	e7e4      	b.n	1a001944 <get_fat+0x136>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
1a00197a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return val;
1a00197e:	e7e1      	b.n	1a001944 <get_fat+0x136>

1a001980 <dir_sdi>:
{
1a001980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001984:	4606      	mov	r6, r0
1a001986:	460d      	mov	r5, r1
	FATFS *fs = dp->obj.fs;
1a001988:	6807      	ldr	r7, [r0, #0]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
1a00198a:	783b      	ldrb	r3, [r7, #0]
1a00198c:	2b04      	cmp	r3, #4
1a00198e:	d023      	beq.n	1a0019d8 <dir_sdi+0x58>
1a001990:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
1a001994:	42ab      	cmp	r3, r5
1a001996:	d93e      	bls.n	1a001a16 <dir_sdi+0x96>
1a001998:	f015 0f1f 	tst.w	r5, #31
1a00199c:	d13e      	bne.n	1a001a1c <dir_sdi+0x9c>
	dp->dptr = ofs;				/* Set current offset */
1a00199e:	6335      	str	r5, [r6, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
1a0019a0:	68b4      	ldr	r4, [r6, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
1a0019a2:	b92c      	cbnz	r4, 1a0019b0 <dir_sdi+0x30>
1a0019a4:	783b      	ldrb	r3, [r7, #0]
1a0019a6:	2b02      	cmp	r3, #2
1a0019a8:	d902      	bls.n	1a0019b0 <dir_sdi+0x30>
		clst = fs->dirbase;
1a0019aa:	6afc      	ldr	r4, [r7, #44]	; 0x2c
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
1a0019ac:	2300      	movs	r3, #0
1a0019ae:	71f3      	strb	r3, [r6, #7]
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
1a0019b0:	b9ac      	cbnz	r4, 1a0019de <dir_sdi+0x5e>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
1a0019b2:	893b      	ldrh	r3, [r7, #8]
1a0019b4:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
1a0019b8:	d932      	bls.n	1a001a20 <dir_sdi+0xa0>
		dp->sect = fs->dirbase;
1a0019ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a0019bc:	63b3      	str	r3, [r6, #56]	; 0x38
	dp->clust = clst;					/* Current cluster# */
1a0019be:	6374      	str	r4, [r6, #52]	; 0x34
	if (dp->sect == 0) return FR_INT_ERR;
1a0019c0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
1a0019c2:	b3ab      	cbz	r3, 1a001a30 <dir_sdi+0xb0>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
1a0019c4:	eb03 2355 	add.w	r3, r3, r5, lsr #9
1a0019c8:	63b3      	str	r3, [r6, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
1a0019ca:	3738      	adds	r7, #56	; 0x38
1a0019cc:	f3c5 0508 	ubfx	r5, r5, #0, #9
1a0019d0:	443d      	add	r5, r7
1a0019d2:	63f5      	str	r5, [r6, #60]	; 0x3c
	return FR_OK;
1a0019d4:	2000      	movs	r0, #0
1a0019d6:	e01f      	b.n	1a001a18 <dir_sdi+0x98>
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
1a0019d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
1a0019dc:	e7da      	b.n	1a001994 <dir_sdi+0x14>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
1a0019de:	f8b7 800a 	ldrh.w	r8, [r7, #10]
1a0019e2:	ea4f 2848 	mov.w	r8, r8, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
1a0019e6:	4545      	cmp	r5, r8
1a0019e8:	d30f      	bcc.n	1a001a0a <dir_sdi+0x8a>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
1a0019ea:	4621      	mov	r1, r4
1a0019ec:	4630      	mov	r0, r6
1a0019ee:	f7ff ff0e 	bl	1a00180e <get_fat>
1a0019f2:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a0019f4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0019f8:	d014      	beq.n	1a001a24 <dir_sdi+0xa4>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
1a0019fa:	2801      	cmp	r0, #1
1a0019fc:	d914      	bls.n	1a001a28 <dir_sdi+0xa8>
1a0019fe:	69fb      	ldr	r3, [r7, #28]
1a001a00:	4283      	cmp	r3, r0
1a001a02:	d913      	bls.n	1a001a2c <dir_sdi+0xac>
			ofs -= csz;
1a001a04:	eba5 0508 	sub.w	r5, r5, r8
1a001a08:	e7ed      	b.n	1a0019e6 <dir_sdi+0x66>
		dp->sect = clst2sect(fs, clst);
1a001a0a:	4621      	mov	r1, r4
1a001a0c:	4638      	mov	r0, r7
1a001a0e:	f7ff f91d 	bl	1a000c4c <clst2sect>
1a001a12:	63b0      	str	r0, [r6, #56]	; 0x38
1a001a14:	e7d3      	b.n	1a0019be <dir_sdi+0x3e>
		return FR_INT_ERR;
1a001a16:	2002      	movs	r0, #2
}
1a001a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_INT_ERR;
1a001a1c:	2002      	movs	r0, #2
1a001a1e:	e7fb      	b.n	1a001a18 <dir_sdi+0x98>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
1a001a20:	2002      	movs	r0, #2
1a001a22:	e7f9      	b.n	1a001a18 <dir_sdi+0x98>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a001a24:	2001      	movs	r0, #1
1a001a26:	e7f7      	b.n	1a001a18 <dir_sdi+0x98>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
1a001a28:	2002      	movs	r0, #2
1a001a2a:	e7f5      	b.n	1a001a18 <dir_sdi+0x98>
1a001a2c:	2002      	movs	r0, #2
1a001a2e:	e7f3      	b.n	1a001a18 <dir_sdi+0x98>
	if (dp->sect == 0) return FR_INT_ERR;
1a001a30:	2002      	movs	r0, #2
1a001a32:	e7f1      	b.n	1a001a18 <dir_sdi+0x98>

1a001a34 <create_chain>:
{
1a001a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001a38:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
1a001a3a:	6807      	ldr	r7, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
1a001a3c:	4689      	mov	r9, r1
1a001a3e:	b931      	cbnz	r1, 1a001a4e <create_chain+0x1a>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
1a001a40:	697e      	ldr	r6, [r7, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
1a001a42:	b1a6      	cbz	r6, 1a001a6e <create_chain+0x3a>
1a001a44:	69fb      	ldr	r3, [r7, #28]
1a001a46:	42b3      	cmp	r3, r6
1a001a48:	d812      	bhi.n	1a001a70 <create_chain+0x3c>
1a001a4a:	2601      	movs	r6, #1
1a001a4c:	e010      	b.n	1a001a70 <create_chain+0x3c>
		cs = get_fat(obj, clst);			/* Check the cluster status */
1a001a4e:	f7ff fede 	bl	1a00180e <get_fat>
1a001a52:	4605      	mov	r5, r0
		if (cs < 2) return 1;				/* Test for insanity */
1a001a54:	2801      	cmp	r0, #1
1a001a56:	f240 80c6 	bls.w	1a001be6 <create_chain+0x1b2>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
1a001a5a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001a5e:	f000 80c3 	beq.w	1a001be8 <create_chain+0x1b4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
1a001a62:	69fb      	ldr	r3, [r7, #28]
1a001a64:	4283      	cmp	r3, r0
1a001a66:	f200 80bf 	bhi.w	1a001be8 <create_chain+0x1b4>
		scl = clst;							/* Cluster to start to find */
1a001a6a:	464e      	mov	r6, r9
1a001a6c:	e000      	b.n	1a001a70 <create_chain+0x3c>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
1a001a6e:	2601      	movs	r6, #1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
1a001a70:	69bd      	ldr	r5, [r7, #24]
1a001a72:	2d00      	cmp	r5, #0
1a001a74:	f000 80b8 	beq.w	1a001be8 <create_chain+0x1b4>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1a001a78:	783b      	ldrb	r3, [r7, #0]
1a001a7a:	2b04      	cmp	r3, #4
1a001a7c:	d003      	beq.n	1a001a86 <create_chain+0x52>
		if (scl == clst) {						/* Stretching an existing chain? */
1a001a7e:	454e      	cmp	r6, r9
1a001a80:	d055      	beq.n	1a001b2e <create_chain+0xfa>
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
1a001a82:	4634      	mov	r4, r6
1a001a84:	e095      	b.n	1a001bb2 <create_chain+0x17e>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1a001a86:	2201      	movs	r2, #1
1a001a88:	4631      	mov	r1, r6
1a001a8a:	4638      	mov	r0, r7
1a001a8c:	f7ff fd80 	bl	1a001590 <find_bitmap>
1a001a90:	4605      	mov	r5, r0
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
1a001a92:	1e43      	subs	r3, r0, #1
1a001a94:	f113 0f03 	cmn.w	r3, #3
1a001a98:	f200 80a6 	bhi.w	1a001be8 <create_chain+0x1b4>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
1a001a9c:	2301      	movs	r3, #1
1a001a9e:	461a      	mov	r2, r3
1a001aa0:	4601      	mov	r1, r0
1a001aa2:	4638      	mov	r0, r7
1a001aa4:	f7ff fdb7 	bl	1a001616 <change_bitmap>
1a001aa8:	4603      	mov	r3, r0
		if (res == FR_INT_ERR) return 1;
1a001aaa:	2802      	cmp	r0, #2
1a001aac:	f000 809f 	beq.w	1a001bee <create_chain+0x1ba>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
1a001ab0:	2801      	cmp	r0, #1
1a001ab2:	f000 809e 	beq.w	1a001bf2 <create_chain+0x1be>
		if (clst == 0) {							/* Is it a new chain? */
1a001ab6:	f1b9 0f00 	cmp.w	r9, #0
1a001aba:	d11e      	bne.n	1a001afa <create_chain+0xc6>
			obj->stat = 2;							/* Set status 'contiguous' */
1a001abc:	2202      	movs	r2, #2
1a001abe:	f888 2007 	strb.w	r2, [r8, #7]
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
1a001ac2:	f898 2007 	ldrb.w	r2, [r8, #7]
1a001ac6:	2a02      	cmp	r2, #2
1a001ac8:	f000 8082 	beq.w	1a001bd0 <create_chain+0x19c>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
1a001acc:	f109 0201 	add.w	r2, r9, #1
1a001ad0:	42aa      	cmp	r2, r5
1a001ad2:	d022      	beq.n	1a001b1a <create_chain+0xe6>
				if (obj->n_frag == 0) obj->n_frag = 1;
1a001ad4:	f8d8 301c 	ldr.w	r3, [r8, #28]
1a001ad8:	b913      	cbnz	r3, 1a001ae0 <create_chain+0xac>
1a001ada:	2301      	movs	r3, #1
1a001adc:	f8c8 301c 	str.w	r3, [r8, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
1a001ae0:	462a      	mov	r2, r5
1a001ae2:	4649      	mov	r1, r9
1a001ae4:	4640      	mov	r0, r8
1a001ae6:	f7ff fe61 	bl	1a0017ac <fill_last_frag>
				if (res == FR_OK) obj->n_frag = 1;
1a001aea:	4603      	mov	r3, r0
1a001aec:	2800      	cmp	r0, #0
1a001aee:	d171      	bne.n	1a001bd4 <create_chain+0x1a0>
1a001af0:	2201      	movs	r2, #1
1a001af2:	f8c8 201c 	str.w	r2, [r8, #28]
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1a001af6:	462c      	mov	r4, r5
1a001af8:	e03e      	b.n	1a001b78 <create_chain+0x144>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
1a001afa:	f898 2007 	ldrb.w	r2, [r8, #7]
1a001afe:	2a02      	cmp	r2, #2
1a001b00:	d1df      	bne.n	1a001ac2 <create_chain+0x8e>
1a001b02:	1c72      	adds	r2, r6, #1
1a001b04:	42aa      	cmp	r2, r5
1a001b06:	d0dc      	beq.n	1a001ac2 <create_chain+0x8e>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
1a001b08:	f8d8 2008 	ldr.w	r2, [r8, #8]
1a001b0c:	1ab2      	subs	r2, r6, r2
1a001b0e:	f8c8 2018 	str.w	r2, [r8, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
1a001b12:	2203      	movs	r2, #3
1a001b14:	f888 2007 	strb.w	r2, [r8, #7]
1a001b18:	e7d3      	b.n	1a001ac2 <create_chain+0x8e>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
1a001b1a:	f8d8 201c 	ldr.w	r2, [r8, #28]
1a001b1e:	b122      	cbz	r2, 1a001b2a <create_chain+0xf6>
1a001b20:	3201      	adds	r2, #1
1a001b22:	f8c8 201c 	str.w	r2, [r8, #28]
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1a001b26:	462c      	mov	r4, r5
1a001b28:	e026      	b.n	1a001b78 <create_chain+0x144>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
1a001b2a:	2202      	movs	r2, #2
1a001b2c:	e7f9      	b.n	1a001b22 <create_chain+0xee>
			ncl = scl + 1;						/* Test if next cluster is free */
1a001b2e:	1c74      	adds	r4, r6, #1
			if (ncl >= fs->n_fatent) ncl = 2;
1a001b30:	69fb      	ldr	r3, [r7, #28]
1a001b32:	42a3      	cmp	r3, r4
1a001b34:	d800      	bhi.n	1a001b38 <create_chain+0x104>
1a001b36:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
1a001b38:	4621      	mov	r1, r4
1a001b3a:	4640      	mov	r0, r8
1a001b3c:	f7ff fe67 	bl	1a00180e <get_fat>
1a001b40:	4605      	mov	r5, r0
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
1a001b42:	2801      	cmp	r0, #1
1a001b44:	d050      	beq.n	1a001be8 <create_chain+0x1b4>
1a001b46:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001b4a:	d04d      	beq.n	1a001be8 <create_chain+0x1b4>
			if (cs != 0) {						/* Not free? */
1a001b4c:	b138      	cbz	r0, 1a001b5e <create_chain+0x12a>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
1a001b4e:	697b      	ldr	r3, [r7, #20]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
1a001b50:	2b01      	cmp	r3, #1
1a001b52:	d996      	bls.n	1a001a82 <create_chain+0x4e>
1a001b54:	69fa      	ldr	r2, [r7, #28]
1a001b56:	429a      	cmp	r2, r3
1a001b58:	d993      	bls.n	1a001a82 <create_chain+0x4e>
1a001b5a:	461e      	mov	r6, r3
1a001b5c:	e791      	b.n	1a001a82 <create_chain+0x4e>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
1a001b5e:	2c00      	cmp	r4, #0
1a001b60:	d08f      	beq.n	1a001a82 <create_chain+0x4e>
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
1a001b62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001b66:	4621      	mov	r1, r4
1a001b68:	4638      	mov	r0, r7
1a001b6a:	f7ff fd90 	bl	1a00168e <put_fat>
		if (res == FR_OK && clst != 0) {
1a001b6e:	4603      	mov	r3, r0
1a001b70:	b910      	cbnz	r0, 1a001b78 <create_chain+0x144>
1a001b72:	f1b9 0f00 	cmp.w	r9, #0
1a001b76:	d124      	bne.n	1a001bc2 <create_chain+0x18e>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
1a001b78:	bb73      	cbnz	r3, 1a001bd8 <create_chain+0x1a4>
		fs->last_clst = ncl;
1a001b7a:	617c      	str	r4, [r7, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
1a001b7c:	69ba      	ldr	r2, [r7, #24]
1a001b7e:	69fb      	ldr	r3, [r7, #28]
1a001b80:	3b02      	subs	r3, #2
1a001b82:	429a      	cmp	r2, r3
1a001b84:	d801      	bhi.n	1a001b8a <create_chain+0x156>
1a001b86:	3a01      	subs	r2, #1
1a001b88:	61ba      	str	r2, [r7, #24]
		fs->fsi_flag |= 1;
1a001b8a:	793b      	ldrb	r3, [r7, #4]
1a001b8c:	f043 0301 	orr.w	r3, r3, #1
1a001b90:	713b      	strb	r3, [r7, #4]
1a001b92:	4625      	mov	r5, r4
1a001b94:	e028      	b.n	1a001be8 <create_chain+0x1b4>
				cs = get_fat(obj, ncl);			/* Get the cluster status */
1a001b96:	4621      	mov	r1, r4
1a001b98:	4640      	mov	r0, r8
1a001b9a:	f7ff fe38 	bl	1a00180e <get_fat>
				if (cs == 0) break;				/* Found a free cluster? */
1a001b9e:	4605      	mov	r5, r0
1a001ba0:	2800      	cmp	r0, #0
1a001ba2:	d0de      	beq.n	1a001b62 <create_chain+0x12e>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
1a001ba4:	2801      	cmp	r0, #1
1a001ba6:	d01f      	beq.n	1a001be8 <create_chain+0x1b4>
1a001ba8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001bac:	d01c      	beq.n	1a001be8 <create_chain+0x1b4>
				if (ncl == scl) return 0;		/* No free cluster found? */
1a001bae:	42b4      	cmp	r4, r6
1a001bb0:	d024      	beq.n	1a001bfc <create_chain+0x1c8>
				ncl++;							/* Next cluster */
1a001bb2:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
1a001bb4:	69fb      	ldr	r3, [r7, #28]
1a001bb6:	42a3      	cmp	r3, r4
1a001bb8:	d8ed      	bhi.n	1a001b96 <create_chain+0x162>
					if (ncl > scl) return 0;	/* No free cluster found? */
1a001bba:	2e01      	cmp	r6, #1
1a001bbc:	d91c      	bls.n	1a001bf8 <create_chain+0x1c4>
					ncl = 2;
1a001bbe:	2402      	movs	r4, #2
1a001bc0:	e7e9      	b.n	1a001b96 <create_chain+0x162>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
1a001bc2:	4622      	mov	r2, r4
1a001bc4:	4649      	mov	r1, r9
1a001bc6:	4638      	mov	r0, r7
1a001bc8:	f7ff fd61 	bl	1a00168e <put_fat>
1a001bcc:	4603      	mov	r3, r0
1a001bce:	e7d3      	b.n	1a001b78 <create_chain+0x144>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1a001bd0:	462c      	mov	r4, r5
1a001bd2:	e7d1      	b.n	1a001b78 <create_chain+0x144>
1a001bd4:	462c      	mov	r4, r5
1a001bd6:	e7cf      	b.n	1a001b78 <create_chain+0x144>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
1a001bd8:	2b01      	cmp	r3, #1
1a001bda:	d001      	beq.n	1a001be0 <create_chain+0x1ac>
1a001bdc:	2501      	movs	r5, #1
1a001bde:	e003      	b.n	1a001be8 <create_chain+0x1b4>
1a001be0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a001be4:	e000      	b.n	1a001be8 <create_chain+0x1b4>
		if (cs < 2) return 1;				/* Test for insanity */
1a001be6:	2501      	movs	r5, #1
}
1a001be8:	4628      	mov	r0, r5
1a001bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (res == FR_INT_ERR) return 1;
1a001bee:	2501      	movs	r5, #1
1a001bf0:	e7fa      	b.n	1a001be8 <create_chain+0x1b4>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
1a001bf2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a001bf6:	e7f7      	b.n	1a001be8 <create_chain+0x1b4>
					if (ncl > scl) return 0;	/* No free cluster found? */
1a001bf8:	2500      	movs	r5, #0
1a001bfa:	e7f5      	b.n	1a001be8 <create_chain+0x1b4>
				if (ncl == scl) return 0;		/* No free cluster found? */
1a001bfc:	2500      	movs	r5, #0
1a001bfe:	e7f3      	b.n	1a001be8 <create_chain+0x1b4>

1a001c00 <remove_chain>:
{
1a001c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
1a001c04:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
1a001c06:	2901      	cmp	r1, #1
1a001c08:	f240 8087 	bls.w	1a001d1a <remove_chain+0x11a>
1a001c0c:	4607      	mov	r7, r0
1a001c0e:	460e      	mov	r6, r1
1a001c10:	4691      	mov	r9, r2
1a001c12:	69e3      	ldr	r3, [r4, #28]
1a001c14:	428b      	cmp	r3, r1
1a001c16:	f240 8082 	bls.w	1a001d1e <remove_chain+0x11e>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
1a001c1a:	b172      	cbz	r2, 1a001c3a <remove_chain+0x3a>
1a001c1c:	7823      	ldrb	r3, [r4, #0]
1a001c1e:	2b04      	cmp	r3, #4
1a001c20:	d102      	bne.n	1a001c28 <remove_chain+0x28>
1a001c22:	79c3      	ldrb	r3, [r0, #7]
1a001c24:	2b02      	cmp	r3, #2
1a001c26:	d008      	beq.n	1a001c3a <remove_chain+0x3a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
1a001c28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001c2c:	4649      	mov	r1, r9
1a001c2e:	4620      	mov	r0, r4
1a001c30:	f7ff fd2d 	bl	1a00168e <put_fat>
		if (res != FR_OK) return res;
1a001c34:	4603      	mov	r3, r0
1a001c36:	2800      	cmp	r0, #0
1a001c38:	d172      	bne.n	1a001d20 <remove_chain+0x120>
{
1a001c3a:	46b0      	mov	r8, r6
1a001c3c:	e012      	b.n	1a001c64 <remove_chain+0x64>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
1a001c3e:	2200      	movs	r2, #0
1a001c40:	4631      	mov	r1, r6
1a001c42:	4620      	mov	r0, r4
1a001c44:	f7ff fd23 	bl	1a00168e <put_fat>
			if (res != FR_OK) return res;
1a001c48:	4603      	mov	r3, r0
1a001c4a:	b1c8      	cbz	r0, 1a001c80 <remove_chain+0x80>
1a001c4c:	e068      	b.n	1a001d20 <remove_chain+0x120>
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
1a001c4e:	1c73      	adds	r3, r6, #1
1a001c50:	42ab      	cmp	r3, r5
1a001c52:	d003      	beq.n	1a001c5c <remove_chain+0x5c>
			if (fs->fs_type == FS_EXFAT) {
1a001c54:	7823      	ldrb	r3, [r4, #0]
1a001c56:	2b04      	cmp	r3, #4
1a001c58:	d01e      	beq.n	1a001c98 <remove_chain+0x98>
			scl = ecl = nxt;
1a001c5a:	46a8      	mov	r8, r5
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
1a001c5c:	69e3      	ldr	r3, [r4, #28]
		clst = nxt;					/* Next cluster */
1a001c5e:	462e      	mov	r6, r5
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
1a001c60:	42ab      	cmp	r3, r5
1a001c62:	d925      	bls.n	1a001cb0 <remove_chain+0xb0>
		nxt = get_fat(obj, clst);			/* Get cluster status */
1a001c64:	4631      	mov	r1, r6
1a001c66:	4638      	mov	r0, r7
1a001c68:	f7ff fdd1 	bl	1a00180e <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
1a001c6c:	4605      	mov	r5, r0
1a001c6e:	b1f8      	cbz	r0, 1a001cb0 <remove_chain+0xb0>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
1a001c70:	2801      	cmp	r0, #1
1a001c72:	d058      	beq.n	1a001d26 <remove_chain+0x126>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
1a001c74:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001c78:	d057      	beq.n	1a001d2a <remove_chain+0x12a>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1a001c7a:	7823      	ldrb	r3, [r4, #0]
1a001c7c:	2b04      	cmp	r3, #4
1a001c7e:	d1de      	bne.n	1a001c3e <remove_chain+0x3e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
1a001c80:	69a2      	ldr	r2, [r4, #24]
1a001c82:	69e3      	ldr	r3, [r4, #28]
1a001c84:	3b02      	subs	r3, #2
1a001c86:	429a      	cmp	r2, r3
1a001c88:	d2e1      	bcs.n	1a001c4e <remove_chain+0x4e>
			fs->free_clst++;
1a001c8a:	3201      	adds	r2, #1
1a001c8c:	61a2      	str	r2, [r4, #24]
			fs->fsi_flag |= 1;
1a001c8e:	7923      	ldrb	r3, [r4, #4]
1a001c90:	f043 0301 	orr.w	r3, r3, #1
1a001c94:	7123      	strb	r3, [r4, #4]
1a001c96:	e7da      	b.n	1a001c4e <remove_chain+0x4e>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
1a001c98:	eba6 0208 	sub.w	r2, r6, r8
1a001c9c:	2300      	movs	r3, #0
1a001c9e:	3201      	adds	r2, #1
1a001ca0:	4641      	mov	r1, r8
1a001ca2:	4620      	mov	r0, r4
1a001ca4:	f7ff fcb7 	bl	1a001616 <change_bitmap>
				if (res != FR_OK) return res;
1a001ca8:	4603      	mov	r3, r0
1a001caa:	bbc8      	cbnz	r0, 1a001d20 <remove_chain+0x120>
			scl = ecl = nxt;
1a001cac:	46a8      	mov	r8, r5
1a001cae:	e7d5      	b.n	1a001c5c <remove_chain+0x5c>
	if (fs->fs_type == FS_EXFAT) {
1a001cb0:	7823      	ldrb	r3, [r4, #0]
1a001cb2:	2b04      	cmp	r3, #4
1a001cb4:	d001      	beq.n	1a001cba <remove_chain+0xba>
	return FR_OK;
1a001cb6:	2300      	movs	r3, #0
1a001cb8:	e032      	b.n	1a001d20 <remove_chain+0x120>
		if (pclst == 0) {	/* Has the entire chain been removed? */
1a001cba:	f1b9 0f00 	cmp.w	r9, #0
1a001cbe:	d012      	beq.n	1a001ce6 <remove_chain+0xe6>
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
1a001cc0:	79fb      	ldrb	r3, [r7, #7]
1a001cc2:	b9db      	cbnz	r3, 1a001cfc <remove_chain+0xfc>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
1a001cc4:	68bc      	ldr	r4, [r7, #8]
				while (clst != pclst) {
1a001cc6:	454c      	cmp	r4, r9
1a001cc8:	d010      	beq.n	1a001cec <remove_chain+0xec>
					nxt = get_fat(obj, clst);
1a001cca:	4621      	mov	r1, r4
1a001ccc:	4638      	mov	r0, r7
1a001cce:	f7ff fd9e 	bl	1a00180e <get_fat>
					if (nxt < 2) return FR_INT_ERR;
1a001cd2:	2801      	cmp	r0, #1
1a001cd4:	d92b      	bls.n	1a001d2e <remove_chain+0x12e>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
1a001cd6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001cda:	d02a      	beq.n	1a001d32 <remove_chain+0x132>
					if (nxt != clst + 1) break;	/* Not contiguous? */
1a001cdc:	1c63      	adds	r3, r4, #1
1a001cde:	4283      	cmp	r3, r0
1a001ce0:	d104      	bne.n	1a001cec <remove_chain+0xec>
					clst++;
1a001ce2:	461c      	mov	r4, r3
1a001ce4:	e7ef      	b.n	1a001cc6 <remove_chain+0xc6>
			obj->stat = 0;		/* Change the chain status 'initial' */
1a001ce6:	2300      	movs	r3, #0
1a001ce8:	71fb      	strb	r3, [r7, #7]
1a001cea:	e019      	b.n	1a001d20 <remove_chain+0x120>
				if (clst == pclst) {	/* Has the chain got contiguous again? */
1a001cec:	454c      	cmp	r4, r9
1a001cee:	d001      	beq.n	1a001cf4 <remove_chain+0xf4>
	return FR_OK;
1a001cf0:	2300      	movs	r3, #0
1a001cf2:	e015      	b.n	1a001d20 <remove_chain+0x120>
					obj->stat = 2;		/* Change the chain status 'contiguous' */
1a001cf4:	2302      	movs	r3, #2
1a001cf6:	71fb      	strb	r3, [r7, #7]
	return FR_OK;
1a001cf8:	2300      	movs	r3, #0
1a001cfa:	e011      	b.n	1a001d20 <remove_chain+0x120>
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
1a001cfc:	2b03      	cmp	r3, #3
1a001cfe:	d001      	beq.n	1a001d04 <remove_chain+0x104>
	return FR_OK;
1a001d00:	2300      	movs	r3, #0
1a001d02:	e00d      	b.n	1a001d20 <remove_chain+0x120>
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
1a001d04:	68bb      	ldr	r3, [r7, #8]
1a001d06:	454b      	cmp	r3, r9
1a001d08:	d815      	bhi.n	1a001d36 <remove_chain+0x136>
1a001d0a:	69ba      	ldr	r2, [r7, #24]
1a001d0c:	4413      	add	r3, r2
1a001d0e:	454b      	cmp	r3, r9
1a001d10:	d313      	bcc.n	1a001d3a <remove_chain+0x13a>
					obj->stat = 2;	/* Change the chain status 'contiguous' */
1a001d12:	2302      	movs	r3, #2
1a001d14:	71fb      	strb	r3, [r7, #7]
	return FR_OK;
1a001d16:	2300      	movs	r3, #0
1a001d18:	e002      	b.n	1a001d20 <remove_chain+0x120>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
1a001d1a:	2302      	movs	r3, #2
1a001d1c:	e000      	b.n	1a001d20 <remove_chain+0x120>
1a001d1e:	2302      	movs	r3, #2
}
1a001d20:	4618      	mov	r0, r3
1a001d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
1a001d26:	2302      	movs	r3, #2
1a001d28:	e7fa      	b.n	1a001d20 <remove_chain+0x120>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
1a001d2a:	2301      	movs	r3, #1
1a001d2c:	e7f8      	b.n	1a001d20 <remove_chain+0x120>
					if (nxt < 2) return FR_INT_ERR;
1a001d2e:	2302      	movs	r3, #2
1a001d30:	e7f6      	b.n	1a001d20 <remove_chain+0x120>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
1a001d32:	2301      	movs	r3, #1
1a001d34:	e7f4      	b.n	1a001d20 <remove_chain+0x120>
	return FR_OK;
1a001d36:	2300      	movs	r3, #0
1a001d38:	e7f2      	b.n	1a001d20 <remove_chain+0x120>
1a001d3a:	2300      	movs	r3, #0
1a001d3c:	e7f0      	b.n	1a001d20 <remove_chain+0x120>

1a001d3e <dir_clear>:
{
1a001d3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001d40:	4605      	mov	r5, r0
1a001d42:	460c      	mov	r4, r1
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
1a001d44:	f7ff f946 	bl	1a000fd4 <sync_window>
1a001d48:	b108      	cbz	r0, 1a001d4e <dir_clear+0x10>
1a001d4a:	2001      	movs	r0, #1
}
1a001d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sect = clst2sect(fs, clst);		/* Top of the cluster */
1a001d4e:	4621      	mov	r1, r4
1a001d50:	4628      	mov	r0, r5
1a001d52:	f7fe ff7b 	bl	1a000c4c <clst2sect>
1a001d56:	4607      	mov	r7, r0
	fs->winsect = sect;				/* Set window to top of the cluster */
1a001d58:	6368      	str	r0, [r5, #52]	; 0x34
	mem_set(fs->win, 0, SS(fs));	/* Clear window buffer */
1a001d5a:	f105 0638 	add.w	r6, r5, #56	; 0x38
1a001d5e:	f44f 7200 	mov.w	r2, #512	; 0x200
1a001d62:	2100      	movs	r1, #0
1a001d64:	4630      	mov	r0, r6
1a001d66:	f7fe fef3 	bl	1a000b50 <mem_set>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
1a001d6a:	2400      	movs	r4, #0
1a001d6c:	e000      	b.n	1a001d70 <dir_clear+0x32>
1a001d6e:	3401      	adds	r4, #1
1a001d70:	896b      	ldrh	r3, [r5, #10]
1a001d72:	42a3      	cmp	r3, r4
1a001d74:	d907      	bls.n	1a001d86 <dir_clear+0x48>
1a001d76:	2301      	movs	r3, #1
1a001d78:	19e2      	adds	r2, r4, r7
1a001d7a:	4631      	mov	r1, r6
1a001d7c:	7868      	ldrb	r0, [r5, #1]
1a001d7e:	f001 fe77 	bl	1a003a70 <disk_write>
1a001d82:	2800      	cmp	r0, #0
1a001d84:	d0f3      	beq.n	1a001d6e <dir_clear+0x30>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
1a001d86:	8968      	ldrh	r0, [r5, #10]
1a001d88:	1b00      	subs	r0, r0, r4
1a001d8a:	bf18      	it	ne
1a001d8c:	2001      	movne	r0, #1
1a001d8e:	e7dd      	b.n	1a001d4c <dir_clear+0xe>

1a001d90 <dir_next>:
{
1a001d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
1a001d94:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
1a001d96:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
1a001d98:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a001d9a:	2b00      	cmp	r3, #0
1a001d9c:	d056      	beq.n	1a001e4c <dir_next+0xbc>
1a001d9e:	3520      	adds	r5, #32
1a001da0:	7832      	ldrb	r2, [r6, #0]
1a001da2:	2a04      	cmp	r2, #4
1a001da4:	d018      	beq.n	1a001dd8 <dir_next+0x48>
1a001da6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
1a001daa:	42aa      	cmp	r2, r5
1a001dac:	d950      	bls.n	1a001e50 <dir_next+0xc0>
1a001dae:	4688      	mov	r8, r1
1a001db0:	4604      	mov	r4, r0
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
1a001db2:	f3c5 0708 	ubfx	r7, r5, #0, #9
1a001db6:	b93f      	cbnz	r7, 1a001dc8 <dir_next+0x38>
		dp->sect++;				/* Next sector */
1a001db8:	3301      	adds	r3, #1
1a001dba:	6383      	str	r3, [r0, #56]	; 0x38
		if (dp->clust == 0) {	/* Static table */
1a001dbc:	6b41      	ldr	r1, [r0, #52]	; 0x34
1a001dbe:	b991      	cbnz	r1, 1a001de6 <dir_next+0x56>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
1a001dc0:	8933      	ldrh	r3, [r6, #8]
1a001dc2:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
1a001dc6:	d90a      	bls.n	1a001dde <dir_next+0x4e>
	dp->dptr = ofs;						/* Current entry */
1a001dc8:	6325      	str	r5, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
1a001dca:	f106 0338 	add.w	r3, r6, #56	; 0x38
1a001dce:	443b      	add	r3, r7
1a001dd0:	63e3      	str	r3, [r4, #60]	; 0x3c
	return FR_OK;
1a001dd2:	2000      	movs	r0, #0
}
1a001dd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
1a001dd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001ddc:	e7e5      	b.n	1a001daa <dir_next+0x1a>
				dp->sect = 0; return FR_NO_FILE;
1a001dde:	2300      	movs	r3, #0
1a001de0:	6383      	str	r3, [r0, #56]	; 0x38
1a001de2:	2004      	movs	r0, #4
1a001de4:	e7f6      	b.n	1a001dd4 <dir_next+0x44>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
1a001de6:	8973      	ldrh	r3, [r6, #10]
1a001de8:	3b01      	subs	r3, #1
1a001dea:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
1a001dee:	d1eb      	bne.n	1a001dc8 <dir_next+0x38>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
1a001df0:	f7ff fd0d 	bl	1a00180e <get_fat>
1a001df4:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
1a001df6:	2801      	cmp	r0, #1
1a001df8:	d92c      	bls.n	1a001e54 <dir_next+0xc4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a001dfa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001dfe:	d02b      	beq.n	1a001e58 <dir_next+0xc8>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
1a001e00:	69f3      	ldr	r3, [r6, #28]
1a001e02:	4283      	cmp	r3, r0
1a001e04:	d816      	bhi.n	1a001e34 <dir_next+0xa4>
					if (!stretch) {								/* If no stretch, report EOT */
1a001e06:	f1b8 0f00 	cmp.w	r8, #0
1a001e0a:	d01b      	beq.n	1a001e44 <dir_next+0xb4>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
1a001e0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a001e0e:	4620      	mov	r0, r4
1a001e10:	f7ff fe10 	bl	1a001a34 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
1a001e14:	4681      	mov	r9, r0
1a001e16:	b308      	cbz	r0, 1a001e5c <dir_next+0xcc>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
1a001e18:	2801      	cmp	r0, #1
1a001e1a:	d021      	beq.n	1a001e60 <dir_next+0xd0>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a001e1c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001e20:	d020      	beq.n	1a001e64 <dir_next+0xd4>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
1a001e22:	4601      	mov	r1, r0
1a001e24:	4630      	mov	r0, r6
1a001e26:	f7ff ff8a 	bl	1a001d3e <dir_clear>
1a001e2a:	b9e8      	cbnz	r0, 1a001e68 <dir_next+0xd8>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
1a001e2c:	79e3      	ldrb	r3, [r4, #7]
1a001e2e:	f043 0304 	orr.w	r3, r3, #4
1a001e32:	71e3      	strb	r3, [r4, #7]
				dp->clust = clst;		/* Initialize data for new cluster */
1a001e34:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
				dp->sect = clst2sect(fs, clst);
1a001e38:	4649      	mov	r1, r9
1a001e3a:	4630      	mov	r0, r6
1a001e3c:	f7fe ff06 	bl	1a000c4c <clst2sect>
1a001e40:	63a0      	str	r0, [r4, #56]	; 0x38
1a001e42:	e7c1      	b.n	1a001dc8 <dir_next+0x38>
						dp->sect = 0; return FR_NO_FILE;
1a001e44:	2300      	movs	r3, #0
1a001e46:	63a3      	str	r3, [r4, #56]	; 0x38
1a001e48:	2004      	movs	r0, #4
1a001e4a:	e7c3      	b.n	1a001dd4 <dir_next+0x44>
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
1a001e4c:	2004      	movs	r0, #4
1a001e4e:	e7c1      	b.n	1a001dd4 <dir_next+0x44>
1a001e50:	2004      	movs	r0, #4
1a001e52:	e7bf      	b.n	1a001dd4 <dir_next+0x44>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
1a001e54:	2002      	movs	r0, #2
1a001e56:	e7bd      	b.n	1a001dd4 <dir_next+0x44>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a001e58:	2001      	movs	r0, #1
1a001e5a:	e7bb      	b.n	1a001dd4 <dir_next+0x44>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
1a001e5c:	2007      	movs	r0, #7
1a001e5e:	e7b9      	b.n	1a001dd4 <dir_next+0x44>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
1a001e60:	2002      	movs	r0, #2
1a001e62:	e7b7      	b.n	1a001dd4 <dir_next+0x44>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a001e64:	2001      	movs	r0, #1
1a001e66:	e7b5      	b.n	1a001dd4 <dir_next+0x44>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
1a001e68:	2001      	movs	r0, #1
1a001e6a:	e7b3      	b.n	1a001dd4 <dir_next+0x44>

1a001e6c <load_xdir>:
{
1a001e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001e70:	4604      	mov	r4, r0
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
1a001e72:	6800      	ldr	r0, [r0, #0]
1a001e74:	6906      	ldr	r6, [r0, #16]
	res = move_window(dp->obj.fs, dp->sect);
1a001e76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a001e78:	f7ff f8d4 	bl	1a001024 <move_window>
	if (res != FR_OK) return res;
1a001e7c:	4605      	mov	r5, r0
1a001e7e:	b920      	cbnz	r0, 1a001e8a <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;	/* Invalid order */
1a001e80:	6be1      	ldr	r1, [r4, #60]	; 0x3c
1a001e82:	780b      	ldrb	r3, [r1, #0]
1a001e84:	2b85      	cmp	r3, #133	; 0x85
1a001e86:	d003      	beq.n	1a001e90 <load_xdir+0x24>
1a001e88:	2502      	movs	r5, #2
}
1a001e8a:	4628      	mov	r0, r5
1a001e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mem_cpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
1a001e90:	2220      	movs	r2, #32
1a001e92:	4630      	mov	r0, r6
1a001e94:	f7fe fe53 	bl	1a000b3e <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
1a001e98:	7877      	ldrb	r7, [r6, #1]
1a001e9a:	3701      	adds	r7, #1
1a001e9c:	017f      	lsls	r7, r7, #5
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
1a001e9e:	f1a7 0360 	sub.w	r3, r7, #96	; 0x60
1a001ea2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a001ea6:	d855      	bhi.n	1a001f54 <load_xdir+0xe8>
	res = dir_next(dp, 0);
1a001ea8:	2100      	movs	r1, #0
1a001eaa:	4620      	mov	r0, r4
1a001eac:	f7ff ff70 	bl	1a001d90 <dir_next>
1a001eb0:	4605      	mov	r5, r0
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
1a001eb2:	2804      	cmp	r0, #4
1a001eb4:	d050      	beq.n	1a001f58 <load_xdir+0xec>
	if (res != FR_OK) return res;
1a001eb6:	2800      	cmp	r0, #0
1a001eb8:	d1e7      	bne.n	1a001e8a <load_xdir+0x1e>
	res = move_window(dp->obj.fs, dp->sect);
1a001eba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a001ebc:	6820      	ldr	r0, [r4, #0]
1a001ebe:	f7ff f8b1 	bl	1a001024 <move_window>
	if (res != FR_OK) return res;
1a001ec2:	4605      	mov	r5, r0
1a001ec4:	2800      	cmp	r0, #0
1a001ec6:	d1e0      	bne.n	1a001e8a <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;	/* Invalid order */
1a001ec8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
1a001eca:	780b      	ldrb	r3, [r1, #0]
1a001ecc:	2bc0      	cmp	r3, #192	; 0xc0
1a001ece:	d001      	beq.n	1a001ed4 <load_xdir+0x68>
1a001ed0:	2502      	movs	r5, #2
1a001ed2:	e7da      	b.n	1a001e8a <load_xdir+0x1e>
	mem_cpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
1a001ed4:	2220      	movs	r2, #32
1a001ed6:	18b0      	adds	r0, r6, r2
1a001ed8:	f7fe fe31 	bl	1a000b3e <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
1a001edc:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
1a001ee0:	332c      	adds	r3, #44	; 0x2c
1a001ee2:	4a21      	ldr	r2, [pc, #132]	; (1a001f68 <load_xdir+0xfc>)
1a001ee4:	fba2 2303 	umull	r2, r3, r2, r3
1a001ee8:	08db      	lsrs	r3, r3, #3
1a001eea:	ebb7 1f43 	cmp.w	r7, r3, lsl #5
1a001eee:	d335      	bcc.n	1a001f5c <load_xdir+0xf0>
	i = 2 * SZDIRE;	/* C1 offset to load */
1a001ef0:	f04f 0840 	mov.w	r8, #64	; 0x40
1a001ef4:	e003      	b.n	1a001efe <load_xdir+0x92>
	} while ((i += SZDIRE) < sz_ent);
1a001ef6:	f108 0820 	add.w	r8, r8, #32
1a001efa:	4547      	cmp	r7, r8
1a001efc:	d91c      	bls.n	1a001f38 <load_xdir+0xcc>
		res = dir_next(dp, 0);
1a001efe:	2100      	movs	r1, #0
1a001f00:	4620      	mov	r0, r4
1a001f02:	f7ff ff45 	bl	1a001d90 <dir_next>
1a001f06:	4605      	mov	r5, r0
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
1a001f08:	2804      	cmp	r0, #4
1a001f0a:	d029      	beq.n	1a001f60 <load_xdir+0xf4>
		if (res != FR_OK) return res;
1a001f0c:	2800      	cmp	r0, #0
1a001f0e:	d1bc      	bne.n	1a001e8a <load_xdir+0x1e>
		res = move_window(dp->obj.fs, dp->sect);
1a001f10:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a001f12:	6820      	ldr	r0, [r4, #0]
1a001f14:	f7ff f886 	bl	1a001024 <move_window>
		if (res != FR_OK) return res;
1a001f18:	4605      	mov	r5, r0
1a001f1a:	2800      	cmp	r0, #0
1a001f1c:	d1b5      	bne.n	1a001e8a <load_xdir+0x1e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;	/* Invalid order */
1a001f1e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
1a001f20:	780b      	ldrb	r3, [r1, #0]
1a001f22:	2bc1      	cmp	r3, #193	; 0xc1
1a001f24:	d11e      	bne.n	1a001f64 <load_xdir+0xf8>
		if (i < MAXDIRB(FF_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
1a001f26:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
1a001f2a:	d2e4      	bcs.n	1a001ef6 <load_xdir+0x8a>
1a001f2c:	2220      	movs	r2, #32
1a001f2e:	eb06 0008 	add.w	r0, r6, r8
1a001f32:	f7fe fe04 	bl	1a000b3e <mem_cpy>
1a001f36:	e7de      	b.n	1a001ef6 <load_xdir+0x8a>
	if (i <= MAXDIRB(FF_MAX_LFN)) {
1a001f38:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
1a001f3c:	d8a5      	bhi.n	1a001e8a <load_xdir+0x1e>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
1a001f3e:	4630      	mov	r0, r6
1a001f40:	f7fe ff9c 	bl	1a000e7c <xdir_sum>
1a001f44:	4604      	mov	r4, r0
1a001f46:	1cb0      	adds	r0, r6, #2
1a001f48:	f7fe fd74 	bl	1a000a34 <ld_word>
1a001f4c:	4284      	cmp	r4, r0
1a001f4e:	d09c      	beq.n	1a001e8a <load_xdir+0x1e>
1a001f50:	2502      	movs	r5, #2
1a001f52:	e79a      	b.n	1a001e8a <load_xdir+0x1e>
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
1a001f54:	2502      	movs	r5, #2
1a001f56:	e798      	b.n	1a001e8a <load_xdir+0x1e>
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
1a001f58:	2502      	movs	r5, #2
1a001f5a:	e796      	b.n	1a001e8a <load_xdir+0x1e>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
1a001f5c:	2502      	movs	r5, #2
1a001f5e:	e794      	b.n	1a001e8a <load_xdir+0x1e>
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
1a001f60:	2502      	movs	r5, #2
1a001f62:	e792      	b.n	1a001e8a <load_xdir+0x1e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;	/* Invalid order */
1a001f64:	2502      	movs	r5, #2
1a001f66:	e790      	b.n	1a001e8a <load_xdir+0x1e>
1a001f68:	88888889 	.word	0x88888889

1a001f6c <load_obj_xdir>:
{
1a001f6c:	b510      	push	{r4, lr}
1a001f6e:	4604      	mov	r4, r0
	dp->obj.fs = obj->fs;
1a001f70:	680b      	ldr	r3, [r1, #0]
1a001f72:	6003      	str	r3, [r0, #0]
	dp->obj.sclust = obj->c_scl;
1a001f74:	6a0b      	ldr	r3, [r1, #32]
1a001f76:	6083      	str	r3, [r0, #8]
	dp->obj.stat = (BYTE)obj->c_size;
1a001f78:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
1a001f7c:	71c3      	strb	r3, [r0, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
1a001f7e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
1a001f80:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001f84:	2200      	movs	r2, #0
1a001f86:	6103      	str	r3, [r0, #16]
1a001f88:	6142      	str	r2, [r0, #20]
	dp->obj.n_frag = 0;
1a001f8a:	61c2      	str	r2, [r0, #28]
	dp->blk_ofs = obj->c_ofs;
1a001f8c:	6a89      	ldr	r1, [r1, #40]	; 0x28
1a001f8e:	64c1      	str	r1, [r0, #76]	; 0x4c
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
1a001f90:	f7ff fcf6 	bl	1a001980 <dir_sdi>
	if (res == FR_OK) {
1a001f94:	4603      	mov	r3, r0
1a001f96:	b108      	cbz	r0, 1a001f9c <load_obj_xdir+0x30>
}
1a001f98:	4618      	mov	r0, r3
1a001f9a:	bd10      	pop	{r4, pc}
		res = load_xdir(dp);		/* Load the object's entry block */
1a001f9c:	4620      	mov	r0, r4
1a001f9e:	f7ff ff65 	bl	1a001e6c <load_xdir>
1a001fa2:	4603      	mov	r3, r0
1a001fa4:	e7f8      	b.n	1a001f98 <load_obj_xdir+0x2c>

1a001fa6 <dir_read>:
{
1a001fa6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001faa:	4604      	mov	r4, r0
1a001fac:	4688      	mov	r8, r1
	FATFS *fs = dp->obj.fs;
1a001fae:	6806      	ldr	r6, [r0, #0]
	BYTE ord = 0xFF, sum = 0xFF;
1a001fb0:	f04f 09ff 	mov.w	r9, #255	; 0xff
1a001fb4:	464f      	mov	r7, r9
	FRESULT res = FR_NO_FILE;
1a001fb6:	2504      	movs	r5, #4
	while (dp->sect) {
1a001fb8:	e008      	b.n	1a001fcc <dir_read+0x26>
				if (c == 0x85) {		/* Start of the file entry block? */
1a001fba:	2b85      	cmp	r3, #133	; 0x85
1a001fbc:	d028      	beq.n	1a002010 <dir_read+0x6a>
		res = dir_next(dp, 0);		/* Next entry */
1a001fbe:	2100      	movs	r1, #0
1a001fc0:	4620      	mov	r0, r4
1a001fc2:	f7ff fee5 	bl	1a001d90 <dir_next>
		if (res != FR_OK) break;
1a001fc6:	4605      	mov	r5, r0
1a001fc8:	2800      	cmp	r0, #0
1a001fca:	d15b      	bne.n	1a002084 <dir_read+0xde>
	while (dp->sect) {
1a001fcc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a001fce:	2900      	cmp	r1, #0
1a001fd0:	d058      	beq.n	1a002084 <dir_read+0xde>
		res = move_window(fs, dp->sect);
1a001fd2:	4630      	mov	r0, r6
1a001fd4:	f7ff f826 	bl	1a001024 <move_window>
		if (res != FR_OK) break;
1a001fd8:	4605      	mov	r5, r0
1a001fda:	2800      	cmp	r0, #0
1a001fdc:	d152      	bne.n	1a002084 <dir_read+0xde>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
1a001fde:	6be1      	ldr	r1, [r4, #60]	; 0x3c
1a001fe0:	780b      	ldrb	r3, [r1, #0]
		if (c == 0) {
1a001fe2:	2b00      	cmp	r3, #0
1a001fe4:	d04d      	beq.n	1a002082 <dir_read+0xdc>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1a001fe6:	7832      	ldrb	r2, [r6, #0]
1a001fe8:	2a04      	cmp	r2, #4
1a001fea:	d0e6      	beq.n	1a001fba <dir_read+0x14>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
1a001fec:	7aca      	ldrb	r2, [r1, #11]
1a001fee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
1a001ff2:	71a2      	strb	r2, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
1a001ff4:	2be5      	cmp	r3, #229	; 0xe5
1a001ff6:	d03e      	beq.n	1a002076 <dir_read+0xd0>
1a001ff8:	2b2e      	cmp	r3, #46	; 0x2e
1a001ffa:	d03e      	beq.n	1a00207a <dir_read+0xd4>
1a001ffc:	f022 0020 	bic.w	r0, r2, #32
1a002000:	2808      	cmp	r0, #8
1a002002:	bf14      	ite	ne
1a002004:	2000      	movne	r0, #0
1a002006:	2001      	moveq	r0, #1
1a002008:	4540      	cmp	r0, r8
1a00200a:	d00e      	beq.n	1a00202a <dir_read+0x84>
				ord = 0xFF;
1a00200c:	27ff      	movs	r7, #255	; 0xff
1a00200e:	e7d6      	b.n	1a001fbe <dir_read+0x18>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
1a002010:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a002012:	64e3      	str	r3, [r4, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
1a002014:	4620      	mov	r0, r4
1a002016:	f7ff ff29 	bl	1a001e6c <load_xdir>
					if (res == FR_OK) {
1a00201a:	4605      	mov	r5, r0
1a00201c:	bb90      	cbnz	r0, 1a002084 <dir_read+0xde>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
1a00201e:	6933      	ldr	r3, [r6, #16]
1a002020:	791b      	ldrb	r3, [r3, #4]
1a002022:	f003 033f 	and.w	r3, r3, #63	; 0x3f
1a002026:	71a3      	strb	r3, [r4, #6]
1a002028:	e02c      	b.n	1a002084 <dir_read+0xde>
				if (a == AM_LFN) {			/* An LFN entry is found */
1a00202a:	2a0f      	cmp	r2, #15
1a00202c:	d119      	bne.n	1a002062 <dir_read+0xbc>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
1a00202e:	f013 0f40 	tst.w	r3, #64	; 0x40
1a002032:	d006      	beq.n	1a002042 <dir_read+0x9c>
						sum = dp->dir[LDIR_Chksum];
1a002034:	f891 900d 	ldrb.w	r9, [r1, #13]
						c &= (BYTE)~LLEF; ord = c;
1a002038:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
1a00203c:	6b22      	ldr	r2, [r4, #48]	; 0x30
1a00203e:	64e2      	str	r2, [r4, #76]	; 0x4c
						c &= (BYTE)~LLEF; ord = c;
1a002040:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
1a002042:	42bb      	cmp	r3, r7
1a002044:	d001      	beq.n	1a00204a <dir_read+0xa4>
1a002046:	27ff      	movs	r7, #255	; 0xff
1a002048:	e7b9      	b.n	1a001fbe <dir_read+0x18>
1a00204a:	7b4b      	ldrb	r3, [r1, #13]
1a00204c:	454b      	cmp	r3, r9
1a00204e:	d001      	beq.n	1a002054 <dir_read+0xae>
1a002050:	27ff      	movs	r7, #255	; 0xff
1a002052:	e7b4      	b.n	1a001fbe <dir_read+0x18>
1a002054:	68f0      	ldr	r0, [r6, #12]
1a002056:	f7fe fe2b 	bl	1a000cb0 <pick_lfn>
1a00205a:	b180      	cbz	r0, 1a00207e <dir_read+0xd8>
1a00205c:	3f01      	subs	r7, #1
1a00205e:	b2ff      	uxtb	r7, r7
1a002060:	e7ad      	b.n	1a001fbe <dir_read+0x18>
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
1a002062:	b927      	cbnz	r7, 1a00206e <dir_read+0xc8>
1a002064:	4608      	mov	r0, r1
1a002066:	f7fe fefb 	bl	1a000e60 <sum_sfn>
1a00206a:	4548      	cmp	r0, r9
1a00206c:	d00a      	beq.n	1a002084 <dir_read+0xde>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
1a00206e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a002072:	64e3      	str	r3, [r4, #76]	; 0x4c
1a002074:	e006      	b.n	1a002084 <dir_read+0xde>
				ord = 0xFF;
1a002076:	27ff      	movs	r7, #255	; 0xff
1a002078:	e7a1      	b.n	1a001fbe <dir_read+0x18>
1a00207a:	27ff      	movs	r7, #255	; 0xff
1a00207c:	e79f      	b.n	1a001fbe <dir_read+0x18>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
1a00207e:	27ff      	movs	r7, #255	; 0xff
1a002080:	e79d      	b.n	1a001fbe <dir_read+0x18>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
1a002082:	2504      	movs	r5, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
1a002084:	b10d      	cbz	r5, 1a00208a <dir_read+0xe4>
1a002086:	2300      	movs	r3, #0
1a002088:	63a3      	str	r3, [r4, #56]	; 0x38
}
1a00208a:	4628      	mov	r0, r5
1a00208c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a002090 <dir_alloc>:
{
1a002090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a002092:	4604      	mov	r4, r0
1a002094:	460f      	mov	r7, r1
	FATFS *fs = dp->obj.fs;
1a002096:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
1a002098:	2100      	movs	r1, #0
1a00209a:	f7ff fc71 	bl	1a001980 <dir_sdi>
	if (res == FR_OK) {
1a00209e:	4602      	mov	r2, r0
1a0020a0:	bb30      	cbnz	r0, 1a0020f0 <dir_alloc+0x60>
		n = 0;
1a0020a2:	2500      	movs	r5, #0
1a0020a4:	e00e      	b.n	1a0020c4 <dir_alloc+0x34>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
1a0020a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0020a8:	f993 3000 	ldrsb.w	r3, [r3]
1a0020ac:	43db      	mvns	r3, r3
1a0020ae:	0fdb      	lsrs	r3, r3, #31
1a0020b0:	b1e3      	cbz	r3, 1a0020ec <dir_alloc+0x5c>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
1a0020b2:	3501      	adds	r5, #1
1a0020b4:	42bd      	cmp	r5, r7
1a0020b6:	d01b      	beq.n	1a0020f0 <dir_alloc+0x60>
			res = dir_next(dp, 1);
1a0020b8:	2101      	movs	r1, #1
1a0020ba:	4620      	mov	r0, r4
1a0020bc:	f7ff fe68 	bl	1a001d90 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
1a0020c0:	4602      	mov	r2, r0
1a0020c2:	b9a8      	cbnz	r0, 1a0020f0 <dir_alloc+0x60>
			res = move_window(fs, dp->sect);
1a0020c4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a0020c6:	4630      	mov	r0, r6
1a0020c8:	f7fe ffac 	bl	1a001024 <move_window>
			if (res != FR_OK) break;
1a0020cc:	4602      	mov	r2, r0
1a0020ce:	b978      	cbnz	r0, 1a0020f0 <dir_alloc+0x60>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
1a0020d0:	7833      	ldrb	r3, [r6, #0]
1a0020d2:	2b04      	cmp	r3, #4
1a0020d4:	d0e7      	beq.n	1a0020a6 <dir_alloc+0x16>
1a0020d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0020d8:	781b      	ldrb	r3, [r3, #0]
1a0020da:	2be5      	cmp	r3, #229	; 0xe5
1a0020dc:	d002      	beq.n	1a0020e4 <dir_alloc+0x54>
1a0020de:	b91b      	cbnz	r3, 1a0020e8 <dir_alloc+0x58>
1a0020e0:	2301      	movs	r3, #1
1a0020e2:	e7e5      	b.n	1a0020b0 <dir_alloc+0x20>
1a0020e4:	2301      	movs	r3, #1
1a0020e6:	e7e3      	b.n	1a0020b0 <dir_alloc+0x20>
1a0020e8:	2300      	movs	r3, #0
1a0020ea:	e7e1      	b.n	1a0020b0 <dir_alloc+0x20>
				n = 0;					/* Not a blank entry. Restart to search */
1a0020ec:	2500      	movs	r5, #0
1a0020ee:	e7e3      	b.n	1a0020b8 <dir_alloc+0x28>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
1a0020f0:	2a04      	cmp	r2, #4
1a0020f2:	d001      	beq.n	1a0020f8 <dir_alloc+0x68>
}
1a0020f4:	4610      	mov	r0, r2
1a0020f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
1a0020f8:	2207      	movs	r2, #7
1a0020fa:	e7fb      	b.n	1a0020f4 <dir_alloc+0x64>

1a0020fc <store_xdir>:
{
1a0020fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0020fe:	4604      	mov	r4, r0
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
1a002100:	6803      	ldr	r3, [r0, #0]
1a002102:	691e      	ldr	r6, [r3, #16]
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
1a002104:	4630      	mov	r0, r6
1a002106:	f7fe feb9 	bl	1a000e7c <xdir_sum>
1a00210a:	4601      	mov	r1, r0
1a00210c:	1cb0      	adds	r0, r6, #2
1a00210e:	f7fe fcf5 	bl	1a000afc <st_word>
	nent = dirb[XDIR_NumSec] + 1;
1a002112:	7877      	ldrb	r7, [r6, #1]
1a002114:	3701      	adds	r7, #1
	res = dir_sdi(dp, dp->blk_ofs);
1a002116:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
1a002118:	4620      	mov	r0, r4
1a00211a:	f7ff fc31 	bl	1a001980 <dir_sdi>
1a00211e:	4605      	mov	r5, r0
	while (res == FR_OK) {
1a002120:	b9b5      	cbnz	r5, 1a002150 <store_xdir+0x54>
		res = move_window(dp->obj.fs, dp->sect);
1a002122:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a002124:	6820      	ldr	r0, [r4, #0]
1a002126:	f7fe ff7d 	bl	1a001024 <move_window>
		if (res != FR_OK) break;
1a00212a:	4605      	mov	r5, r0
1a00212c:	b980      	cbnz	r0, 1a002150 <store_xdir+0x54>
		mem_cpy(dp->dir, dirb, SZDIRE);
1a00212e:	2220      	movs	r2, #32
1a002130:	4631      	mov	r1, r6
1a002132:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a002134:	f7fe fd03 	bl	1a000b3e <mem_cpy>
		dp->obj.fs->wflag = 1;
1a002138:	6823      	ldr	r3, [r4, #0]
1a00213a:	2201      	movs	r2, #1
1a00213c:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
1a00213e:	3f01      	subs	r7, #1
1a002140:	d006      	beq.n	1a002150 <store_xdir+0x54>
		dirb += SZDIRE;
1a002142:	3620      	adds	r6, #32
		res = dir_next(dp, 0);
1a002144:	2100      	movs	r1, #0
1a002146:	4620      	mov	r0, r4
1a002148:	f7ff fe22 	bl	1a001d90 <dir_next>
1a00214c:	4605      	mov	r5, r0
1a00214e:	e7e7      	b.n	1a002120 <store_xdir+0x24>
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
1a002150:	2d02      	cmp	r5, #2
1a002152:	bf28      	it	cs
1a002154:	2502      	movcs	r5, #2
}
1a002156:	b2e8      	uxtb	r0, r5
1a002158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00215a:	Address 0x000000001a00215a is out of bounds.


1a00215c <create_name>:
{
1a00215c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002160:	b085      	sub	sp, #20
1a002162:	4680      	mov	r8, r0
1a002164:	460f      	mov	r7, r1
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
1a002166:	680b      	ldr	r3, [r1, #0]
1a002168:	9303      	str	r3, [sp, #12]
1a00216a:	6803      	ldr	r3, [r0, #0]
1a00216c:	68dd      	ldr	r5, [r3, #12]
1a00216e:	2400      	movs	r4, #0
1a002170:	e00e      	b.n	1a002190 <create_name+0x34>
		wc = (WCHAR)uc;
1a002172:	b286      	uxth	r6, r0
		if (wc < ' ' || wc == '/' || wc == '\\') break;	/* Break if end of the path or a separator is found */
1a002174:	2e1f      	cmp	r6, #31
1a002176:	d924      	bls.n	1a0021c2 <create_name+0x66>
1a002178:	2e2f      	cmp	r6, #47	; 0x2f
1a00217a:	d022      	beq.n	1a0021c2 <create_name+0x66>
1a00217c:	2e5c      	cmp	r6, #92	; 0x5c
1a00217e:	d020      	beq.n	1a0021c2 <create_name+0x66>
		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
1a002180:	2e7f      	cmp	r6, #127	; 0x7f
1a002182:	d914      	bls.n	1a0021ae <create_name+0x52>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
1a002184:	2cfe      	cmp	r4, #254	; 0xfe
1a002186:	f200 8101 	bhi.w	1a00238c <create_name+0x230>
		lfn[di++] = wc;					/* Store the Unicode character */
1a00218a:	f825 6014 	strh.w	r6, [r5, r4, lsl #1]
1a00218e:	3401      	adds	r4, #1
		uc = tchar2uni(&p);			/* Get a character */
1a002190:	a803      	add	r0, sp, #12
1a002192:	f7fe fcfb 	bl	1a000b8c <tchar2uni>
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
1a002196:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00219a:	f000 80f5 	beq.w	1a002388 <create_name+0x22c>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
1a00219e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
1a0021a2:	d3e6      	bcc.n	1a002172 <create_name+0x16>
1a0021a4:	0c03      	lsrs	r3, r0, #16
1a0021a6:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
1a0021aa:	3401      	adds	r4, #1
1a0021ac:	e7e1      	b.n	1a002172 <create_name+0x16>
		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
1a0021ae:	4631      	mov	r1, r6
1a0021b0:	4878      	ldr	r0, [pc, #480]	; (1a002394 <create_name+0x238>)
1a0021b2:	f7fe fce1 	bl	1a000b78 <chk_chr>
1a0021b6:	2800      	cmp	r0, #0
1a0021b8:	d0e4      	beq.n	1a002184 <create_name+0x28>
1a0021ba:	2006      	movs	r0, #6
1a0021bc:	e08f      	b.n	1a0022de <create_name+0x182>
	while (*p == '/' || *p == '\\') p++;	/* Skip duplicated separators if exist */
1a0021be:	3301      	adds	r3, #1
1a0021c0:	9303      	str	r3, [sp, #12]
1a0021c2:	9b03      	ldr	r3, [sp, #12]
1a0021c4:	781a      	ldrb	r2, [r3, #0]
1a0021c6:	2a2f      	cmp	r2, #47	; 0x2f
1a0021c8:	d0f9      	beq.n	1a0021be <create_name+0x62>
1a0021ca:	2a5c      	cmp	r2, #92	; 0x5c
1a0021cc:	d0f7      	beq.n	1a0021be <create_name+0x62>
	*path = p;							/* Return pointer to the next segment */
1a0021ce:	603b      	str	r3, [r7, #0]
	cf = (wc < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
1a0021d0:	2e1f      	cmp	r6, #31
1a0021d2:	d801      	bhi.n	1a0021d8 <create_name+0x7c>
1a0021d4:	2704      	movs	r7, #4
1a0021d6:	e002      	b.n	1a0021de <create_name+0x82>
1a0021d8:	2700      	movs	r7, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
1a0021da:	e000      	b.n	1a0021de <create_name+0x82>
		di--;
1a0021dc:	3c01      	subs	r4, #1
	while (di) {						/* Snip off trailing spaces and dots if exist */
1a0021de:	b144      	cbz	r4, 1a0021f2 <create_name+0x96>
		wc = lfn[di - 1];
1a0021e0:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
1a0021e4:	3b01      	subs	r3, #1
1a0021e6:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (wc != ' ' && wc != '.') break;
1a0021ea:	2b20      	cmp	r3, #32
1a0021ec:	d0f6      	beq.n	1a0021dc <create_name+0x80>
1a0021ee:	2b2e      	cmp	r3, #46	; 0x2e
1a0021f0:	d0f4      	beq.n	1a0021dc <create_name+0x80>
	lfn[di] = 0;							/* LFN is created into the working buffer */
1a0021f2:	2300      	movs	r3, #0
1a0021f4:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
1a0021f8:	2c00      	cmp	r4, #0
1a0021fa:	f000 80c9 	beq.w	1a002390 <create_name+0x234>
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
1a0021fe:	461e      	mov	r6, r3
1a002200:	e000      	b.n	1a002204 <create_name+0xa8>
1a002202:	3601      	adds	r6, #1
1a002204:	f835 3016 	ldrh.w	r3, [r5, r6, lsl #1]
1a002208:	2b20      	cmp	r3, #32
1a00220a:	d0fa      	beq.n	1a002202 <create_name+0xa6>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
1a00220c:	b90e      	cbnz	r6, 1a002212 <create_name+0xb6>
1a00220e:	2b2e      	cmp	r3, #46	; 0x2e
1a002210:	d101      	bne.n	1a002216 <create_name+0xba>
1a002212:	f047 0703 	orr.w	r7, r7, #3
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
1a002216:	b144      	cbz	r4, 1a00222a <create_name+0xce>
1a002218:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
1a00221c:	3b01      	subs	r3, #1
1a00221e:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
1a002222:	2b2e      	cmp	r3, #46	; 0x2e
1a002224:	d001      	beq.n	1a00222a <create_name+0xce>
1a002226:	3c01      	subs	r4, #1
1a002228:	e7f5      	b.n	1a002216 <create_name+0xba>
	mem_set(dp->fn, ' ', 11);
1a00222a:	220b      	movs	r2, #11
1a00222c:	2120      	movs	r1, #32
1a00222e:	f108 0040 	add.w	r0, r8, #64	; 0x40
1a002232:	f7fe fc8d 	bl	1a000b50 <mem_set>
	i = b = 0; ni = 8;
1a002236:	f04f 0b08 	mov.w	fp, #8
1a00223a:	2300      	movs	r3, #0
1a00223c:	9301      	str	r3, [sp, #4]
1a00223e:	469a      	mov	sl, r3
		wc = lfn[si++];					/* Get an LFN character */
1a002240:	f106 0901 	add.w	r9, r6, #1
1a002244:	f835 6016 	ldrh.w	r6, [r5, r6, lsl #1]
		if (wc == 0) break;				/* Break on end of the LFN */
1a002248:	b346      	cbz	r6, 1a00229c <create_name+0x140>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
1a00224a:	2e20      	cmp	r6, #32
1a00224c:	d019      	beq.n	1a002282 <create_name+0x126>
1a00224e:	2e2e      	cmp	r6, #46	; 0x2e
1a002250:	d015      	beq.n	1a00227e <create_name+0x122>
		if (i >= ni || si == di) {		/* End of field? */
1a002252:	9b01      	ldr	r3, [sp, #4]
1a002254:	455b      	cmp	r3, fp
1a002256:	d218      	bcs.n	1a00228a <create_name+0x12e>
1a002258:	454c      	cmp	r4, r9
1a00225a:	d016      	beq.n	1a00228a <create_name+0x12e>
		if (wc >= 0x80) {	/* Is this a non-ASCII character? */
1a00225c:	2e7f      	cmp	r6, #127	; 0x7f
1a00225e:	d84e      	bhi.n	1a0022fe <create_name+0x1a2>
		if (wc >= 0x100) {				/* Is this a DBC? */
1a002260:	2eff      	cmp	r6, #255	; 0xff
1a002262:	d962      	bls.n	1a00232a <create_name+0x1ce>
			if (i >= ni - 1) {			/* Field overflow? */
1a002264:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
1a002268:	9a01      	ldr	r2, [sp, #4]
1a00226a:	4293      	cmp	r3, r2
1a00226c:	d957      	bls.n	1a00231e <create_name+0x1c2>
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
1a00226e:	9901      	ldr	r1, [sp, #4]
1a002270:	1c4b      	adds	r3, r1, #1
1a002272:	f3c6 2207 	ubfx	r2, r6, #8, #8
1a002276:	4441      	add	r1, r8
1a002278:	f881 2040 	strb.w	r2, [r1, #64]	; 0x40
1a00227c:	e05a      	b.n	1a002334 <create_name+0x1d8>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
1a00227e:	454c      	cmp	r4, r9
1a002280:	d0e7      	beq.n	1a002252 <create_name+0xf6>
			cf |= NS_LOSS | NS_LFN;
1a002282:	f047 0703 	orr.w	r7, r7, #3
		wc = lfn[si++];					/* Get an LFN character */
1a002286:	464e      	mov	r6, r9
			continue;
1a002288:	e7da      	b.n	1a002240 <create_name+0xe4>
			if (ni == 11) {				/* Name extension overflow? */
1a00228a:	f1bb 0f0b 	cmp.w	fp, #11
1a00228e:	d029      	beq.n	1a0022e4 <create_name+0x188>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
1a002290:	454c      	cmp	r4, r9
1a002292:	d001      	beq.n	1a002298 <create_name+0x13c>
1a002294:	f047 0703 	orr.w	r7, r7, #3
			if (si > di) break;						/* No name extension? */
1a002298:	454c      	cmp	r4, r9
1a00229a:	d226      	bcs.n	1a0022ea <create_name+0x18e>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
1a00229c:	f898 3040 	ldrb.w	r3, [r8, #64]	; 0x40
1a0022a0:	2be5      	cmp	r3, #229	; 0xe5
1a0022a2:	d068      	beq.n	1a002376 <create_name+0x21a>
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
1a0022a4:	f1bb 0f08 	cmp.w	fp, #8
1a0022a8:	d069      	beq.n	1a00237e <create_name+0x222>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
1a0022aa:	f00a 030c 	and.w	r3, sl, #12
1a0022ae:	2b0c      	cmp	r3, #12
1a0022b0:	d003      	beq.n	1a0022ba <create_name+0x15e>
1a0022b2:	f00a 0303 	and.w	r3, sl, #3
1a0022b6:	2b03      	cmp	r3, #3
1a0022b8:	d101      	bne.n	1a0022be <create_name+0x162>
1a0022ba:	f047 0702 	orr.w	r7, r7, #2
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
1a0022be:	f017 0f02 	tst.w	r7, #2
1a0022c2:	d109      	bne.n	1a0022d8 <create_name+0x17c>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
1a0022c4:	f01a 0f01 	tst.w	sl, #1
1a0022c8:	d001      	beq.n	1a0022ce <create_name+0x172>
1a0022ca:	f047 0710 	orr.w	r7, r7, #16
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
1a0022ce:	f01a 0f04 	tst.w	sl, #4
1a0022d2:	d001      	beq.n	1a0022d8 <create_name+0x17c>
1a0022d4:	f047 0708 	orr.w	r7, r7, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
1a0022d8:	f888 704b 	strb.w	r7, [r8, #75]	; 0x4b
	return FR_OK;
1a0022dc:	2000      	movs	r0, #0
}
1a0022de:	b005      	add	sp, #20
1a0022e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN;
1a0022e4:	f047 0703 	orr.w	r7, r7, #3
				break;
1a0022e8:	e7d8      	b.n	1a00229c <create_name+0x140>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
1a0022ea:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
1a0022ee:	fa5f fa8a 	uxtb.w	sl, sl
1a0022f2:	4626      	mov	r6, r4
1a0022f4:	f04f 0b0b 	mov.w	fp, #11
1a0022f8:	2308      	movs	r3, #8
1a0022fa:	9301      	str	r3, [sp, #4]
			continue;
1a0022fc:	e7a0      	b.n	1a002240 <create_name+0xe4>
			cf |= NS_LFN;	/* LFN entry needs to be created */
1a0022fe:	f047 0702 	orr.w	r7, r7, #2
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
1a002302:	f240 3152 	movw	r1, #850	; 0x352
1a002306:	4630      	mov	r0, r6
1a002308:	f000 feb2 	bl	1a003070 <ff_uni2oem>
1a00230c:	4606      	mov	r6, r0
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
1a00230e:	f010 0f80 	tst.w	r0, #128	; 0x80
1a002312:	d0a5      	beq.n	1a002260 <create_name+0x104>
1a002314:	f000 067f 	and.w	r6, r0, #127	; 0x7f
1a002318:	4b1f      	ldr	r3, [pc, #124]	; (1a002398 <create_name+0x23c>)
1a00231a:	5d9e      	ldrb	r6, [r3, r6]
1a00231c:	e7a0      	b.n	1a002260 <create_name+0x104>
				cf |= NS_LOSS | NS_LFN;
1a00231e:	f047 0703 	orr.w	r7, r7, #3
		wc = lfn[si++];					/* Get an LFN character */
1a002322:	464e      	mov	r6, r9
				i = ni; continue;		/* Next field */
1a002324:	f8cd b004 	str.w	fp, [sp, #4]
1a002328:	e78a      	b.n	1a002240 <create_name+0xe4>
			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
1a00232a:	b956      	cbnz	r6, 1a002342 <create_name+0x1e6>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
1a00232c:	f047 0703 	orr.w	r7, r7, #3
1a002330:	9b01      	ldr	r3, [sp, #4]
1a002332:	265f      	movs	r6, #95	; 0x5f
		dp->fn[i++] = (BYTE)wc;
1a002334:	1c5a      	adds	r2, r3, #1
1a002336:	9201      	str	r2, [sp, #4]
1a002338:	4443      	add	r3, r8
1a00233a:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
		wc = lfn[si++];					/* Get an LFN character */
1a00233e:	464e      	mov	r6, r9
1a002340:	e77e      	b.n	1a002240 <create_name+0xe4>
			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
1a002342:	4631      	mov	r1, r6
1a002344:	4815      	ldr	r0, [pc, #84]	; (1a00239c <create_name+0x240>)
1a002346:	f7fe fc17 	bl	1a000b78 <chk_chr>
1a00234a:	2800      	cmp	r0, #0
1a00234c:	d1ee      	bne.n	1a00232c <create_name+0x1d0>
				if (IsUpper(wc)) {		/* ASCII upper case? */
1a00234e:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
1a002352:	b29b      	uxth	r3, r3
1a002354:	2b19      	cmp	r3, #25
1a002356:	d801      	bhi.n	1a00235c <create_name+0x200>
					b |= 2;
1a002358:	f04a 0a02 	orr.w	sl, sl, #2
				if (IsLower(wc)) {		/* ASCII lower case? */
1a00235c:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
1a002360:	b29b      	uxth	r3, r3
1a002362:	2b19      	cmp	r3, #25
1a002364:	d805      	bhi.n	1a002372 <create_name+0x216>
					b |= 1; wc -= 0x20;
1a002366:	f04a 0a01 	orr.w	sl, sl, #1
1a00236a:	3e20      	subs	r6, #32
1a00236c:	b2b6      	uxth	r6, r6
1a00236e:	9b01      	ldr	r3, [sp, #4]
1a002370:	e7e0      	b.n	1a002334 <create_name+0x1d8>
1a002372:	9b01      	ldr	r3, [sp, #4]
1a002374:	e7de      	b.n	1a002334 <create_name+0x1d8>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
1a002376:	2305      	movs	r3, #5
1a002378:	f888 3040 	strb.w	r3, [r8, #64]	; 0x40
1a00237c:	e792      	b.n	1a0022a4 <create_name+0x148>
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
1a00237e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
1a002382:	fa5f fa8a 	uxtb.w	sl, sl
1a002386:	e790      	b.n	1a0022aa <create_name+0x14e>
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
1a002388:	2006      	movs	r0, #6
1a00238a:	e7a8      	b.n	1a0022de <create_name+0x182>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
1a00238c:	2006      	movs	r0, #6
1a00238e:	e7a6      	b.n	1a0022de <create_name+0x182>
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
1a002390:	2006      	movs	r0, #6
1a002392:	e7a4      	b.n	1a0022de <create_name+0x182>
1a002394:	1a0064c4 	.word	0x1a0064c4
1a002398:	1a006414 	.word	0x1a006414
1a00239c:	1a0064d0 	.word	0x1a0064d0

1a0023a0 <xname_sum>:
{
1a0023a0:	b538      	push	{r3, r4, r5, lr}
	WORD sum = 0;
1a0023a2:	2400      	movs	r4, #0
	while ((chr = *name++) != 0) {
1a0023a4:	e011      	b.n	1a0023ca <xname_sum+0x2a>
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
1a0023a6:	f000 fe83 	bl	1a0030b0 <ff_wtoupper>
1a0023aa:	b280      	uxth	r0, r0
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
1a0023ac:	0863      	lsrs	r3, r4, #1
1a0023ae:	eb03 34c4 	add.w	r4, r3, r4, lsl #15
1a0023b2:	b2c3      	uxtb	r3, r0
1a0023b4:	fa13 f484 	uxtah	r4, r3, r4
1a0023b8:	b2a3      	uxth	r3, r4
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
1a0023ba:	085c      	lsrs	r4, r3, #1
1a0023bc:	eb04 34c3 	add.w	r4, r4, r3, lsl #15
1a0023c0:	0a00      	lsrs	r0, r0, #8
1a0023c2:	fa10 f484 	uxtah	r4, r0, r4
1a0023c6:	b2a4      	uxth	r4, r4
	while ((chr = *name++) != 0) {
1a0023c8:	4628      	mov	r0, r5
1a0023ca:	1c85      	adds	r5, r0, #2
1a0023cc:	8800      	ldrh	r0, [r0, #0]
1a0023ce:	2800      	cmp	r0, #0
1a0023d0:	d1e9      	bne.n	1a0023a6 <xname_sum+0x6>
}
1a0023d2:	4620      	mov	r0, r4
1a0023d4:	bd38      	pop	{r3, r4, r5, pc}

1a0023d6 <create_xdir>:
{
1a0023d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0023da:	4607      	mov	r7, r0
1a0023dc:	4688      	mov	r8, r1
	mem_set(dirb, 0, 2 * SZDIRE);
1a0023de:	2240      	movs	r2, #64	; 0x40
1a0023e0:	2100      	movs	r1, #0
1a0023e2:	f7fe fbb5 	bl	1a000b50 <mem_set>
	dirb[0 * SZDIRE + XDIR_Type] = 0x85;	/* 85 entry */
1a0023e6:	2385      	movs	r3, #133	; 0x85
1a0023e8:	703b      	strb	r3, [r7, #0]
	dirb[1 * SZDIRE + XDIR_Type] = 0xC0;	/* C0 entry */
1a0023ea:	23c0      	movs	r3, #192	; 0xc0
1a0023ec:	f887 3020 	strb.w	r3, [r7, #32]
	nlen = nc1 = 0; wc = 1;
1a0023f0:	2501      	movs	r5, #1
1a0023f2:	2600      	movs	r6, #0
1a0023f4:	46b1      	mov	r9, r6
	i = SZDIRE * 2;	/* Top of C1 entries */
1a0023f6:	2440      	movs	r4, #64	; 0x40
1a0023f8:	e017      	b.n	1a00242a <create_xdir+0x54>
			st_word(dirb + i, wc); 		/* Store it */
1a0023fa:	4629      	mov	r1, r5
1a0023fc:	1938      	adds	r0, r7, r4
1a0023fe:	f7fe fb7d 	bl	1a000afc <st_word>
			i += 2;
1a002402:	3402      	adds	r4, #2
		} while (i % SZDIRE != 0);
1a002404:	f014 0f1f 	tst.w	r4, #31
1a002408:	d008      	beq.n	1a00241c <create_xdir+0x46>
			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
1a00240a:	2d00      	cmp	r5, #0
1a00240c:	d0f5      	beq.n	1a0023fa <create_xdir+0x24>
1a00240e:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
1a002412:	2d00      	cmp	r5, #0
1a002414:	d0f1      	beq.n	1a0023fa <create_xdir+0x24>
1a002416:	3601      	adds	r6, #1
1a002418:	b2f6      	uxtb	r6, r6
1a00241a:	e7ee      	b.n	1a0023fa <create_xdir+0x24>
		nc1++;
1a00241c:	f109 0301 	add.w	r3, r9, #1
1a002420:	b2db      	uxtb	r3, r3
	} while (lfn[nlen]);	/* Fill next entry if any char follows */
1a002422:	f838 2016 	ldrh.w	r2, [r8, r6, lsl #1]
1a002426:	b13a      	cbz	r2, 1a002438 <create_xdir+0x62>
		nc1++;
1a002428:	4699      	mov	r9, r3
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
1a00242a:	1c63      	adds	r3, r4, #1
1a00242c:	22c1      	movs	r2, #193	; 0xc1
1a00242e:	553a      	strb	r2, [r7, r4]
1a002430:	2200      	movs	r2, #0
1a002432:	54fa      	strb	r2, [r7, r3]
1a002434:	3402      	adds	r4, #2
1a002436:	e7e8      	b.n	1a00240a <create_xdir+0x34>
	dirb[XDIR_NumName] = nlen;		/* Set name length */
1a002438:	f887 6023 	strb.w	r6, [r7, #35]	; 0x23
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
1a00243c:	f109 0902 	add.w	r9, r9, #2
1a002440:	f887 9001 	strb.w	r9, [r7, #1]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
1a002444:	4640      	mov	r0, r8
1a002446:	f7ff ffab 	bl	1a0023a0 <xname_sum>
1a00244a:	4601      	mov	r1, r0
1a00244c:	f107 0024 	add.w	r0, r7, #36	; 0x24
1a002450:	f7fe fb54 	bl	1a000afc <st_word>
}
1a002454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a002458 <cmp_lfn>:
{
1a002458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00245c:	4681      	mov	r9, r0
1a00245e:	460f      	mov	r7, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
1a002460:	f101 001a 	add.w	r0, r1, #26
1a002464:	f7fe fae6 	bl	1a000a34 <ld_word>
1a002468:	bbb8      	cbnz	r0, 1a0024da <cmp_lfn+0x82>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
1a00246a:	783d      	ldrb	r5, [r7, #0]
1a00246c:	f005 053f 	and.w	r5, r5, #63	; 0x3f
1a002470:	3d01      	subs	r5, #1
1a002472:	eb05 0345 	add.w	r3, r5, r5, lsl #1
1a002476:	eb05 0583 	add.w	r5, r5, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1a00247a:	f04f 0801 	mov.w	r8, #1
1a00247e:	2400      	movs	r4, #0
1a002480:	e004      	b.n	1a00248c <cmp_lfn+0x34>
			if (uc != 0xFFFF) return 0;		/* Check filler */
1a002482:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a002486:	4298      	cmp	r0, r3
1a002488:	d12e      	bne.n	1a0024e8 <cmp_lfn+0x90>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1a00248a:	3401      	adds	r4, #1
1a00248c:	2c0c      	cmp	r4, #12
1a00248e:	d818      	bhi.n	1a0024c2 <cmp_lfn+0x6a>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
1a002490:	4b19      	ldr	r3, [pc, #100]	; (1a0024f8 <cmp_lfn+0xa0>)
1a002492:	5d18      	ldrb	r0, [r3, r4]
1a002494:	4438      	add	r0, r7
1a002496:	f7fe facd 	bl	1a000a34 <ld_word>
1a00249a:	4606      	mov	r6, r0
		if (wc != 0) {
1a00249c:	f1b8 0f00 	cmp.w	r8, #0
1a0024a0:	d0ef      	beq.n	1a002482 <cmp_lfn+0x2a>
			if (i >= FF_MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
1a0024a2:	2dfe      	cmp	r5, #254	; 0xfe
1a0024a4:	d81c      	bhi.n	1a0024e0 <cmp_lfn+0x88>
1a0024a6:	f000 fe03 	bl	1a0030b0 <ff_wtoupper>
1a0024aa:	4680      	mov	r8, r0
1a0024ac:	f105 0a01 	add.w	sl, r5, #1
1a0024b0:	f839 0015 	ldrh.w	r0, [r9, r5, lsl #1]
1a0024b4:	f000 fdfc 	bl	1a0030b0 <ff_wtoupper>
1a0024b8:	4580      	cmp	r8, r0
1a0024ba:	d113      	bne.n	1a0024e4 <cmp_lfn+0x8c>
			wc = uc;
1a0024bc:	46b0      	mov	r8, r6
			if (i >= FF_MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
1a0024be:	4655      	mov	r5, sl
1a0024c0:	e7e3      	b.n	1a00248a <cmp_lfn+0x32>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
1a0024c2:	783b      	ldrb	r3, [r7, #0]
1a0024c4:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0024c8:	d010      	beq.n	1a0024ec <cmp_lfn+0x94>
1a0024ca:	f1b8 0f00 	cmp.w	r8, #0
1a0024ce:	d00f      	beq.n	1a0024f0 <cmp_lfn+0x98>
1a0024d0:	f839 3015 	ldrh.w	r3, [r9, r5, lsl #1]
1a0024d4:	b973      	cbnz	r3, 1a0024f4 <cmp_lfn+0x9c>
	return 1;		/* The part of LFN matched */
1a0024d6:	2001      	movs	r0, #1
1a0024d8:	e000      	b.n	1a0024dc <cmp_lfn+0x84>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
1a0024da:	2000      	movs	r0, #0
}
1a0024dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return 0;					/* Not matched */
1a0024e0:	2000      	movs	r0, #0
1a0024e2:	e7fb      	b.n	1a0024dc <cmp_lfn+0x84>
1a0024e4:	2000      	movs	r0, #0
1a0024e6:	e7f9      	b.n	1a0024dc <cmp_lfn+0x84>
			if (uc != 0xFFFF) return 0;		/* Check filler */
1a0024e8:	2000      	movs	r0, #0
1a0024ea:	e7f7      	b.n	1a0024dc <cmp_lfn+0x84>
	return 1;		/* The part of LFN matched */
1a0024ec:	2001      	movs	r0, #1
1a0024ee:	e7f5      	b.n	1a0024dc <cmp_lfn+0x84>
1a0024f0:	2001      	movs	r0, #1
1a0024f2:	e7f3      	b.n	1a0024dc <cmp_lfn+0x84>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
1a0024f4:	2000      	movs	r0, #0
1a0024f6:	e7f1      	b.n	1a0024dc <cmp_lfn+0x84>
1a0024f8:	1a006494 	.word	0x1a006494

1a0024fc <dir_find>:
{
1a0024fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002500:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
1a002502:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
1a002504:	2100      	movs	r1, #0
1a002506:	f7ff fa3b 	bl	1a001980 <dir_sdi>
	if (res != FR_OK) return res;
1a00250a:	4680      	mov	r8, r0
1a00250c:	2800      	cmp	r0, #0
1a00250e:	f040 80a0 	bne.w	1a002652 <dir_find+0x156>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1a002512:	783b      	ldrb	r3, [r7, #0]
1a002514:	2b04      	cmp	r3, #4
1a002516:	d006      	beq.n	1a002526 <dir_find+0x2a>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
1a002518:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a00251c:	64e3      	str	r3, [r4, #76]	; 0x4c
1a00251e:	f04f 09ff 	mov.w	r9, #255	; 0xff
1a002522:	464e      	mov	r6, r9
1a002524:	e042      	b.n	1a0025ac <dir_find+0xb0>
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
1a002526:	68f8      	ldr	r0, [r7, #12]
1a002528:	f7ff ff3a 	bl	1a0023a0 <xname_sum>
1a00252c:	4683      	mov	fp, r0
		while ((res = dir_read_file(dp)) == FR_OK) {	/* Read an item */
1a00252e:	e01e      	b.n	1a00256e <dir_find+0x72>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
1a002530:	6938      	ldr	r0, [r7, #16]
1a002532:	4430      	add	r0, r6
1a002534:	f7fe fa7e 	bl	1a000a34 <ld_word>
1a002538:	f000 fdba 	bl	1a0030b0 <ff_wtoupper>
1a00253c:	4682      	mov	sl, r0
1a00253e:	68fb      	ldr	r3, [r7, #12]
1a002540:	f833 0019 	ldrh.w	r0, [r3, r9, lsl #1]
1a002544:	f000 fdb4 	bl	1a0030b0 <ff_wtoupper>
1a002548:	4582      	cmp	sl, r0
1a00254a:	d10a      	bne.n	1a002562 <dir_find+0x66>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
1a00254c:	3d01      	subs	r5, #1
1a00254e:	b2ed      	uxtb	r5, r5
1a002550:	3602      	adds	r6, #2
1a002552:	f109 0901 	add.w	r9, r9, #1
1a002556:	b125      	cbz	r5, 1a002562 <dir_find+0x66>
				if ((di % SZDIRE) == 0) di += 2;
1a002558:	f016 0f1f 	tst.w	r6, #31
1a00255c:	d1e8      	bne.n	1a002530 <dir_find+0x34>
1a00255e:	3602      	adds	r6, #2
1a002560:	e7e6      	b.n	1a002530 <dir_find+0x34>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
1a002562:	b925      	cbnz	r5, 1a00256e <dir_find+0x72>
1a002564:	68fb      	ldr	r3, [r7, #12]
1a002566:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
1a00256a:	2b00      	cmp	r3, #0
1a00256c:	d071      	beq.n	1a002652 <dir_find+0x156>
		while ((res = dir_read_file(dp)) == FR_OK) {	/* Read an item */
1a00256e:	2100      	movs	r1, #0
1a002570:	4620      	mov	r0, r4
1a002572:	f7ff fd18 	bl	1a001fa6 <dir_read>
1a002576:	4680      	mov	r8, r0
1a002578:	2800      	cmp	r0, #0
1a00257a:	d16a      	bne.n	1a002652 <dir_find+0x156>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
1a00257c:	693d      	ldr	r5, [r7, #16]
1a00257e:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a002582:	f7fe fa57 	bl	1a000a34 <ld_word>
1a002586:	4558      	cmp	r0, fp
1a002588:	d1f1      	bne.n	1a00256e <dir_find+0x72>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
1a00258a:	f895 5023 	ldrb.w	r5, [r5, #35]	; 0x23
1a00258e:	f04f 0900 	mov.w	r9, #0
1a002592:	2640      	movs	r6, #64	; 0x40
1a002594:	e7df      	b.n	1a002556 <dir_find+0x5a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
1a002596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a00259a:	64e3      	str	r3, [r4, #76]	; 0x4c
1a00259c:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
1a00259e:	2100      	movs	r1, #0
1a0025a0:	4620      	mov	r0, r4
1a0025a2:	f7ff fbf5 	bl	1a001d90 <dir_next>
	} while (res == FR_OK);
1a0025a6:	4680      	mov	r8, r0
1a0025a8:	2800      	cmp	r0, #0
1a0025aa:	d152      	bne.n	1a002652 <dir_find+0x156>
		res = move_window(fs, dp->sect);
1a0025ac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a0025ae:	4638      	mov	r0, r7
1a0025b0:	f7fe fd38 	bl	1a001024 <move_window>
		if (res != FR_OK) break;
1a0025b4:	4680      	mov	r8, r0
1a0025b6:	2800      	cmp	r0, #0
1a0025b8:	d14b      	bne.n	1a002652 <dir_find+0x156>
		c = dp->dir[DIR_Name];
1a0025ba:	6be5      	ldr	r5, [r4, #60]	; 0x3c
1a0025bc:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1a0025be:	2b00      	cmp	r3, #0
1a0025c0:	d045      	beq.n	1a00264e <dir_find+0x152>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
1a0025c2:	7ae9      	ldrb	r1, [r5, #11]
1a0025c4:	f001 023f 	and.w	r2, r1, #63	; 0x3f
1a0025c8:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
1a0025ca:	2be5      	cmp	r3, #229	; 0xe5
1a0025cc:	d0e3      	beq.n	1a002596 <dir_find+0x9a>
1a0025ce:	f011 0f08 	tst.w	r1, #8
1a0025d2:	d001      	beq.n	1a0025d8 <dir_find+0xdc>
1a0025d4:	2a0f      	cmp	r2, #15
1a0025d6:	d1de      	bne.n	1a002596 <dir_find+0x9a>
			if (a == AM_LFN) {			/* An LFN entry is found */
1a0025d8:	2a0f      	cmp	r2, #15
1a0025da:	d016      	beq.n	1a00260a <dir_find+0x10e>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
1a0025dc:	b926      	cbnz	r6, 1a0025e8 <dir_find+0xec>
1a0025de:	4628      	mov	r0, r5
1a0025e0:	f7fe fc3e 	bl	1a000e60 <sum_sfn>
1a0025e4:	4548      	cmp	r0, r9
1a0025e6:	d034      	beq.n	1a002652 <dir_find+0x156>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
1a0025e8:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
1a0025ec:	f013 0f01 	tst.w	r3, #1
1a0025f0:	d106      	bne.n	1a002600 <dir_find+0x104>
1a0025f2:	220b      	movs	r2, #11
1a0025f4:	f104 0140 	add.w	r1, r4, #64	; 0x40
1a0025f8:	4628      	mov	r0, r5
1a0025fa:	f7fe faae 	bl	1a000b5a <mem_cmp>
1a0025fe:	b340      	cbz	r0, 1a002652 <dir_find+0x156>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
1a002600:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a002604:	64e3      	str	r3, [r4, #76]	; 0x4c
1a002606:	26ff      	movs	r6, #255	; 0xff
1a002608:	e7c9      	b.n	1a00259e <dir_find+0xa2>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
1a00260a:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
1a00260e:	f012 0f40 	tst.w	r2, #64	; 0x40
1a002612:	d1c4      	bne.n	1a00259e <dir_find+0xa2>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
1a002614:	f013 0f40 	tst.w	r3, #64	; 0x40
1a002618:	d006      	beq.n	1a002628 <dir_find+0x12c>
						sum = dp->dir[LDIR_Chksum];
1a00261a:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
1a00261e:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
1a002622:	6b22      	ldr	r2, [r4, #48]	; 0x30
1a002624:	64e2      	str	r2, [r4, #76]	; 0x4c
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
1a002626:	461e      	mov	r6, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
1a002628:	42b3      	cmp	r3, r6
1a00262a:	d001      	beq.n	1a002630 <dir_find+0x134>
1a00262c:	26ff      	movs	r6, #255	; 0xff
1a00262e:	e7b6      	b.n	1a00259e <dir_find+0xa2>
1a002630:	7b6b      	ldrb	r3, [r5, #13]
1a002632:	454b      	cmp	r3, r9
1a002634:	d001      	beq.n	1a00263a <dir_find+0x13e>
1a002636:	26ff      	movs	r6, #255	; 0xff
1a002638:	e7b1      	b.n	1a00259e <dir_find+0xa2>
1a00263a:	4629      	mov	r1, r5
1a00263c:	68f8      	ldr	r0, [r7, #12]
1a00263e:	f7ff ff0b 	bl	1a002458 <cmp_lfn>
1a002642:	b110      	cbz	r0, 1a00264a <dir_find+0x14e>
1a002644:	3e01      	subs	r6, #1
1a002646:	b2f6      	uxtb	r6, r6
1a002648:	e7a9      	b.n	1a00259e <dir_find+0xa2>
1a00264a:	26ff      	movs	r6, #255	; 0xff
1a00264c:	e7a7      	b.n	1a00259e <dir_find+0xa2>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1a00264e:	f04f 0804 	mov.w	r8, #4
}
1a002652:	4640      	mov	r0, r8
1a002654:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a002658 <follow_path>:
{
1a002658:	b530      	push	{r4, r5, lr}
1a00265a:	b083      	sub	sp, #12
1a00265c:	4604      	mov	r4, r0
1a00265e:	9101      	str	r1, [sp, #4]
	FATFS *fs = dp->obj.fs;
1a002660:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
1a002662:	e001      	b.n	1a002668 <follow_path+0x10>
1a002664:	3301      	adds	r3, #1
1a002666:	9301      	str	r3, [sp, #4]
1a002668:	9b01      	ldr	r3, [sp, #4]
1a00266a:	781a      	ldrb	r2, [r3, #0]
1a00266c:	2a2f      	cmp	r2, #47	; 0x2f
1a00266e:	d0f9      	beq.n	1a002664 <follow_path+0xc>
1a002670:	2a5c      	cmp	r2, #92	; 0x5c
1a002672:	d0f7      	beq.n	1a002664 <follow_path+0xc>
		dp->obj.sclust = 0;					/* Start from root directory */
1a002674:	2200      	movs	r2, #0
1a002676:	60a2      	str	r2, [r4, #8]
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
1a002678:	61e2      	str	r2, [r4, #28]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
1a00267a:	781b      	ldrb	r3, [r3, #0]
1a00267c:	2b1f      	cmp	r3, #31
1a00267e:	d81f      	bhi.n	1a0026c0 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
1a002680:	2380      	movs	r3, #128	; 0x80
1a002682:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
		res = dir_sdi(dp, 0);
1a002686:	4611      	mov	r1, r2
1a002688:	4620      	mov	r0, r4
1a00268a:	f7ff f979 	bl	1a001980 <dir_sdi>
1a00268e:	4603      	mov	r3, r0
}
1a002690:	4618      	mov	r0, r3
1a002692:	b003      	add	sp, #12
1a002694:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
1a002696:	2804      	cmp	r0, #4
1a002698:	d1fa      	bne.n	1a002690 <follow_path+0x38>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
1a00269a:	f012 0f04 	tst.w	r2, #4
1a00269e:	d1f7      	bne.n	1a002690 <follow_path+0x38>
1a0026a0:	2305      	movs	r3, #5
1a0026a2:	e7f5      	b.n	1a002690 <follow_path+0x38>
				dp->obj.c_scl = dp->obj.sclust;
1a0026a4:	68a3      	ldr	r3, [r4, #8]
1a0026a6:	6223      	str	r3, [r4, #32]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
1a0026a8:	6923      	ldr	r3, [r4, #16]
1a0026aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0026ae:	79e2      	ldrb	r2, [r4, #7]
1a0026b0:	4313      	orrs	r3, r2
1a0026b2:	6263      	str	r3, [r4, #36]	; 0x24
				dp->obj.c_ofs = dp->blk_ofs;
1a0026b4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
1a0026b6:	62a3      	str	r3, [r4, #40]	; 0x28
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
1a0026b8:	4621      	mov	r1, r4
1a0026ba:	4628      	mov	r0, r5
1a0026bc:	f7fe fbf6 	bl	1a000eac <init_alloc_info>
			res = create_name(dp, &path);	/* Get a segment name of the path */
1a0026c0:	a901      	add	r1, sp, #4
1a0026c2:	4620      	mov	r0, r4
1a0026c4:	f7ff fd4a 	bl	1a00215c <create_name>
			if (res != FR_OK) break;
1a0026c8:	4603      	mov	r3, r0
1a0026ca:	2800      	cmp	r0, #0
1a0026cc:	d1e0      	bne.n	1a002690 <follow_path+0x38>
			res = dir_find(dp);				/* Find an object with the segment name */
1a0026ce:	4620      	mov	r0, r4
1a0026d0:	f7ff ff14 	bl	1a0024fc <dir_find>
			ns = dp->fn[NSFLAG];
1a0026d4:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
			if (res != FR_OK) {				/* Failed to find the object */
1a0026d8:	4603      	mov	r3, r0
1a0026da:	2800      	cmp	r0, #0
1a0026dc:	d1db      	bne.n	1a002696 <follow_path+0x3e>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
1a0026de:	f012 0f04 	tst.w	r2, #4
1a0026e2:	d1d5      	bne.n	1a002690 <follow_path+0x38>
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
1a0026e4:	79a3      	ldrb	r3, [r4, #6]
1a0026e6:	f013 0f10 	tst.w	r3, #16
1a0026ea:	d00d      	beq.n	1a002708 <follow_path+0xb0>
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
1a0026ec:	782b      	ldrb	r3, [r5, #0]
1a0026ee:	2b04      	cmp	r3, #4
1a0026f0:	d0d8      	beq.n	1a0026a4 <follow_path+0x4c>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
1a0026f2:	f105 0138 	add.w	r1, r5, #56	; 0x38
1a0026f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a0026f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
1a0026fc:	4419      	add	r1, r3
1a0026fe:	4628      	mov	r0, r5
1a002700:	f7fe fab0 	bl	1a000c64 <ld_clust>
1a002704:	60a0      	str	r0, [r4, #8]
1a002706:	e7db      	b.n	1a0026c0 <follow_path+0x68>
				res = FR_NO_PATH; break;
1a002708:	2305      	movs	r3, #5
1a00270a:	e7c1      	b.n	1a002690 <follow_path+0x38>

1a00270c <dir_register>:
{
1a00270c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a002710:	b099      	sub	sp, #100	; 0x64
	FATFS *fs = dp->obj.fs;
1a002712:	6805      	ldr	r5, [r0, #0]
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
1a002714:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
1a002718:	f013 0fa0 	tst.w	r3, #160	; 0xa0
1a00271c:	f040 80eb 	bne.w	1a0028f6 <dir_register+0x1ea>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
1a002720:	2400      	movs	r4, #0
1a002722:	e000      	b.n	1a002726 <dir_register+0x1a>
1a002724:	3401      	adds	r4, #1
1a002726:	68eb      	ldr	r3, [r5, #12]
1a002728:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
1a00272c:	2b00      	cmp	r3, #0
1a00272e:	d1f9      	bne.n	1a002724 <dir_register+0x18>
1a002730:	4606      	mov	r6, r0
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1a002732:	782b      	ldrb	r3, [r5, #0]
1a002734:	2b04      	cmp	r3, #4
1a002736:	d022      	beq.n	1a00277e <dir_register+0x72>
	mem_cpy(sn, dp->fn, 12);
1a002738:	f100 0740 	add.w	r7, r0, #64	; 0x40
1a00273c:	220c      	movs	r2, #12
1a00273e:	4639      	mov	r1, r7
1a002740:	a815      	add	r0, sp, #84	; 0x54
1a002742:	f7fe f9fc 	bl	1a000b3e <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
1a002746:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
1a00274a:	f013 0f01 	tst.w	r3, #1
1a00274e:	d07a      	beq.n	1a002846 <dir_register+0x13a>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
1a002750:	2340      	movs	r3, #64	; 0x40
1a002752:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
1a002756:	f04f 0801 	mov.w	r8, #1
1a00275a:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
1a00275e:	d868      	bhi.n	1a002832 <dir_register+0x126>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
1a002760:	4643      	mov	r3, r8
1a002762:	68ea      	ldr	r2, [r5, #12]
1a002764:	a915      	add	r1, sp, #84	; 0x54
1a002766:	4638      	mov	r0, r7
1a002768:	f7fe fb22 	bl	1a000db0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
1a00276c:	4630      	mov	r0, r6
1a00276e:	f7ff fec5 	bl	1a0024fc <dir_find>
			if (res != FR_OK) break;
1a002772:	4681      	mov	r9, r0
1a002774:	2800      	cmp	r0, #0
1a002776:	d15c      	bne.n	1a002832 <dir_register+0x126>
		for (n = 1; n < 100; n++) {
1a002778:	f108 0801 	add.w	r8, r8, #1
1a00277c:	e7ed      	b.n	1a00275a <dir_register+0x4e>
		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
1a00277e:	340e      	adds	r4, #14
1a002780:	4b62      	ldr	r3, [pc, #392]	; (1a00290c <dir_register+0x200>)
1a002782:	fba3 3404 	umull	r3, r4, r3, r4
1a002786:	08e4      	lsrs	r4, r4, #3
		res = dir_alloc(dp, nent);		/* Allocate entries */
1a002788:	1ca1      	adds	r1, r4, #2
1a00278a:	f7ff fc81 	bl	1a002090 <dir_alloc>
		if (res != FR_OK) return res;
1a00278e:	4681      	mov	r9, r0
1a002790:	2800      	cmp	r0, #0
1a002792:	f040 80b2 	bne.w	1a0028fa <dir_register+0x1ee>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
1a002796:	6b33      	ldr	r3, [r6, #48]	; 0x30
1a002798:	f104 6400 	add.w	r4, r4, #134217728	; 0x8000000
1a00279c:	3401      	adds	r4, #1
1a00279e:	eba3 1444 	sub.w	r4, r3, r4, lsl #5
1a0027a2:	64f4      	str	r4, [r6, #76]	; 0x4c
		if (dp->obj.stat & 4) {			/* Has the directory been stretched? */
1a0027a4:	79f3      	ldrb	r3, [r6, #7]
1a0027a6:	f013 0f04 	tst.w	r3, #4
1a0027aa:	d013      	beq.n	1a0027d4 <dir_register+0xc8>
			dp->obj.stat &= ~4;
1a0027ac:	f023 0304 	bic.w	r3, r3, #4
1a0027b0:	71f3      	strb	r3, [r6, #7]
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
1a0027b2:	4630      	mov	r0, r6
1a0027b4:	f7ff f812 	bl	1a0017dc <fill_first_frag>
			if (res != FR_OK) return res;
1a0027b8:	b108      	cbz	r0, 1a0027be <dir_register+0xb2>
1a0027ba:	4681      	mov	r9, r0
1a0027bc:	e09d      	b.n	1a0028fa <dir_register+0x1ee>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
1a0027be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0027c2:	6b71      	ldr	r1, [r6, #52]	; 0x34
1a0027c4:	4630      	mov	r0, r6
1a0027c6:	f7fe fff1 	bl	1a0017ac <fill_last_frag>
			if (res != FR_OK) return res;
1a0027ca:	2800      	cmp	r0, #0
1a0027cc:	f040 8099 	bne.w	1a002902 <dir_register+0x1f6>
			if (dp->obj.sclust != 0) {		/* Is it a sub directory? */
1a0027d0:	68b3      	ldr	r3, [r6, #8]
1a0027d2:	b923      	cbnz	r3, 1a0027de <dir_register+0xd2>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
1a0027d4:	68e9      	ldr	r1, [r5, #12]
1a0027d6:	6928      	ldr	r0, [r5, #16]
1a0027d8:	f7ff fdfd 	bl	1a0023d6 <create_xdir>
		return FR_OK;
1a0027dc:	e08d      	b.n	1a0028fa <dir_register+0x1ee>
				res = load_obj_xdir(&dj, &dp->obj);	/* Load the object status */
1a0027de:	4631      	mov	r1, r6
1a0027e0:	4668      	mov	r0, sp
1a0027e2:	f7ff fbc3 	bl	1a001f6c <load_obj_xdir>
				if (res != FR_OK) return res;
1a0027e6:	4603      	mov	r3, r0
1a0027e8:	b108      	cbz	r0, 1a0027ee <dir_register+0xe2>
1a0027ea:	4699      	mov	r9, r3
1a0027ec:	e085      	b.n	1a0028fa <dir_register+0x1ee>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);			/* Increase the directory size by cluster size */
1a0027ee:	8969      	ldrh	r1, [r5, #10]
1a0027f0:	0249      	lsls	r1, r1, #9
1a0027f2:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
1a0027f6:	1857      	adds	r7, r2, r1
1a0027f8:	f143 0800 	adc.w	r8, r3, #0
1a0027fc:	e9c6 7804 	strd	r7, r8, [r6, #16]
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);	/* Update the allocation status */
1a002800:	6928      	ldr	r0, [r5, #16]
1a002802:	463a      	mov	r2, r7
1a002804:	4643      	mov	r3, r8
1a002806:	3038      	adds	r0, #56	; 0x38
1a002808:	f7fe f986 	bl	1a000b18 <st_qword>
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
1a00280c:	6928      	ldr	r0, [r5, #16]
1a00280e:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
1a002812:	3028      	adds	r0, #40	; 0x28
1a002814:	f7fe f980 	bl	1a000b18 <st_qword>
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
1a002818:	79f3      	ldrb	r3, [r6, #7]
1a00281a:	692a      	ldr	r2, [r5, #16]
1a00281c:	f043 0301 	orr.w	r3, r3, #1
1a002820:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
				res = store_xdir(&dj);				/* Store the object status */
1a002824:	4668      	mov	r0, sp
1a002826:	f7ff fc69 	bl	1a0020fc <store_xdir>
				if (res != FR_OK) return res;
1a00282a:	4603      	mov	r3, r0
1a00282c:	2800      	cmp	r0, #0
1a00282e:	d0d1      	beq.n	1a0027d4 <dir_register+0xc8>
1a002830:	e7db      	b.n	1a0027ea <dir_register+0xde>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
1a002832:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
1a002836:	d066      	beq.n	1a002906 <dir_register+0x1fa>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
1a002838:	f1b9 0f04 	cmp.w	r9, #4
1a00283c:	d15d      	bne.n	1a0028fa <dir_register+0x1ee>
		dp->fn[NSFLAG] = sn[NSFLAG];
1a00283e:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
1a002842:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
1a002846:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
1a00284a:	f013 0f02 	tst.w	r3, #2
1a00284e:	d02a      	beq.n	1a0028a6 <dir_register+0x19a>
1a002850:	340c      	adds	r4, #12
1a002852:	4b2f      	ldr	r3, [pc, #188]	; (1a002910 <dir_register+0x204>)
1a002854:	fba3 3404 	umull	r3, r4, r3, r4
1a002858:	08a4      	lsrs	r4, r4, #2
1a00285a:	3401      	adds	r4, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
1a00285c:	4621      	mov	r1, r4
1a00285e:	4630      	mov	r0, r6
1a002860:	f7ff fc16 	bl	1a002090 <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
1a002864:	4681      	mov	r9, r0
1a002866:	b908      	cbnz	r0, 1a00286c <dir_register+0x160>
1a002868:	3c01      	subs	r4, #1
1a00286a:	d11e      	bne.n	1a0028aa <dir_register+0x19e>
	if (res == FR_OK) {
1a00286c:	f1b9 0f00 	cmp.w	r9, #0
1a002870:	d143      	bne.n	1a0028fa <dir_register+0x1ee>
		res = move_window(fs, dp->sect);
1a002872:	6bb1      	ldr	r1, [r6, #56]	; 0x38
1a002874:	4628      	mov	r0, r5
1a002876:	f7fe fbd5 	bl	1a001024 <move_window>
		if (res == FR_OK) {
1a00287a:	4681      	mov	r9, r0
1a00287c:	2800      	cmp	r0, #0
1a00287e:	d13c      	bne.n	1a0028fa <dir_register+0x1ee>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
1a002880:	2220      	movs	r2, #32
1a002882:	2100      	movs	r1, #0
1a002884:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
1a002886:	f7fe f963 	bl	1a000b50 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
1a00288a:	220b      	movs	r2, #11
1a00288c:	4639      	mov	r1, r7
1a00288e:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
1a002890:	f7fe f955 	bl	1a000b3e <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
1a002894:	f896 304b 	ldrb.w	r3, [r6, #75]	; 0x4b
1a002898:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
1a00289a:	f003 0318 	and.w	r3, r3, #24
1a00289e:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
1a0028a0:	2301      	movs	r3, #1
1a0028a2:	70eb      	strb	r3, [r5, #3]
1a0028a4:	e029      	b.n	1a0028fa <dir_register+0x1ee>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
1a0028a6:	2401      	movs	r4, #1
1a0028a8:	e7d8      	b.n	1a00285c <dir_register+0x150>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
1a0028aa:	6b31      	ldr	r1, [r6, #48]	; 0x30
1a0028ac:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
1a0028b0:	4630      	mov	r0, r6
1a0028b2:	f7ff f865 	bl	1a001980 <dir_sdi>
		if (res == FR_OK) {
1a0028b6:	4681      	mov	r9, r0
1a0028b8:	2800      	cmp	r0, #0
1a0028ba:	d1d7      	bne.n	1a00286c <dir_register+0x160>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
1a0028bc:	4638      	mov	r0, r7
1a0028be:	f7fe facf 	bl	1a000e60 <sum_sfn>
1a0028c2:	4680      	mov	r8, r0
				res = move_window(fs, dp->sect);
1a0028c4:	6bb1      	ldr	r1, [r6, #56]	; 0x38
1a0028c6:	4628      	mov	r0, r5
1a0028c8:	f7fe fbac 	bl	1a001024 <move_window>
				if (res != FR_OK) break;
1a0028cc:	4681      	mov	r9, r0
1a0028ce:	2800      	cmp	r0, #0
1a0028d0:	d1cc      	bne.n	1a00286c <dir_register+0x160>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
1a0028d2:	4643      	mov	r3, r8
1a0028d4:	b2e2      	uxtb	r2, r4
1a0028d6:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
1a0028d8:	68e8      	ldr	r0, [r5, #12]
1a0028da:	f7fe fa2d 	bl	1a000d38 <put_lfn>
				fs->wflag = 1;
1a0028de:	2301      	movs	r3, #1
1a0028e0:	70eb      	strb	r3, [r5, #3]
				res = dir_next(dp, 0);	/* Next entry */
1a0028e2:	2100      	movs	r1, #0
1a0028e4:	4630      	mov	r0, r6
1a0028e6:	f7ff fa53 	bl	1a001d90 <dir_next>
			} while (res == FR_OK && --nent);
1a0028ea:	4681      	mov	r9, r0
1a0028ec:	2800      	cmp	r0, #0
1a0028ee:	d1bd      	bne.n	1a00286c <dir_register+0x160>
1a0028f0:	3c01      	subs	r4, #1
1a0028f2:	d1e7      	bne.n	1a0028c4 <dir_register+0x1b8>
1a0028f4:	e7ba      	b.n	1a00286c <dir_register+0x160>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
1a0028f6:	f04f 0906 	mov.w	r9, #6
}
1a0028fa:	4648      	mov	r0, r9
1a0028fc:	b019      	add	sp, #100	; 0x64
1a0028fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (res != FR_OK) return res;
1a002902:	4681      	mov	r9, r0
1a002904:	e7f9      	b.n	1a0028fa <dir_register+0x1ee>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
1a002906:	f04f 0907 	mov.w	r9, #7
1a00290a:	e7f6      	b.n	1a0028fa <dir_register+0x1ee>
1a00290c:	88888889 	.word	0x88888889
1a002910:	4ec4ec4f 	.word	0x4ec4ec4f

1a002914 <sync_fs>:
{
1a002914:	b570      	push	{r4, r5, r6, lr}
1a002916:	4604      	mov	r4, r0
	res = sync_window(fs);
1a002918:	f7fe fb5c 	bl	1a000fd4 <sync_window>
	if (res == FR_OK) {
1a00291c:	4605      	mov	r5, r0
1a00291e:	b948      	cbnz	r0, 1a002934 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
1a002920:	7823      	ldrb	r3, [r4, #0]
1a002922:	2b03      	cmp	r3, #3
1a002924:	d008      	beq.n	1a002938 <sync_fs+0x24>
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
1a002926:	2200      	movs	r2, #0
1a002928:	4611      	mov	r1, r2
1a00292a:	7860      	ldrb	r0, [r4, #1]
1a00292c:	f001 f8b0 	bl	1a003a90 <disk_ioctl>
1a002930:	b100      	cbz	r0, 1a002934 <sync_fs+0x20>
1a002932:	2501      	movs	r5, #1
}
1a002934:	4628      	mov	r0, r5
1a002936:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
1a002938:	7923      	ldrb	r3, [r4, #4]
1a00293a:	2b01      	cmp	r3, #1
1a00293c:	d1f3      	bne.n	1a002926 <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
1a00293e:	f104 0638 	add.w	r6, r4, #56	; 0x38
1a002942:	f44f 7200 	mov.w	r2, #512	; 0x200
1a002946:	2100      	movs	r1, #0
1a002948:	4630      	mov	r0, r6
1a00294a:	f7fe f901 	bl	1a000b50 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
1a00294e:	f64a 2155 	movw	r1, #43605	; 0xaa55
1a002952:	f204 2036 	addw	r0, r4, #566	; 0x236
1a002956:	f7fe f8d1 	bl	1a000afc <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
1a00295a:	490f      	ldr	r1, [pc, #60]	; (1a002998 <sync_fs+0x84>)
1a00295c:	4630      	mov	r0, r6
1a00295e:	f7fe f8d1 	bl	1a000b04 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
1a002962:	490e      	ldr	r1, [pc, #56]	; (1a00299c <sync_fs+0x88>)
1a002964:	f504 7007 	add.w	r0, r4, #540	; 0x21c
1a002968:	f7fe f8cc 	bl	1a000b04 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
1a00296c:	69a1      	ldr	r1, [r4, #24]
1a00296e:	f504 7008 	add.w	r0, r4, #544	; 0x220
1a002972:	f7fe f8c7 	bl	1a000b04 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
1a002976:	6961      	ldr	r1, [r4, #20]
1a002978:	f504 7009 	add.w	r0, r4, #548	; 0x224
1a00297c:	f7fe f8c2 	bl	1a000b04 <st_dword>
			fs->winsect = fs->volbase + 1;
1a002980:	6a62      	ldr	r2, [r4, #36]	; 0x24
1a002982:	3201      	adds	r2, #1
1a002984:	6362      	str	r2, [r4, #52]	; 0x34
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
1a002986:	2301      	movs	r3, #1
1a002988:	4631      	mov	r1, r6
1a00298a:	7860      	ldrb	r0, [r4, #1]
1a00298c:	f001 f870 	bl	1a003a70 <disk_write>
			fs->fsi_flag = 0;
1a002990:	2300      	movs	r3, #0
1a002992:	7123      	strb	r3, [r4, #4]
1a002994:	e7c7      	b.n	1a002926 <sync_fs+0x12>
1a002996:	bf00      	nop
1a002998:	41615252 	.word	0x41615252
1a00299c:	61417272 	.word	0x61417272

1a0029a0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
1a0029a0:	b510      	push	{r4, lr}
1a0029a2:	b084      	sub	sp, #16
1a0029a4:	9001      	str	r0, [sp, #4]
1a0029a6:	9100      	str	r1, [sp, #0]
1a0029a8:	4614      	mov	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
1a0029aa:	a804      	add	r0, sp, #16
1a0029ac:	f840 1d04 	str.w	r1, [r0, #-4]!


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
1a0029b0:	f7fe fa94 	bl	1a000edc <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
1a0029b4:	2800      	cmp	r0, #0
1a0029b6:	db17      	blt.n	1a0029e8 <f_mount+0x48>
	cfs = FatFs[vol];					/* Pointer to fs object */
1a0029b8:	4b0c      	ldr	r3, [pc, #48]	; (1a0029ec <f_mount+0x4c>)
1a0029ba:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]

	if (cfs) {
1a0029be:	b10b      	cbz	r3, 1a0029c4 <f_mount+0x24>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
1a0029c0:	2200      	movs	r2, #0
1a0029c2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
1a0029c4:	9b01      	ldr	r3, [sp, #4]
1a0029c6:	b10b      	cbz	r3, 1a0029cc <f_mount+0x2c>
		fs->fs_type = 0;				/* Clear new fs object */
1a0029c8:	2200      	movs	r2, #0
1a0029ca:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
1a0029cc:	4b07      	ldr	r3, [pc, #28]	; (1a0029ec <f_mount+0x4c>)
1a0029ce:	9a01      	ldr	r2, [sp, #4]
1a0029d0:	f843 2020 	str.w	r2, [r3, r0, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
1a0029d4:	b914      	cbnz	r4, 1a0029dc <f_mount+0x3c>
1a0029d6:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
1a0029d8:	b004      	add	sp, #16
1a0029da:	bd10      	pop	{r4, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
1a0029dc:	2200      	movs	r2, #0
1a0029de:	a901      	add	r1, sp, #4
1a0029e0:	4668      	mov	r0, sp
1a0029e2:	f7fe fb7b 	bl	1a0010dc <find_volume>
	LEAVE_FF(fs, res);
1a0029e6:	e7f7      	b.n	1a0029d8 <f_mount+0x38>
	if (vol < 0) return FR_INVALID_DRIVE;
1a0029e8:	200b      	movs	r0, #11
1a0029ea:	e7f5      	b.n	1a0029d8 <f_mount+0x38>
1a0029ec:	100007e8 	.word	0x100007e8

1a0029f0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
1a0029f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0029f4:	b099      	sub	sp, #100	; 0x64
1a0029f6:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
1a0029f8:	2800      	cmp	r0, #0
1a0029fa:	f000 8153 	beq.w	1a002ca4 <f_open+0x2b4>
1a0029fe:	4604      	mov	r4, r0
1a002a00:	4616      	mov	r6, r2

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
1a002a02:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
1a002a06:	463a      	mov	r2, r7
1a002a08:	a903      	add	r1, sp, #12
1a002a0a:	a801      	add	r0, sp, #4
1a002a0c:	f7fe fb66 	bl	1a0010dc <find_volume>
	if (res == FR_OK) {
1a002a10:	4605      	mov	r5, r0
1a002a12:	b130      	cbz	r0, 1a002a22 <f_open+0x32>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
1a002a14:	b10d      	cbz	r5, 1a002a1a <f_open+0x2a>
1a002a16:	2300      	movs	r3, #0
1a002a18:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
1a002a1a:	4628      	mov	r0, r5
1a002a1c:	b019      	add	sp, #100	; 0x64
1a002a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dj.obj.fs = fs;
1a002a22:	9b03      	ldr	r3, [sp, #12]
1a002a24:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
1a002a26:	9901      	ldr	r1, [sp, #4]
1a002a28:	a804      	add	r0, sp, #16
1a002a2a:	f7ff fe15 	bl	1a002658 <follow_path>
		if (res == FR_OK) {
1a002a2e:	4605      	mov	r5, r0
1a002a30:	b918      	cbnz	r0, 1a002a3a <f_open+0x4a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
1a002a32:	f99d 305b 	ldrsb.w	r3, [sp, #91]	; 0x5b
1a002a36:	2b00      	cmp	r3, #0
1a002a38:	db47      	blt.n	1a002aca <f_open+0xda>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
1a002a3a:	f016 0f1c 	tst.w	r6, #28
1a002a3e:	f000 808a 	beq.w	1a002b56 <f_open+0x166>
			if (res != FR_OK) {					/* No file, create new */
1a002a42:	2d00      	cmp	r5, #0
1a002a44:	d048      	beq.n	1a002ad8 <f_open+0xe8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
1a002a46:	2d04      	cmp	r5, #4
1a002a48:	d041      	beq.n	1a002ace <f_open+0xde>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
1a002a4a:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
1a002a4e:	2d00      	cmp	r5, #0
1a002a50:	f040 8090 	bne.w	1a002b74 <f_open+0x184>
1a002a54:	f017 0f08 	tst.w	r7, #8
1a002a58:	f000 808c 	beq.w	1a002b74 <f_open+0x184>
				if (fs->fs_type == FS_EXFAT) {
1a002a5c:	9803      	ldr	r0, [sp, #12]
1a002a5e:	7803      	ldrb	r3, [r0, #0]
1a002a60:	2b04      	cmp	r3, #4
1a002a62:	d043      	beq.n	1a002aec <f_open+0xfc>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
1a002a64:	9e13      	ldr	r6, [sp, #76]	; 0x4c
1a002a66:	4631      	mov	r1, r6
1a002a68:	f7fe f8fc 	bl	1a000c64 <ld_clust>
1a002a6c:	4680      	mov	r8, r0
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
1a002a6e:	f000 ffbf 	bl	1a0039f0 <get_fattime>
1a002a72:	4601      	mov	r1, r0
1a002a74:	f106 000e 	add.w	r0, r6, #14
1a002a78:	f7fe f844 	bl	1a000b04 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
1a002a7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a002a7e:	2220      	movs	r2, #32
1a002a80:	72da      	strb	r2, [r3, #11]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
1a002a82:	2200      	movs	r2, #0
1a002a84:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a002a86:	9803      	ldr	r0, [sp, #12]
1a002a88:	f7fe f8ff 	bl	1a000c8a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
1a002a8c:	2100      	movs	r1, #0
1a002a8e:	9813      	ldr	r0, [sp, #76]	; 0x4c
1a002a90:	301c      	adds	r0, #28
1a002a92:	f7fe f837 	bl	1a000b04 <st_dword>
					fs->wflag = 1;
1a002a96:	9b03      	ldr	r3, [sp, #12]
1a002a98:	2201      	movs	r2, #1
1a002a9a:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
1a002a9c:	f1b8 0f00 	cmp.w	r8, #0
1a002aa0:	d068      	beq.n	1a002b74 <f_open+0x184>
						dw = fs->winsect;
1a002aa2:	9b03      	ldr	r3, [sp, #12]
1a002aa4:	6b5e      	ldr	r6, [r3, #52]	; 0x34
						res = remove_chain(&dj.obj, cl, 0);
1a002aa6:	2200      	movs	r2, #0
1a002aa8:	4641      	mov	r1, r8
1a002aaa:	a804      	add	r0, sp, #16
1a002aac:	f7ff f8a8 	bl	1a001c00 <remove_chain>
						if (res == FR_OK) {
1a002ab0:	4605      	mov	r5, r0
1a002ab2:	2800      	cmp	r0, #0
1a002ab4:	d15e      	bne.n	1a002b74 <f_open+0x184>
							res = move_window(fs, dw);
1a002ab6:	4631      	mov	r1, r6
1a002ab8:	9803      	ldr	r0, [sp, #12]
1a002aba:	f7fe fab3 	bl	1a001024 <move_window>
1a002abe:	4605      	mov	r5, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
1a002ac0:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
1a002ac4:	9a03      	ldr	r2, [sp, #12]
1a002ac6:	6153      	str	r3, [r2, #20]
1a002ac8:	e054      	b.n	1a002b74 <f_open+0x184>
				res = FR_INVALID_NAME;
1a002aca:	2506      	movs	r5, #6
1a002acc:	e7b5      	b.n	1a002a3a <f_open+0x4a>
					res = dir_register(&dj);
1a002ace:	a804      	add	r0, sp, #16
1a002ad0:	f7ff fe1c 	bl	1a00270c <dir_register>
1a002ad4:	4605      	mov	r5, r0
1a002ad6:	e7b8      	b.n	1a002a4a <f_open+0x5a>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
1a002ad8:	f89d 3016 	ldrb.w	r3, [sp, #22]
1a002adc:	f013 0f11 	tst.w	r3, #17
1a002ae0:	d147      	bne.n	1a002b72 <f_open+0x182>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
1a002ae2:	f016 0f04 	tst.w	r6, #4
1a002ae6:	d0b2      	beq.n	1a002a4e <f_open+0x5e>
1a002ae8:	2508      	movs	r5, #8
1a002aea:	e043      	b.n	1a002b74 <f_open+0x184>
					fp->obj.fs = fs;
1a002aec:	6020      	str	r0, [r4, #0]
					init_alloc_info(fs, &fp->obj);
1a002aee:	4621      	mov	r1, r4
1a002af0:	9803      	ldr	r0, [sp, #12]
1a002af2:	f7fe f9db 	bl	1a000eac <init_alloc_info>
					mem_set(fs->dirbuf + 2, 0, 30);		/* Clear 85 entry except for NumSec */
1a002af6:	9b03      	ldr	r3, [sp, #12]
1a002af8:	6918      	ldr	r0, [r3, #16]
1a002afa:	221e      	movs	r2, #30
1a002afc:	2100      	movs	r1, #0
1a002afe:	3002      	adds	r0, #2
1a002b00:	f7fe f826 	bl	1a000b50 <mem_set>
					mem_set(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
1a002b04:	9b03      	ldr	r3, [sp, #12]
1a002b06:	6918      	ldr	r0, [r3, #16]
1a002b08:	221a      	movs	r2, #26
1a002b0a:	2100      	movs	r1, #0
1a002b0c:	3026      	adds	r0, #38	; 0x26
1a002b0e:	f7fe f81f 	bl	1a000b50 <mem_set>
					fs->dirbuf[XDIR_Attr] = AM_ARC;
1a002b12:	9b03      	ldr	r3, [sp, #12]
1a002b14:	691a      	ldr	r2, [r3, #16]
1a002b16:	2120      	movs	r1, #32
1a002b18:	7111      	strb	r1, [r2, #4]
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
1a002b1a:	691d      	ldr	r5, [r3, #16]
1a002b1c:	f000 ff68 	bl	1a0039f0 <get_fattime>
1a002b20:	4601      	mov	r1, r0
1a002b22:	f105 0008 	add.w	r0, r5, #8
1a002b26:	f7fd ffed 	bl	1a000b04 <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 1;
1a002b2a:	9b03      	ldr	r3, [sp, #12]
1a002b2c:	691b      	ldr	r3, [r3, #16]
1a002b2e:	2201      	movs	r2, #1
1a002b30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					res = store_xdir(&dj);
1a002b34:	a804      	add	r0, sp, #16
1a002b36:	f7ff fae1 	bl	1a0020fc <store_xdir>
					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
1a002b3a:	4605      	mov	r5, r0
1a002b3c:	b9d0      	cbnz	r0, 1a002b74 <f_open+0x184>
1a002b3e:	68a1      	ldr	r1, [r4, #8]
1a002b40:	b1c1      	cbz	r1, 1a002b74 <f_open+0x184>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
1a002b42:	2200      	movs	r2, #0
1a002b44:	4620      	mov	r0, r4
1a002b46:	f7ff f85b 	bl	1a001c00 <remove_chain>
1a002b4a:	4605      	mov	r5, r0
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
1a002b4c:	68a3      	ldr	r3, [r4, #8]
1a002b4e:	3b01      	subs	r3, #1
1a002b50:	9a03      	ldr	r2, [sp, #12]
1a002b52:	6153      	str	r3, [r2, #20]
1a002b54:	e00e      	b.n	1a002b74 <f_open+0x184>
			if (res == FR_OK) {					/* Is the object exsiting? */
1a002b56:	b96d      	cbnz	r5, 1a002b74 <f_open+0x184>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
1a002b58:	f89d 3016 	ldrb.w	r3, [sp, #22]
1a002b5c:	f013 0f10 	tst.w	r3, #16
1a002b60:	d14e      	bne.n	1a002c00 <f_open+0x210>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
1a002b62:	f016 0f02 	tst.w	r6, #2
1a002b66:	d005      	beq.n	1a002b74 <f_open+0x184>
1a002b68:	f013 0f01 	tst.w	r3, #1
1a002b6c:	d002      	beq.n	1a002b74 <f_open+0x184>
						res = FR_DENIED;
1a002b6e:	2507      	movs	r5, #7
1a002b70:	e00b      	b.n	1a002b8a <f_open+0x19a>
					res = FR_DENIED;
1a002b72:	2507      	movs	r5, #7
		if (res == FR_OK) {
1a002b74:	b94d      	cbnz	r5, 1a002b8a <f_open+0x19a>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
1a002b76:	f017 0f08 	tst.w	r7, #8
1a002b7a:	d001      	beq.n	1a002b80 <f_open+0x190>
1a002b7c:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
1a002b80:	9b03      	ldr	r3, [sp, #12]
1a002b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1a002b84:	64a3      	str	r3, [r4, #72]	; 0x48
			fp->dir_ptr = dj.dir;
1a002b86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a002b88:	64e3      	str	r3, [r4, #76]	; 0x4c
		if (res == FR_OK) {
1a002b8a:	2d00      	cmp	r5, #0
1a002b8c:	f47f af42 	bne.w	1a002a14 <f_open+0x24>
			if (fs->fs_type == FS_EXFAT) {
1a002b90:	9803      	ldr	r0, [sp, #12]
1a002b92:	7803      	ldrb	r3, [r0, #0]
1a002b94:	2b04      	cmp	r3, #4
1a002b96:	d035      	beq.n	1a002c04 <f_open+0x214>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
1a002b98:	9e13      	ldr	r6, [sp, #76]	; 0x4c
1a002b9a:	4631      	mov	r1, r6
1a002b9c:	f7fe f862 	bl	1a000c64 <ld_clust>
1a002ba0:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
1a002ba2:	f106 001c 	add.w	r0, r6, #28
1a002ba6:	f7fd ff4a 	bl	1a000a3e <ld_dword>
1a002baa:	6120      	str	r0, [r4, #16]
1a002bac:	2300      	movs	r3, #0
1a002bae:	6163      	str	r3, [r4, #20]
			fp->obj.fs = fs;	 	/* Validate the file object */
1a002bb0:	9b03      	ldr	r3, [sp, #12]
1a002bb2:	6023      	str	r3, [r4, #0]
			fp->obj.id = fs->id;
1a002bb4:	88db      	ldrh	r3, [r3, #6]
1a002bb6:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
1a002bb8:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
1a002bbc:	2100      	movs	r1, #0
1a002bbe:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
1a002bc2:	6461      	str	r1, [r4, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
1a002bc4:	2200      	movs	r2, #0
1a002bc6:	2300      	movs	r3, #0
1a002bc8:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
			mem_set(fp->buf, 0, FF_MAX_SS);	/* Clear sector buffer */
1a002bcc:	f104 0a50 	add.w	sl, r4, #80	; 0x50
1a002bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
1a002bd4:	4650      	mov	r0, sl
1a002bd6:	f7fd ffbb 	bl	1a000b50 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
1a002bda:	f017 0f20 	tst.w	r7, #32
1a002bde:	f43f af19 	beq.w	1a002a14 <f_open+0x24>
1a002be2:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
1a002be6:	ea56 0307 	orrs.w	r3, r6, r7
1a002bea:	f43f af13 	beq.w	1a002a14 <f_open+0x24>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
1a002bee:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
1a002bf2:	9b03      	ldr	r3, [sp, #12]
1a002bf4:	f8b3 b00a 	ldrh.w	fp, [r3, #10]
1a002bf8:	ea4f 2b4b 	mov.w	fp, fp, lsl #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
1a002bfc:	68a1      	ldr	r1, [r4, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
1a002bfe:	e017      	b.n	1a002c30 <f_open+0x240>
					res = FR_NO_FILE;
1a002c00:	2504      	movs	r5, #4
1a002c02:	e7c2      	b.n	1a002b8a <f_open+0x19a>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
1a002c04:	9b06      	ldr	r3, [sp, #24]
1a002c06:	6223      	str	r3, [r4, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
1a002c08:	9b08      	ldr	r3, [sp, #32]
1a002c0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002c0e:	f89d 2017 	ldrb.w	r2, [sp, #23]
1a002c12:	4313      	orrs	r3, r2
1a002c14:	6263      	str	r3, [r4, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
1a002c16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1a002c18:	62a3      	str	r3, [r4, #40]	; 0x28
				init_alloc_info(fs, &fp->obj);
1a002c1a:	4621      	mov	r1, r4
1a002c1c:	f7fe f946 	bl	1a000eac <init_alloc_info>
1a002c20:	e7c6      	b.n	1a002bb0 <f_open+0x1c0>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
1a002c22:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
1a002c26:	d013      	beq.n	1a002c50 <f_open+0x260>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
1a002c28:	ebb6 0608 	subs.w	r6, r6, r8
1a002c2c:	eb67 0709 	sbc.w	r7, r7, r9
1a002c30:	b985      	cbnz	r5, 1a002c54 <f_open+0x264>
1a002c32:	46d8      	mov	r8, fp
1a002c34:	f04f 0900 	mov.w	r9, #0
1a002c38:	45b9      	cmp	r9, r7
1a002c3a:	bf08      	it	eq
1a002c3c:	45b3      	cmpeq	fp, r6
1a002c3e:	d209      	bcs.n	1a002c54 <f_open+0x264>
					clst = get_fat(&fp->obj, clst);
1a002c40:	4620      	mov	r0, r4
1a002c42:	f7fe fde4 	bl	1a00180e <get_fat>
1a002c46:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
1a002c48:	2801      	cmp	r0, #1
1a002c4a:	d8ea      	bhi.n	1a002c22 <f_open+0x232>
1a002c4c:	2502      	movs	r5, #2
1a002c4e:	e7e8      	b.n	1a002c22 <f_open+0x232>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
1a002c50:	2501      	movs	r5, #1
1a002c52:	e7e9      	b.n	1a002c28 <f_open+0x238>
				fp->clust = clst;
1a002c54:	6421      	str	r1, [r4, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
1a002c56:	2d00      	cmp	r5, #0
1a002c58:	f47f aedc 	bne.w	1a002a14 <f_open+0x24>
1a002c5c:	f240 12ff 	movw	r2, #511	; 0x1ff
1a002c60:	2300      	movs	r3, #0
1a002c62:	ea02 0806 	and.w	r8, r2, r6
1a002c66:	ea03 0907 	and.w	r9, r3, r7
1a002c6a:	ea58 0309 	orrs.w	r3, r8, r9
1a002c6e:	f43f aed1 	beq.w	1a002a14 <f_open+0x24>
					if ((sc = clst2sect(fs, clst)) == 0) {
1a002c72:	f8dd 800c 	ldr.w	r8, [sp, #12]
1a002c76:	4640      	mov	r0, r8
1a002c78:	f7fd ffe8 	bl	1a000c4c <clst2sect>
1a002c7c:	4602      	mov	r2, r0
1a002c7e:	b908      	cbnz	r0, 1a002c84 <f_open+0x294>
						res = FR_INT_ERR;
1a002c80:	2502      	movs	r5, #2
1a002c82:	e6c8      	b.n	1a002a16 <f_open+0x26>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
1a002c84:	0a73      	lsrs	r3, r6, #9
1a002c86:	ea43 53c7 	orr.w	r3, r3, r7, lsl #23
1a002c8a:	441a      	add	r2, r3
1a002c8c:	6462      	str	r2, [r4, #68]	; 0x44
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
1a002c8e:	2301      	movs	r3, #1
1a002c90:	4651      	mov	r1, sl
1a002c92:	f898 0001 	ldrb.w	r0, [r8, #1]
1a002c96:	f000 fedb 	bl	1a003a50 <disk_read>
1a002c9a:	2800      	cmp	r0, #0
1a002c9c:	f43f aeba 	beq.w	1a002a14 <f_open+0x24>
1a002ca0:	2501      	movs	r5, #1
1a002ca2:	e6b8      	b.n	1a002a16 <f_open+0x26>
	if (!fp) return FR_INVALID_OBJECT;
1a002ca4:	2509      	movs	r5, #9
1a002ca6:	e6b8      	b.n	1a002a1a <f_open+0x2a>

1a002ca8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
1a002ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002cac:	b085      	sub	sp, #20
1a002cae:	4604      	mov	r4, r0
1a002cb0:	460e      	mov	r6, r1
1a002cb2:	4615      	mov	r5, r2
1a002cb4:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
1a002cb6:	2300      	movs	r3, #0
1a002cb8:	603b      	str	r3, [r7, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
1a002cba:	9000      	str	r0, [sp, #0]
1a002cbc:	a903      	add	r1, sp, #12
1a002cbe:	f7fe f965 	bl	1a000f8c <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
1a002cc2:	4680      	mov	r8, r0
1a002cc4:	2800      	cmp	r0, #0
1a002cc6:	f040 80f1 	bne.w	1a002eac <f_write+0x204>
1a002cca:	f894 8031 	ldrb.w	r8, [r4, #49]	; 0x31
1a002cce:	f1b8 0f00 	cmp.w	r8, #0
1a002cd2:	f040 80eb 	bne.w	1a002eac <f_write+0x204>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
1a002cd6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a002cda:	f013 0f02 	tst.w	r3, #2
1a002cde:	f000 8100 	beq.w	1a002ee2 <f_write+0x23a>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
1a002ce2:	9b03      	ldr	r3, [sp, #12]
1a002ce4:	781b      	ldrb	r3, [r3, #0]
1a002ce6:	2b04      	cmp	r3, #4
1a002ce8:	f000 808a 	beq.w	1a002e00 <f_write+0x158>
1a002cec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a002cee:	42eb      	cmn	r3, r5
1a002cf0:	f0c0 8086 	bcc.w	1a002e00 <f_write+0x158>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
1a002cf4:	43dd      	mvns	r5, r3
1a002cf6:	e083      	b.n	1a002e00 <f_write+0x158>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
			if (csect == 0) {				/* On the cluster boundary? */
				if (fp->fptr == 0) {		/* On the top of the file? */
					clst = fp->obj.sclust;	/* Follow from the origin */
					if (clst == 0) {		/* If no cluster is allocated, */
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
1a002cf8:	2100      	movs	r1, #0
1a002cfa:	9800      	ldr	r0, [sp, #0]
1a002cfc:	f7fe fe9a 	bl	1a001a34 <create_chain>
1a002d00:	e09e      	b.n	1a002e40 <f_write+0x198>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
1a002d02:	6c21      	ldr	r1, [r4, #64]	; 0x40
1a002d04:	9800      	ldr	r0, [sp, #0]
1a002d06:	f7fe fe95 	bl	1a001a34 <create_chain>
1a002d0a:	e099      	b.n	1a002e40 <f_write+0x198>
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
				if (clst == 1) ABORT(fs, FR_INT_ERR);
1a002d0c:	f04f 0802 	mov.w	r8, #2
1a002d10:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
1a002d14:	e0ca      	b.n	1a002eac <f_write+0x204>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
1a002d16:	f04f 0801 	mov.w	r8, #1
1a002d1a:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
1a002d1e:	e0c5      	b.n	1a002eac <f_write+0x204>
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
1a002d20:	2301      	movs	r3, #1
1a002d22:	6c62      	ldr	r2, [r4, #68]	; 0x44
1a002d24:	f104 0150 	add.w	r1, r4, #80	; 0x50
1a002d28:	9803      	ldr	r0, [sp, #12]
1a002d2a:	7840      	ldrb	r0, [r0, #1]
1a002d2c:	f000 fea0 	bl	1a003a70 <disk_write>
1a002d30:	b930      	cbnz	r0, 1a002d40 <f_write+0x98>
				fp->flag &= (BYTE)~FA_DIRTY;
1a002d32:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a002d36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1a002d3a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
1a002d3e:	e091      	b.n	1a002e64 <f_write+0x1bc>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
1a002d40:	f04f 0801 	mov.w	r8, #1
1a002d44:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
1a002d48:	e0b0      	b.n	1a002eac <f_write+0x204>
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
			if (sect == 0) ABORT(fs, FR_INT_ERR);
1a002d4a:	f04f 0802 	mov.w	r8, #2
1a002d4e:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
1a002d52:	e0ab      	b.n	1a002eac <f_write+0x204>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
1a002d54:	6c61      	ldr	r1, [r4, #68]	; 0x44
1a002d56:	eba1 0109 	sub.w	r1, r1, r9
1a002d5a:	4551      	cmp	r1, sl
1a002d5c:	d302      	bcc.n	1a002d64 <f_write+0xbc>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
1a002d5e:	ea4f 294a 	mov.w	r9, sl, lsl #9
				continue;
1a002d62:	e031      	b.n	1a002dc8 <f_write+0x120>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
1a002d64:	f44f 7200 	mov.w	r2, #512	; 0x200
1a002d68:	eb06 2141 	add.w	r1, r6, r1, lsl #9
1a002d6c:	f104 0050 	add.w	r0, r4, #80	; 0x50
1a002d70:	f7fd fee5 	bl	1a000b3e <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
1a002d74:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a002d78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1a002d7c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
1a002d80:	e7ed      	b.n	1a002d5e <f_write+0xb6>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
1a002d82:	6c63      	ldr	r3, [r4, #68]	; 0x44
1a002d84:	454b      	cmp	r3, r9
1a002d86:	d008      	beq.n	1a002d9a <f_write+0xf2>
				fp->fptr < fp->obj.objsize &&
1a002d88:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
1a002d8c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
1a002d90:	4299      	cmp	r1, r3
1a002d92:	bf08      	it	eq
1a002d94:	4290      	cmpeq	r0, r2
1a002d96:	f0c0 808d 	bcc.w	1a002eb4 <f_write+0x20c>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
			}
#endif
			fp->sect = sect;
1a002d9a:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
1a002d9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a002da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
1a002da4:	f5c3 7900 	rsb	r9, r3, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
1a002da8:	454d      	cmp	r5, r9
1a002daa:	d200      	bcs.n	1a002dae <f_write+0x106>
1a002dac:	46a9      	mov	r9, r5
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
1a002dae:	f104 0050 	add.w	r0, r4, #80	; 0x50
1a002db2:	464a      	mov	r2, r9
1a002db4:	4631      	mov	r1, r6
1a002db6:	4418      	add	r0, r3
1a002db8:	f7fd fec1 	bl	1a000b3e <mem_cpy>
		fp->flag |= FA_DIRTY;
1a002dbc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a002dc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
1a002dc4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
1a002dc8:	eba5 0509 	sub.w	r5, r5, r9
1a002dcc:	683b      	ldr	r3, [r7, #0]
1a002dce:	444b      	add	r3, r9
1a002dd0:	603b      	str	r3, [r7, #0]
1a002dd2:	444e      	add	r6, r9
1a002dd4:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
1a002dd8:	eb12 0a09 	adds.w	sl, r2, r9
1a002ddc:	f143 0b00 	adc.w	fp, r3, #0
1a002de0:	e9c4 ab0e 	strd	sl, fp, [r4, #56]	; 0x38
1a002de4:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
1a002de8:	46d6      	mov	lr, sl
1a002dea:	46dc      	mov	ip, fp
1a002dec:	458b      	cmp	fp, r1
1a002dee:	bf08      	it	eq
1a002df0:	4582      	cmpeq	sl, r0
1a002df2:	d201      	bcs.n	1a002df8 <f_write+0x150>
1a002df4:	4686      	mov	lr, r0
1a002df6:	468c      	mov	ip, r1
1a002df8:	f8c4 e010 	str.w	lr, [r4, #16]
1a002dfc:	f8c4 c014 	str.w	ip, [r4, #20]
	for ( ;  btw;							/* Repeat until all data written */
1a002e00:	2d00      	cmp	r5, #0
1a002e02:	d067      	beq.n	1a002ed4 <f_write+0x22c>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
1a002e04:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
1a002e08:	f240 12ff 	movw	r2, #511	; 0x1ff
1a002e0c:	2300      	movs	r3, #0
1a002e0e:	ea02 0900 	and.w	r9, r2, r0
1a002e12:	ea03 0a01 	and.w	sl, r3, r1
1a002e16:	ea59 030a 	orrs.w	r3, r9, sl
1a002e1a:	d1c0      	bne.n	1a002d9e <f_write+0xf6>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
1a002e1c:	ea4f 2b50 	mov.w	fp, r0, lsr #9
1a002e20:	ea4b 5bc1 	orr.w	fp, fp, r1, lsl #23
1a002e24:	9b03      	ldr	r3, [sp, #12]
1a002e26:	895b      	ldrh	r3, [r3, #10]
1a002e28:	3b01      	subs	r3, #1
			if (csect == 0) {				/* On the cluster boundary? */
1a002e2a:	ea1b 0b03 	ands.w	fp, fp, r3
1a002e2e:	d114      	bne.n	1a002e5a <f_write+0x1b2>
				if (fp->fptr == 0) {		/* On the top of the file? */
1a002e30:	ea50 0301 	orrs.w	r3, r0, r1
1a002e34:	f47f af65 	bne.w	1a002d02 <f_write+0x5a>
					clst = fp->obj.sclust;	/* Follow from the origin */
1a002e38:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
1a002e3a:	2800      	cmp	r0, #0
1a002e3c:	f43f af5c 	beq.w	1a002cf8 <f_write+0x50>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
1a002e40:	2800      	cmp	r0, #0
1a002e42:	d047      	beq.n	1a002ed4 <f_write+0x22c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
1a002e44:	2801      	cmp	r0, #1
1a002e46:	f43f af61 	beq.w	1a002d0c <f_write+0x64>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
1a002e4a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a002e4e:	f43f af62 	beq.w	1a002d16 <f_write+0x6e>
				fp->clust = clst;			/* Update current cluster */
1a002e52:	6420      	str	r0, [r4, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
1a002e54:	68a3      	ldr	r3, [r4, #8]
1a002e56:	b903      	cbnz	r3, 1a002e5a <f_write+0x1b2>
1a002e58:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
1a002e5a:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
1a002e5e:	2b00      	cmp	r3, #0
1a002e60:	f6ff af5e 	blt.w	1a002d20 <f_write+0x78>
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
1a002e64:	9b03      	ldr	r3, [sp, #12]
1a002e66:	9301      	str	r3, [sp, #4]
1a002e68:	6c21      	ldr	r1, [r4, #64]	; 0x40
1a002e6a:	4618      	mov	r0, r3
1a002e6c:	f7fd feee 	bl	1a000c4c <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
1a002e70:	4681      	mov	r9, r0
1a002e72:	2800      	cmp	r0, #0
1a002e74:	f43f af69 	beq.w	1a002d4a <f_write+0xa2>
			sect += csect;
1a002e78:	44d9      	add	r9, fp
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
1a002e7a:	ea5f 2a55 	movs.w	sl, r5, lsr #9
1a002e7e:	d080      	beq.n	1a002d82 <f_write+0xda>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
1a002e80:	eb0b 030a 	add.w	r3, fp, sl
1a002e84:	9a01      	ldr	r2, [sp, #4]
1a002e86:	8952      	ldrh	r2, [r2, #10]
1a002e88:	4293      	cmp	r3, r2
1a002e8a:	d901      	bls.n	1a002e90 <f_write+0x1e8>
					cc = fs->csize - csect;
1a002e8c:	eba2 0a0b 	sub.w	sl, r2, fp
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
1a002e90:	4653      	mov	r3, sl
1a002e92:	464a      	mov	r2, r9
1a002e94:	4631      	mov	r1, r6
1a002e96:	9801      	ldr	r0, [sp, #4]
1a002e98:	7840      	ldrb	r0, [r0, #1]
1a002e9a:	f000 fde9 	bl	1a003a70 <disk_write>
1a002e9e:	2800      	cmp	r0, #0
1a002ea0:	f43f af58 	beq.w	1a002d54 <f_write+0xac>
1a002ea4:	f04f 0801 	mov.w	r8, #1
1a002ea8:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
1a002eac:	4640      	mov	r0, r8
1a002eae:	b005      	add	sp, #20
1a002eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
1a002eb4:	2301      	movs	r3, #1
1a002eb6:	464a      	mov	r2, r9
1a002eb8:	f104 0150 	add.w	r1, r4, #80	; 0x50
1a002ebc:	9801      	ldr	r0, [sp, #4]
1a002ebe:	7840      	ldrb	r0, [r0, #1]
1a002ec0:	f000 fdc6 	bl	1a003a50 <disk_read>
				fp->fptr < fp->obj.objsize &&
1a002ec4:	2800      	cmp	r0, #0
1a002ec6:	f43f af68 	beq.w	1a002d9a <f_write+0xf2>
					ABORT(fs, FR_DISK_ERR);
1a002eca:	f04f 0801 	mov.w	r8, #1
1a002ece:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
1a002ed2:	e7eb      	b.n	1a002eac <f_write+0x204>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
1a002ed4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a002ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a002edc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	LEAVE_FF(fs, FR_OK);
1a002ee0:	e7e4      	b.n	1a002eac <f_write+0x204>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
1a002ee2:	f04f 0807 	mov.w	r8, #7
1a002ee6:	e7e1      	b.n	1a002eac <f_write+0x204>

1a002ee8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
1a002ee8:	b570      	push	{r4, r5, r6, lr}
1a002eea:	b096      	sub	sp, #88	; 0x58
1a002eec:	4604      	mov	r4, r0
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
1a002eee:	a915      	add	r1, sp, #84	; 0x54
1a002ef0:	f7fe f84c 	bl	1a000f8c <validate>
	if (res == FR_OK) {
1a002ef4:	4603      	mov	r3, r0
1a002ef6:	b9a0      	cbnz	r0, 1a002f22 <f_sync+0x3a>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
1a002ef8:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
1a002efc:	f012 0f40 	tst.w	r2, #64	; 0x40
1a002f00:	d00f      	beq.n	1a002f22 <f_sync+0x3a>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
1a002f02:	f012 0f80 	tst.w	r2, #128	; 0x80
1a002f06:	d10f      	bne.n	1a002f28 <f_sync+0x40>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
1a002f08:	f000 fd72 	bl	1a0039f0 <get_fattime>
1a002f0c:	4606      	mov	r6, r0
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
1a002f0e:	9815      	ldr	r0, [sp, #84]	; 0x54
1a002f10:	7803      	ldrb	r3, [r0, #0]
1a002f12:	2b04      	cmp	r3, #4
1a002f14:	d01a      	beq.n	1a002f4c <f_sync+0x64>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
1a002f16:	6ca1      	ldr	r1, [r4, #72]	; 0x48
1a002f18:	f7fe f884 	bl	1a001024 <move_window>
				if (res == FR_OK) {
1a002f1c:	4603      	mov	r3, r0
1a002f1e:	2800      	cmp	r0, #0
1a002f20:	d069      	beq.n	1a002ff6 <f_sync+0x10e>
			}
		}
	}

	LEAVE_FF(fs, res);
}
1a002f22:	4618      	mov	r0, r3
1a002f24:	b016      	add	sp, #88	; 0x58
1a002f26:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
1a002f28:	2301      	movs	r3, #1
1a002f2a:	6c62      	ldr	r2, [r4, #68]	; 0x44
1a002f2c:	f104 0150 	add.w	r1, r4, #80	; 0x50
1a002f30:	9815      	ldr	r0, [sp, #84]	; 0x54
1a002f32:	7840      	ldrb	r0, [r0, #1]
1a002f34:	f000 fd9c 	bl	1a003a70 <disk_write>
1a002f38:	2800      	cmp	r0, #0
1a002f3a:	f040 8083 	bne.w	1a003044 <f_sync+0x15c>
				fp->flag &= (BYTE)~FA_DIRTY;
1a002f3e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a002f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1a002f46:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
1a002f4a:	e7dd      	b.n	1a002f08 <f_sync+0x20>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
1a002f4c:	4620      	mov	r0, r4
1a002f4e:	f7fe fc45 	bl	1a0017dc <fill_first_frag>
				if (res == FR_OK) {
1a002f52:	4603      	mov	r3, r0
1a002f54:	2800      	cmp	r0, #0
1a002f56:	d046      	beq.n	1a002fe6 <f_sync+0xfe>
				if (res == FR_OK) {
1a002f58:	2b00      	cmp	r3, #0
1a002f5a:	d1e2      	bne.n	1a002f22 <f_sync+0x3a>
					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
1a002f5c:	4621      	mov	r1, r4
1a002f5e:	4668      	mov	r0, sp
1a002f60:	f7ff f804 	bl	1a001f6c <load_obj_xdir>
					if (res == FR_OK) {
1a002f64:	4603      	mov	r3, r0
1a002f66:	2800      	cmp	r0, #0
1a002f68:	d1db      	bne.n	1a002f22 <f_sync+0x3a>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
1a002f6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a002f6c:	6919      	ldr	r1, [r3, #16]
1a002f6e:	790a      	ldrb	r2, [r1, #4]
1a002f70:	f042 0220 	orr.w	r2, r2, #32
1a002f74:	710a      	strb	r2, [r1, #4]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
1a002f76:	79e2      	ldrb	r2, [r4, #7]
1a002f78:	6919      	ldr	r1, [r3, #16]
1a002f7a:	f042 0201 	orr.w	r2, r2, #1
1a002f7e:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
1a002f82:	6918      	ldr	r0, [r3, #16]
1a002f84:	68a1      	ldr	r1, [r4, #8]
1a002f86:	3034      	adds	r0, #52	; 0x34
1a002f88:	f7fd fdbc 	bl	1a000b04 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
1a002f8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a002f8e:	6918      	ldr	r0, [r3, #16]
1a002f90:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
1a002f94:	3038      	adds	r0, #56	; 0x38
1a002f96:	f7fd fdbf 	bl	1a000b18 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
1a002f9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a002f9c:	6918      	ldr	r0, [r3, #16]
1a002f9e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
1a002fa2:	3028      	adds	r0, #40	; 0x28
1a002fa4:	f7fd fdb8 	bl	1a000b18 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
1a002fa8:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a002faa:	6918      	ldr	r0, [r3, #16]
1a002fac:	4631      	mov	r1, r6
1a002fae:	300c      	adds	r0, #12
1a002fb0:	f7fd fda8 	bl	1a000b04 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
1a002fb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a002fb6:	691a      	ldr	r2, [r3, #16]
1a002fb8:	2100      	movs	r1, #0
1a002fba:	7551      	strb	r1, [r2, #21]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
1a002fbc:	6918      	ldr	r0, [r3, #16]
1a002fbe:	3010      	adds	r0, #16
1a002fc0:	f7fd fda0 	bl	1a000b04 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
1a002fc4:	4668      	mov	r0, sp
1a002fc6:	f7ff f899 	bl	1a0020fc <store_xdir>
						if (res == FR_OK) {
1a002fca:	4603      	mov	r3, r0
1a002fcc:	2800      	cmp	r0, #0
1a002fce:	d1a8      	bne.n	1a002f22 <f_sync+0x3a>
							res = sync_fs(fs);
1a002fd0:	9815      	ldr	r0, [sp, #84]	; 0x54
1a002fd2:	f7ff fc9f 	bl	1a002914 <sync_fs>
1a002fd6:	4603      	mov	r3, r0
							fp->flag &= (BYTE)~FA_MODIFIED;
1a002fd8:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
1a002fdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
1a002fe0:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
1a002fe4:	e79d      	b.n	1a002f22 <f_sync+0x3a>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
1a002fe6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a002fea:	6c21      	ldr	r1, [r4, #64]	; 0x40
1a002fec:	4620      	mov	r0, r4
1a002fee:	f7fe fbdd 	bl	1a0017ac <fill_last_frag>
1a002ff2:	4603      	mov	r3, r0
1a002ff4:	e7b0      	b.n	1a002f58 <f_sync+0x70>
					dir = fp->dir_ptr;
1a002ff6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
1a002ff8:	7aeb      	ldrb	r3, [r5, #11]
1a002ffa:	f043 0320 	orr.w	r3, r3, #32
1a002ffe:	72eb      	strb	r3, [r5, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
1a003000:	68a2      	ldr	r2, [r4, #8]
1a003002:	4629      	mov	r1, r5
1a003004:	6820      	ldr	r0, [r4, #0]
1a003006:	f7fd fe40 	bl	1a000c8a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
1a00300a:	6921      	ldr	r1, [r4, #16]
1a00300c:	f105 001c 	add.w	r0, r5, #28
1a003010:	f7fd fd78 	bl	1a000b04 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
1a003014:	4631      	mov	r1, r6
1a003016:	f105 0016 	add.w	r0, r5, #22
1a00301a:	f7fd fd73 	bl	1a000b04 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
1a00301e:	2100      	movs	r1, #0
1a003020:	f105 0012 	add.w	r0, r5, #18
1a003024:	f7fd fd6a 	bl	1a000afc <st_word>
					fs->wflag = 1;
1a003028:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a00302a:	2201      	movs	r2, #1
1a00302c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
1a00302e:	9815      	ldr	r0, [sp, #84]	; 0x54
1a003030:	f7ff fc70 	bl	1a002914 <sync_fs>
1a003034:	4603      	mov	r3, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
1a003036:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
1a00303a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
1a00303e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
1a003042:	e76e      	b.n	1a002f22 <f_sync+0x3a>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
1a003044:	2301      	movs	r3, #1
1a003046:	e76c      	b.n	1a002f22 <f_sync+0x3a>

1a003048 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
1a003048:	b510      	push	{r4, lr}
1a00304a:	b082      	sub	sp, #8
1a00304c:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
1a00304e:	f7ff ff4b 	bl	1a002ee8 <f_sync>
	if (res == FR_OK)
1a003052:	4603      	mov	r3, r0
1a003054:	b110      	cbz	r0, 1a00305c <f_close+0x14>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
1a003056:	4618      	mov	r0, r3
1a003058:	b002      	add	sp, #8
1a00305a:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
1a00305c:	a901      	add	r1, sp, #4
1a00305e:	4620      	mov	r0, r4
1a003060:	f7fd ff94 	bl	1a000f8c <validate>
		if (res == FR_OK) {
1a003064:	4603      	mov	r3, r0
1a003066:	2800      	cmp	r0, #0
1a003068:	d1f5      	bne.n	1a003056 <f_close+0xe>
			fp->obj.fs = 0;	/* Invalidate file object */
1a00306a:	2200      	movs	r2, #0
1a00306c:	6022      	str	r2, [r4, #0]
1a00306e:	e7f2      	b.n	1a003056 <f_close+0xe>

1a003070 <ff_uni2oem>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
1a003070:	287f      	cmp	r0, #127	; 0x7f
1a003072:	d908      	bls.n	1a003086 <ff_uni2oem+0x16>
		c = (WCHAR)uni;

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
1a003074:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
1a003078:	d215      	bcs.n	1a0030a6 <ff_uni2oem+0x36>
1a00307a:	f240 3352 	movw	r3, #850	; 0x352
1a00307e:	4299      	cmp	r1, r3
1a003080:	d003      	beq.n	1a00308a <ff_uni2oem+0x1a>
	WCHAR c = 0;
1a003082:	2000      	movs	r0, #0
1a003084:	4770      	bx	lr
		c = (WCHAR)uni;
1a003086:	b280      	uxth	r0, r0
1a003088:	4770      	bx	lr
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
1a00308a:	2300      	movs	r3, #0
1a00308c:	2b7f      	cmp	r3, #127	; 0x7f
1a00308e:	d807      	bhi.n	1a0030a0 <ff_uni2oem+0x30>
1a003090:	4a06      	ldr	r2, [pc, #24]	; (1a0030ac <ff_uni2oem+0x3c>)
1a003092:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
1a003096:	4282      	cmp	r2, r0
1a003098:	d002      	beq.n	1a0030a0 <ff_uni2oem+0x30>
1a00309a:	3301      	adds	r3, #1
1a00309c:	b29b      	uxth	r3, r3
1a00309e:	e7f5      	b.n	1a00308c <ff_uni2oem+0x1c>
			c = (c + 0x80) & 0xFF;
1a0030a0:	3380      	adds	r3, #128	; 0x80
1a0030a2:	b2d8      	uxtb	r0, r3
1a0030a4:	4770      	bx	lr
	WCHAR c = 0;
1a0030a6:	2000      	movs	r0, #0
		}
	}

	return c;
}
1a0030a8:	4770      	bx	lr
1a0030aa:	bf00      	nop
1a0030ac:	1a006790 	.word	0x1a006790

1a0030b0 <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
1a0030b0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
1a0030b4:	d245      	bcs.n	1a003142 <ff_wtoupper+0x92>
{
1a0030b6:	b4f0      	push	{r4, r5, r6, r7}
		uc = (WORD)uni;
1a0030b8:	b287      	uxth	r7, r0
		p = uc < 0x1000 ? cvt1 : cvt2;
1a0030ba:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
1a0030be:	d201      	bcs.n	1a0030c4 <ff_wtoupper+0x14>
1a0030c0:	4b20      	ldr	r3, [pc, #128]	; (1a003144 <ff_wtoupper+0x94>)
1a0030c2:	e002      	b.n	1a0030ca <ff_wtoupper+0x1a>
1a0030c4:	4b20      	ldr	r3, [pc, #128]	; (1a003148 <ff_wtoupper+0x98>)
1a0030c6:	e000      	b.n	1a0030ca <ff_wtoupper+0x1a>
		for (;;) {
			bc = *p++;								/* Get the block base */
			if (bc == 0 || uc < bc) break;			/* Not matched? */
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
1a0030c8:	4633      	mov	r3, r6
			bc = *p++;								/* Get the block base */
1a0030ca:	881a      	ldrh	r2, [r3, #0]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
1a0030cc:	b1d2      	cbz	r2, 1a003104 <ff_wtoupper+0x54>
1a0030ce:	4297      	cmp	r7, r2
1a0030d0:	d318      	bcc.n	1a003104 <ff_wtoupper+0x54>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
1a0030d2:	1d1e      	adds	r6, r3, #4
1a0030d4:	885b      	ldrh	r3, [r3, #2]
1a0030d6:	0a19      	lsrs	r1, r3, #8
1a0030d8:	b2db      	uxtb	r3, r3
			if (uc < bc + nc) {	/* In the block? */
1a0030da:	b284      	uxth	r4, r0
1a0030dc:	189d      	adds	r5, r3, r2
1a0030de:	42ac      	cmp	r4, r5
1a0030e0:	db04      	blt.n	1a0030ec <ff_wtoupper+0x3c>
				case 7: uc -= 80; break;			/* Shift -80 */
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
1a0030e2:	2900      	cmp	r1, #0
1a0030e4:	d1f0      	bne.n	1a0030c8 <ff_wtoupper+0x18>
1a0030e6:	eb06 0343 	add.w	r3, r6, r3, lsl #1
1a0030ea:	e7ee      	b.n	1a0030ca <ff_wtoupper+0x1a>
				switch (cmd) {
1a0030ec:	2908      	cmp	r1, #8
1a0030ee:	d809      	bhi.n	1a003104 <ff_wtoupper+0x54>
1a0030f0:	e8df f001 	tbb	[pc, r1]
1a0030f4:	14110b05 	.word	0x14110b05
1a0030f8:	201d1a17 	.word	0x201d1a17
1a0030fc:	23          	.byte	0x23
1a0030fd:	00          	.byte	0x00
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
1a0030fe:	1aa4      	subs	r4, r4, r2
1a003100:	f836 7014 	ldrh.w	r7, [r6, r4, lsl #1]
		}
		uni = uc;
1a003104:	4638      	mov	r0, r7
	}

	return uni;
}
1a003106:	bcf0      	pop	{r4, r5, r6, r7}
1a003108:	4770      	bx	lr
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
1a00310a:	1aba      	subs	r2, r7, r2
1a00310c:	f002 0301 	and.w	r3, r2, #1
1a003110:	1aff      	subs	r7, r7, r3
1a003112:	b2bf      	uxth	r7, r7
1a003114:	e7f6      	b.n	1a003104 <ff_wtoupper+0x54>
				case 2: uc -= 16; break;			/* Shift -16 */
1a003116:	3f10      	subs	r7, #16
1a003118:	b2bf      	uxth	r7, r7
1a00311a:	e7f3      	b.n	1a003104 <ff_wtoupper+0x54>
				case 3:	uc -= 32; break;			/* Shift -32 */
1a00311c:	3f20      	subs	r7, #32
1a00311e:	b2bf      	uxth	r7, r7
1a003120:	e7f0      	b.n	1a003104 <ff_wtoupper+0x54>
				case 4:	uc -= 48; break;			/* Shift -48 */
1a003122:	3f30      	subs	r7, #48	; 0x30
1a003124:	b2bf      	uxth	r7, r7
1a003126:	e7ed      	b.n	1a003104 <ff_wtoupper+0x54>
				case 5:	uc -= 26; break;			/* Shift -26 */
1a003128:	3f1a      	subs	r7, #26
1a00312a:	b2bf      	uxth	r7, r7
1a00312c:	e7ea      	b.n	1a003104 <ff_wtoupper+0x54>
				case 6:	uc += 8; break;				/* Shift +8 */
1a00312e:	3708      	adds	r7, #8
1a003130:	b2bf      	uxth	r7, r7
1a003132:	e7e7      	b.n	1a003104 <ff_wtoupper+0x54>
				case 7: uc -= 80; break;			/* Shift -80 */
1a003134:	3f50      	subs	r7, #80	; 0x50
1a003136:	b2bf      	uxth	r7, r7
1a003138:	e7e4      	b.n	1a003104 <ff_wtoupper+0x54>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
1a00313a:	f5a7 57e3 	sub.w	r7, r7, #7264	; 0x1c60
1a00313e:	b2bf      	uxth	r7, r7
1a003140:	e7e0      	b.n	1a003104 <ff_wtoupper+0x54>
}
1a003142:	4770      	bx	lr
1a003144:	1a0064e0 	.word	0x1a0064e0
1a003148:	1a0066d4 	.word	0x1a0066d4

1a00314c <newCardStatus>:
static FSSDC_StatusUpdateCallback_Func  g_statusUpdateCallback = NULL;
static enum FSSDC_CardStatus            g_cardStatus = FSSDC_CardStatus_Removed;


static void newCardStatus (enum FSSDC_CardStatus cardStatus)
{
1a00314c:	b508      	push	{r3, lr}
    g_cardStatus = cardStatus;
1a00314e:	4b03      	ldr	r3, [pc, #12]	; (1a00315c <newCardStatus+0x10>)
1a003150:	7018      	strb	r0, [r3, #0]
    if (g_statusUpdateCallback)
1a003152:	4b03      	ldr	r3, [pc, #12]	; (1a003160 <newCardStatus+0x14>)
1a003154:	681b      	ldr	r3, [r3, #0]
1a003156:	b103      	cbz	r3, 1a00315a <newCardStatus+0xe>
    {
        g_statusUpdateCallback (g_cardStatus);
1a003158:	4798      	blx	r3
    }
}
1a00315a:	bd08      	pop	{r3, pc}
1a00315c:	10000000 	.word	0x10000000
1a003160:	100009f8 	.word	0x100009f8

1a003164 <chk_power>:

static
int chk_power(void)		/* Socket power state: 0=off, 1=on */
{
	return 1;
}
1a003164:	2001      	movs	r0, #1
1a003166:	4770      	bx	lr

1a003168 <SSPSend>:
{
1a003168:	b500      	push	{lr}
1a00316a:	b087      	sub	sp, #28
	xferConfig.tx_data = buf;
1a00316c:	9001      	str	r0, [sp, #4]
	xferConfig.tx_cnt  = 0;
1a00316e:	2300      	movs	r3, #0
1a003170:	9302      	str	r3, [sp, #8]
	xferConfig.rx_data = NULL;
1a003172:	9303      	str	r3, [sp, #12]
	xferConfig.rx_cnt  = 0;
1a003174:	9304      	str	r3, [sp, #16]
	xferConfig.length  = Length;
1a003176:	9105      	str	r1, [sp, #20]
	Chip_SSP_RWFrames_Blocking(LPC_SSP1, &xferConfig);
1a003178:	a901      	add	r1, sp, #4
1a00317a:	4803      	ldr	r0, [pc, #12]	; (1a003188 <SSPSend+0x20>)
1a00317c:	f001 fc05 	bl	1a00498a <Chip_SSP_RWFrames_Blocking>
}
1a003180:	b007      	add	sp, #28
1a003182:	f85d fb04 	ldr.w	pc, [sp], #4
1a003186:	bf00      	nop
1a003188:	400c5000 	.word	0x400c5000

1a00318c <xmit_spi>:
{
1a00318c:	b500      	push	{lr}
1a00318e:	b083      	sub	sp, #12
1a003190:	ab02      	add	r3, sp, #8
1a003192:	f803 0d01 	strb.w	r0, [r3, #-1]!
    SSPSend((uint8_t*) &dat, 1);
1a003196:	2101      	movs	r1, #1
1a003198:	4618      	mov	r0, r3
1a00319a:	f7ff ffe5 	bl	1a003168 <SSPSend>
}
1a00319e:	b003      	add	sp, #12
1a0031a0:	f85d fb04 	ldr.w	pc, [sp], #4

1a0031a4 <SSPReceive>:
{
1a0031a4:	b500      	push	{lr}
1a0031a6:	b087      	sub	sp, #28
	xferConfig.tx_data = NULL;
1a0031a8:	2300      	movs	r3, #0
1a0031aa:	9301      	str	r3, [sp, #4]
	xferConfig.tx_cnt  = 0;
1a0031ac:	9302      	str	r3, [sp, #8]
	xferConfig.rx_data = buf;
1a0031ae:	9003      	str	r0, [sp, #12]
	xferConfig.rx_cnt  = 0;
1a0031b0:	9304      	str	r3, [sp, #16]
	xferConfig.length  = Length;
1a0031b2:	9105      	str	r1, [sp, #20]
	Chip_SSP_RWFrames_Blocking(LPC_SSP1, &xferConfig);
1a0031b4:	a901      	add	r1, sp, #4
1a0031b6:	4803      	ldr	r0, [pc, #12]	; (1a0031c4 <SSPReceive+0x20>)
1a0031b8:	f001 fbe7 	bl	1a00498a <Chip_SSP_RWFrames_Blocking>
}
1a0031bc:	b007      	add	sp, #28
1a0031be:	f85d fb04 	ldr.w	pc, [sp], #4
1a0031c2:	bf00      	nop
1a0031c4:	400c5000 	.word	0x400c5000

1a0031c8 <rcvr_spi>:
{
1a0031c8:	b500      	push	{lr}
1a0031ca:	b083      	sub	sp, #12
    BYTE data = 0;
1a0031cc:	a802      	add	r0, sp, #8
1a0031ce:	2300      	movs	r3, #0
1a0031d0:	f800 3d01 	strb.w	r3, [r0, #-1]!
    SSPReceive(&data, 1);
1a0031d4:	2101      	movs	r1, #1
1a0031d6:	f7ff ffe5 	bl	1a0031a4 <SSPReceive>
}
1a0031da:	f89d 0007 	ldrb.w	r0, [sp, #7]
1a0031de:	b003      	add	sp, #12
1a0031e0:	f85d fb04 	ldr.w	pc, [sp], #4

1a0031e4 <wait_ready>:
{
1a0031e4:	b508      	push	{r3, lr}
	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
1a0031e6:	4b07      	ldr	r3, [pc, #28]	; (1a003204 <wait_ready+0x20>)
1a0031e8:	2232      	movs	r2, #50	; 0x32
1a0031ea:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
1a0031ec:	f7ff ffec 	bl	1a0031c8 <rcvr_spi>
		res = rcvr_spi();
1a0031f0:	f7ff ffea 	bl	1a0031c8 <rcvr_spi>
	while ((res != 0xFF) && Timer2);
1a0031f4:	28ff      	cmp	r0, #255	; 0xff
1a0031f6:	d003      	beq.n	1a003200 <wait_ready+0x1c>
1a0031f8:	4b02      	ldr	r3, [pc, #8]	; (1a003204 <wait_ready+0x20>)
1a0031fa:	781b      	ldrb	r3, [r3, #0]
1a0031fc:	2b00      	cmp	r3, #0
1a0031fe:	d1f7      	bne.n	1a0031f0 <wait_ready+0xc>
}
1a003200:	bd08      	pop	{r3, pc}
1a003202:	bf00      	nop
1a003204:	100009f6 	.word	0x100009f6

1a003208 <deselect>:
{
1a003208:	b508      	push	{r3, lr}
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutHigh(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->SET[port] = (1 << pin);
1a00320a:	4a04      	ldr	r2, [pc, #16]	; (1a00321c <deselect+0x14>)
1a00320c:	f242 230c 	movw	r3, #8716	; 0x220c
1a003210:	2101      	movs	r1, #1
1a003212:	50d1      	str	r1, [r2, r3]
	rcvr_spi();
1a003214:	f7ff ffd8 	bl	1a0031c8 <rcvr_spi>
}
1a003218:	bd08      	pop	{r3, pc}
1a00321a:	bf00      	nop
1a00321c:	400f4000 	.word	0x400f4000

1a003220 <select_>:
{
1a003220:	b508      	push	{r3, lr}
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutLow(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->CLR[port] = (1 << pin);
1a003222:	4a07      	ldr	r2, [pc, #28]	; (1a003240 <select_+0x20>)
1a003224:	f242 238c 	movw	r3, #8844	; 0x228c
1a003228:	2101      	movs	r1, #1
1a00322a:	50d1      	str	r1, [r2, r3]
	if (wait_ready() != 0xFF) {
1a00322c:	f7ff ffda 	bl	1a0031e4 <wait_ready>
1a003230:	28ff      	cmp	r0, #255	; 0xff
1a003232:	d003      	beq.n	1a00323c <select_+0x1c>
		deselect();
1a003234:	f7ff ffe8 	bl	1a003208 <deselect>
		return FALSE;
1a003238:	2000      	movs	r0, #0
}
1a00323a:	bd08      	pop	{r3, pc}
	return TRUE;
1a00323c:	2001      	movs	r0, #1
1a00323e:	e7fc      	b.n	1a00323a <select_+0x1a>
1a003240:	400f4000 	.word	0x400f4000

1a003244 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
1a003244:	b538      	push	{r3, r4, r5, lr}
1a003246:	4604      	mov	r4, r0
1a003248:	460d      	mov	r5, r1
	BYTE n, res;


    if (cmd & 0x80)                     /* ACMD<n> is the command sequense of CMD55-CMD<n> */
1a00324a:	f010 0f80 	tst.w	r0, #128	; 0x80
1a00324e:	d129      	bne.n	1a0032a4 <send_cmd+0x60>
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
1a003250:	f7ff ffda 	bl	1a003208 <deselect>
	if (!select_()) 
1a003254:	f7ff ffe4 	bl	1a003220 <select_>
1a003258:	b3a0      	cbz	r0, 1a0032c4 <send_cmd+0x80>
    {
        return 0xFF;
    }

	/* Send command packet */
	xmit_spi(cmd);						/* Start + Command index */
1a00325a:	4620      	mov	r0, r4
1a00325c:	f7ff ff96 	bl	1a00318c <xmit_spi>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
1a003260:	0e28      	lsrs	r0, r5, #24
1a003262:	f7ff ff93 	bl	1a00318c <xmit_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
1a003266:	f3c5 4007 	ubfx	r0, r5, #16, #8
1a00326a:	f7ff ff8f 	bl	1a00318c <xmit_spi>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
1a00326e:	f3c5 2007 	ubfx	r0, r5, #8, #8
1a003272:	f7ff ff8b 	bl	1a00318c <xmit_spi>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
1a003276:	b2e8      	uxtb	r0, r5
1a003278:	f7ff ff88 	bl	1a00318c <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
    
	if (cmd == CMD0_) 
1a00327c:	2c40      	cmp	r4, #64	; 0x40
1a00327e:	d01a      	beq.n	1a0032b6 <send_cmd+0x72>
	n = 0x01;							/* Dummy CRC + Stop */
1a003280:	2001      	movs	r0, #1
    {
        n = 0x95;                       /* Valid CRC for CMD0_(0) */
    }
    
	if (cmd == CMD8)
1a003282:	2c48      	cmp	r4, #72	; 0x48
1a003284:	d019      	beq.n	1a0032ba <send_cmd+0x76>
    {
        n = 0x87;                       /* Valid CRC for CMD8(0x1AA) */
    }
    
	xmit_spi(n);
1a003286:	f7ff ff81 	bl	1a00318c <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12) 
1a00328a:	2c4c      	cmp	r4, #76	; 0x4c
1a00328c:	d017      	beq.n	1a0032be <send_cmd+0x7a>
        n = 0x87;                       /* Valid CRC for CMD8(0x1AA) */
1a00328e:	240a      	movs	r4, #10
    }
    
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
    {
		res = rcvr_spi();
1a003290:	f7ff ff9a 	bl	1a0031c8 <rcvr_spi>
    }
	while ((res & 0x80) && --n);
1a003294:	f010 0f80 	tst.w	r0, #128	; 0x80
1a003298:	d015      	beq.n	1a0032c6 <send_cmd+0x82>
1a00329a:	1e63      	subs	r3, r4, #1
1a00329c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
1a0032a0:	d1f6      	bne.n	1a003290 <send_cmd+0x4c>
1a0032a2:	e010      	b.n	1a0032c6 <send_cmd+0x82>
		cmd &= 0x7F;
1a0032a4:	f000 047f 	and.w	r4, r0, #127	; 0x7f
		res = send_cmd(CMD55, 0);
1a0032a8:	2100      	movs	r1, #0
1a0032aa:	2077      	movs	r0, #119	; 0x77
1a0032ac:	f7ff ffca 	bl	1a003244 <send_cmd>
		if (res > 1) return res;
1a0032b0:	2801      	cmp	r0, #1
1a0032b2:	d808      	bhi.n	1a0032c6 <send_cmd+0x82>
1a0032b4:	e7cc      	b.n	1a003250 <send_cmd+0xc>
        n = 0x95;                       /* Valid CRC for CMD0_(0) */
1a0032b6:	2095      	movs	r0, #149	; 0x95
1a0032b8:	e7e3      	b.n	1a003282 <send_cmd+0x3e>
        n = 0x87;                       /* Valid CRC for CMD8(0x1AA) */
1a0032ba:	2087      	movs	r0, #135	; 0x87
1a0032bc:	e7e3      	b.n	1a003286 <send_cmd+0x42>
        rcvr_spi();                     /* Skip a stuff byte when stop reading */
1a0032be:	f7ff ff83 	bl	1a0031c8 <rcvr_spi>
1a0032c2:	e7e4      	b.n	1a00328e <send_cmd+0x4a>
        return 0xFF;
1a0032c4:	20ff      	movs	r0, #255	; 0xff

	return res;			/* Return with the response value */
}
1a0032c6:	bd38      	pop	{r3, r4, r5, pc}

1a0032c8 <xmit_datablock>:
{
1a0032c8:	b570      	push	{r4, r5, r6, lr}
1a0032ca:	4606      	mov	r6, r0
1a0032cc:	460c      	mov	r4, r1
	if (wait_ready() != 0xFF) 
1a0032ce:	f7ff ff89 	bl	1a0031e4 <wait_ready>
1a0032d2:	28ff      	cmp	r0, #255	; 0xff
1a0032d4:	d001      	beq.n	1a0032da <xmit_datablock+0x12>
        return FALSE;
1a0032d6:	2000      	movs	r0, #0
}
1a0032d8:	bd70      	pop	{r4, r5, r6, pc}
	xmit_spi(token);					/* Xmit data token */
1a0032da:	4620      	mov	r0, r4
1a0032dc:	f7ff ff56 	bl	1a00318c <xmit_spi>
	if (token != 0xFD)                  /* Is data token */
1a0032e0:	2cfd      	cmp	r4, #253	; 0xfd
1a0032e2:	d01b      	beq.n	1a00331c <xmit_datablock+0x54>
		wc = 0;
1a0032e4:	2400      	movs	r4, #0
			xmit_spi(*buff++);
1a0032e6:	4635      	mov	r5, r6
1a0032e8:	f815 0b02 	ldrb.w	r0, [r5], #2
1a0032ec:	f7ff ff4e 	bl	1a00318c <xmit_spi>
			xmit_spi(*buff++);
1a0032f0:	7870      	ldrb	r0, [r6, #1]
1a0032f2:	f7ff ff4b 	bl	1a00318c <xmit_spi>
        while (--wc);
1a0032f6:	1e63      	subs	r3, r4, #1
			xmit_spi(*buff++);
1a0032f8:	462e      	mov	r6, r5
        while (--wc);
1a0032fa:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
1a0032fe:	d1f2      	bne.n	1a0032e6 <xmit_datablock+0x1e>
		xmit_spi(0xFF);					/* CRC (Dummy) */
1a003300:	20ff      	movs	r0, #255	; 0xff
1a003302:	f7ff ff43 	bl	1a00318c <xmit_spi>
		xmit_spi(0xFF);
1a003306:	20ff      	movs	r0, #255	; 0xff
1a003308:	f7ff ff40 	bl	1a00318c <xmit_spi>
		resp = rcvr_spi();				/* Reveive data response */
1a00330c:	f7ff ff5c 	bl	1a0031c8 <rcvr_spi>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
1a003310:	f000 001f 	and.w	r0, r0, #31
1a003314:	2805      	cmp	r0, #5
1a003316:	d003      	beq.n	1a003320 <xmit_datablock+0x58>
			return FALSE;
1a003318:	2000      	movs	r0, #0
1a00331a:	e7dd      	b.n	1a0032d8 <xmit_datablock+0x10>
	return TRUE;
1a00331c:	2001      	movs	r0, #1
1a00331e:	e7db      	b.n	1a0032d8 <xmit_datablock+0x10>
1a003320:	2001      	movs	r0, #1
1a003322:	e7d9      	b.n	1a0032d8 <xmit_datablock+0x10>

1a003324 <rcvr_datablock>:
{
1a003324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003326:	4604      	mov	r4, r0
1a003328:	460e      	mov	r6, r1
	Timer1 = 20;
1a00332a:	4b15      	ldr	r3, [pc, #84]	; (1a003380 <rcvr_datablock+0x5c>)
1a00332c:	2214      	movs	r2, #20
1a00332e:	701a      	strb	r2, [r3, #0]
		token = rcvr_spi();
1a003330:	f7ff ff4a 	bl	1a0031c8 <rcvr_spi>
    while ((token == 0xFF) && Timer1);
1a003334:	28ff      	cmp	r0, #255	; 0xff
1a003336:	d103      	bne.n	1a003340 <rcvr_datablock+0x1c>
1a003338:	4b11      	ldr	r3, [pc, #68]	; (1a003380 <rcvr_datablock+0x5c>)
1a00333a:	781b      	ldrb	r3, [r3, #0]
1a00333c:	2b00      	cmp	r3, #0
1a00333e:	d1f7      	bne.n	1a003330 <rcvr_datablock+0xc>
	if (token != 0xFE) 
1a003340:	28fe      	cmp	r0, #254	; 0xfe
1a003342:	d001      	beq.n	1a003348 <rcvr_datablock+0x24>
        return FALSE;               /* If not valid data token, retutn with error */
1a003344:	2000      	movs	r0, #0
}
1a003346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rcvr_spi_m(buff++);
1a003348:	1c65      	adds	r5, r4, #1
1a00334a:	2101      	movs	r1, #1
1a00334c:	4620      	mov	r0, r4
1a00334e:	f7ff ff29 	bl	1a0031a4 <SSPReceive>
		rcvr_spi_m(buff++);
1a003352:	1ca7      	adds	r7, r4, #2
1a003354:	2101      	movs	r1, #1
1a003356:	4628      	mov	r0, r5
1a003358:	f7ff ff24 	bl	1a0031a4 <SSPReceive>
		rcvr_spi_m(buff++);
1a00335c:	1ce5      	adds	r5, r4, #3
1a00335e:	2101      	movs	r1, #1
1a003360:	4638      	mov	r0, r7
1a003362:	f7ff ff1f 	bl	1a0031a4 <SSPReceive>
		rcvr_spi_m(buff++);
1a003366:	2101      	movs	r1, #1
1a003368:	4628      	mov	r0, r5
1a00336a:	3404      	adds	r4, #4
1a00336c:	f7ff ff1a 	bl	1a0031a4 <SSPReceive>
    while (btr -= 4);
1a003370:	3e04      	subs	r6, #4
1a003372:	d1e9      	bne.n	1a003348 <rcvr_datablock+0x24>
	rcvr_spi();						/* Discard CRC */
1a003374:	f7ff ff28 	bl	1a0031c8 <rcvr_spi>
	rcvr_spi();
1a003378:	f7ff ff26 	bl	1a0031c8 <rcvr_spi>
	return TRUE;					/* Return with success */
1a00337c:	2001      	movs	r0, #1
1a00337e:	e7e2      	b.n	1a003346 <rcvr_datablock+0x22>
1a003380:	100009f5 	.word	0x100009f5

1a003384 <FSSDC_FatFs_DiskStatus>:
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS FSSDC_FatFs_DiskStatus ()
{
	return g_diskStats;
1a003384:	4b01      	ldr	r3, [pc, #4]	; (1a00338c <FSSDC_FatFs_DiskStatus+0x8>)
1a003386:	7818      	ldrb	r0, [r3, #0]
}
1a003388:	4770      	bx	lr
1a00338a:	bf00      	nop
1a00338c:	10000001 	.word	0x10000001

1a003390 <FSSDC_FatFs_DiskInitialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS FSSDC_FatFs_DiskInitialize ()
{
1a003390:	b570      	push	{r4, r5, r6, lr}
1a003392:	b082      	sub	sp, #8
	BYTE n, cmd, ty, ocr[4];

    if (g_diskStats & STA_NODISK)
1a003394:	4b5f      	ldr	r3, [pc, #380]	; (1a003514 <FSSDC_FatFs_DiskInitialize+0x184>)
1a003396:	781b      	ldrb	r3, [r3, #0]
1a003398:	f013 0f02 	tst.w	r3, #2
1a00339c:	d109      	bne.n	1a0033b2 <FSSDC_FatFs_DiskInitialize+0x22>
    {
        Board_UARTPutSTR ("FSSDC: [Init] No card in socket.\r\n");
        return g_diskStats;                 /* No card in the socket */
    }
    
    if (!(g_diskStats & STA_NOINIT))        /* Already initialized */
1a00339e:	4b5d      	ldr	r3, [pc, #372]	; (1a003514 <FSSDC_FatFs_DiskInitialize+0x184>)
1a0033a0:	781b      	ldrb	r3, [r3, #0]
1a0033a2:	f013 0f01 	tst.w	r3, #1
1a0033a6:	d10b      	bne.n	1a0033c0 <FSSDC_FatFs_DiskInitialize+0x30>
    {
        return g_diskStats;
1a0033a8:	4b5a      	ldr	r3, [pc, #360]	; (1a003514 <FSSDC_FatFs_DiskInitialize+0x184>)
1a0033aa:	7818      	ldrb	r0, [r3, #0]
1a0033ac:	b2c0      	uxtb	r0, r0
        Board_UARTPutSTR ("FSSDC: [Init] New card status: Error (Not Initialized).\r\n");        
        newCardStatus (FSSDC_CardStatus_Error); 
	}

	return g_diskStats;
}
1a0033ae:	b002      	add	sp, #8
1a0033b0:	bd70      	pop	{r4, r5, r6, pc}
        Board_UARTPutSTR ("FSSDC: [Init] No card in socket.\r\n");
1a0033b2:	4859      	ldr	r0, [pc, #356]	; (1a003518 <FSSDC_FatFs_DiskInitialize+0x188>)
1a0033b4:	f000 fc48 	bl	1a003c48 <Board_UARTPutSTR>
        return g_diskStats;                 /* No card in the socket */
1a0033b8:	4b56      	ldr	r3, [pc, #344]	; (1a003514 <FSSDC_FatFs_DiskInitialize+0x184>)
1a0033ba:	7818      	ldrb	r0, [r3, #0]
1a0033bc:	b2c0      	uxtb	r0, r0
1a0033be:	e7f6      	b.n	1a0033ae <FSSDC_FatFs_DiskInitialize+0x1e>
    Board_UARTPutSTR ("FSSDC: [Init] Initialization begins.\r\n");
1a0033c0:	4856      	ldr	r0, [pc, #344]	; (1a00351c <FSSDC_FatFs_DiskInitialize+0x18c>)
1a0033c2:	f000 fc41 	bl	1a003c48 <Board_UARTPutSTR>
	FCLK_SLOW();
1a0033c6:	4b56      	ldr	r3, [pc, #344]	; (1a003520 <FSSDC_FatFs_DiskInitialize+0x190>)
1a0033c8:	6819      	ldr	r1, [r3, #0]
1a0033ca:	4856      	ldr	r0, [pc, #344]	; (1a003524 <FSSDC_FatFs_DiskInitialize+0x194>)
1a0033cc:	f001 fb32 	bl	1a004a34 <Chip_SSP_SetBitRate>
	for (n = 10; n; n--) 
1a0033d0:	240a      	movs	r4, #10
1a0033d2:	e003      	b.n	1a0033dc <FSSDC_FatFs_DiskInitialize+0x4c>
        rcvr_spi();	/* 80 dummy clocks */
1a0033d4:	f7ff fef8 	bl	1a0031c8 <rcvr_spi>
	for (n = 10; n; n--) 
1a0033d8:	3c01      	subs	r4, #1
1a0033da:	b2e4      	uxtb	r4, r4
1a0033dc:	2c00      	cmp	r4, #0
1a0033de:	d1f9      	bne.n	1a0033d4 <FSSDC_FatFs_DiskInitialize+0x44>
    Board_UARTPutSTR ("FSSDC: [Init] New card status: Native Mode.\r\n");
1a0033e0:	4851      	ldr	r0, [pc, #324]	; (1a003528 <FSSDC_FatFs_DiskInitialize+0x198>)
1a0033e2:	f000 fc31 	bl	1a003c48 <Board_UARTPutSTR>
    newCardStatus (FSSDC_CardStatus_NativeMode);    
1a0033e6:	2003      	movs	r0, #3
1a0033e8:	f7ff feb0 	bl	1a00314c <newCardStatus>
	if (send_cmd(CMD0_, 0) == 1)                                /* Enter Idle state */
1a0033ec:	2100      	movs	r1, #0
1a0033ee:	2040      	movs	r0, #64	; 0x40
1a0033f0:	f7ff ff28 	bl	1a003244 <send_cmd>
1a0033f4:	4605      	mov	r5, r0
1a0033f6:	2801      	cmp	r0, #1
1a0033f8:	d019      	beq.n	1a00342e <FSSDC_FatFs_DiskInitialize+0x9e>
	CardType = ty;
1a0033fa:	4b4c      	ldr	r3, [pc, #304]	; (1a00352c <FSSDC_FatFs_DiskInitialize+0x19c>)
1a0033fc:	701c      	strb	r4, [r3, #0]
	deselect();
1a0033fe:	f7ff ff03 	bl	1a003208 <deselect>
    if (ty)                                             /* Initialization succeded */
1a003402:	2c00      	cmp	r4, #0
1a003404:	d07f      	beq.n	1a003506 <FSSDC_FatFs_DiskInitialize+0x176>
		g_diskStats &= ~STA_NOINIT;                     /* Clear STA_NOINIT */
1a003406:	4a43      	ldr	r2, [pc, #268]	; (1a003514 <FSSDC_FatFs_DiskInitialize+0x184>)
1a003408:	7813      	ldrb	r3, [r2, #0]
1a00340a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
1a00340e:	7013      	strb	r3, [r2, #0]
		FCLK_FAST();
1a003410:	4b47      	ldr	r3, [pc, #284]	; (1a003530 <FSSDC_FatFs_DiskInitialize+0x1a0>)
1a003412:	6819      	ldr	r1, [r3, #0]
1a003414:	4843      	ldr	r0, [pc, #268]	; (1a003524 <FSSDC_FatFs_DiskInitialize+0x194>)
1a003416:	f001 fb0d 	bl	1a004a34 <Chip_SSP_SetBitRate>
        Board_UARTPutSTR ("FSSDC: [Init] New card status: Ready (Fast Clock).\r\n");        
1a00341a:	4846      	ldr	r0, [pc, #280]	; (1a003534 <FSSDC_FatFs_DiskInitialize+0x1a4>)
1a00341c:	f000 fc14 	bl	1a003c48 <Board_UARTPutSTR>
        newCardStatus (FSSDC_CardStatus_Ready);        
1a003420:	2005      	movs	r0, #5
1a003422:	f7ff fe93 	bl	1a00314c <newCardStatus>
	return g_diskStats;
1a003426:	4b3b      	ldr	r3, [pc, #236]	; (1a003514 <FSSDC_FatFs_DiskInitialize+0x184>)
1a003428:	7818      	ldrb	r0, [r3, #0]
1a00342a:	b2c0      	uxtb	r0, r0
1a00342c:	e7bf      	b.n	1a0033ae <FSSDC_FatFs_DiskInitialize+0x1e>
        Board_UARTPutSTR ("FSSDC: [Init] New card status: Initializing.\r\n");        
1a00342e:	4842      	ldr	r0, [pc, #264]	; (1a003538 <FSSDC_FatFs_DiskInitialize+0x1a8>)
1a003430:	f000 fc0a 	bl	1a003c48 <Board_UARTPutSTR>
        newCardStatus (FSSDC_CardStatus_Initializing);
1a003434:	2004      	movs	r0, #4
1a003436:	f7ff fe89 	bl	1a00314c <newCardStatus>
		Timer1 = 100;                                           /* Initialization timeout of 1000 msec */
1a00343a:	4b40      	ldr	r3, [pc, #256]	; (1a00353c <FSSDC_FatFs_DiskInitialize+0x1ac>)
1a00343c:	2264      	movs	r2, #100	; 0x64
1a00343e:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1)                         /* SDHC */
1a003440:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
1a003444:	2048      	movs	r0, #72	; 0x48
1a003446:	f7ff fefd 	bl	1a003244 <send_cmd>
1a00344a:	2801      	cmp	r0, #1
1a00344c:	d139      	bne.n	1a0034c2 <FSSDC_FatFs_DiskInitialize+0x132>
			for (n = 0; n < 4; n++) 
1a00344e:	4625      	mov	r5, r4
1a003450:	e007      	b.n	1a003462 <FSSDC_FatFs_DiskInitialize+0xd2>
                ocr[n] = rcvr_spi();                            /* Get trailing return value of R7 resp */
1a003452:	f7ff feb9 	bl	1a0031c8 <rcvr_spi>
1a003456:	ab02      	add	r3, sp, #8
1a003458:	442b      	add	r3, r5
1a00345a:	f803 0c04 	strb.w	r0, [r3, #-4]
			for (n = 0; n < 4; n++) 
1a00345e:	3501      	adds	r5, #1
1a003460:	b2ed      	uxtb	r5, r5
1a003462:	2d03      	cmp	r5, #3
1a003464:	d9f5      	bls.n	1a003452 <FSSDC_FatFs_DiskInitialize+0xc2>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)               /* The card can work at vdd range of 2.7-3.6V */ 
1a003466:	f89d 3006 	ldrb.w	r3, [sp, #6]
1a00346a:	2b01      	cmp	r3, #1
1a00346c:	d1c5      	bne.n	1a0033fa <FSSDC_FatFs_DiskInitialize+0x6a>
1a00346e:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a003472:	2baa      	cmp	r3, #170	; 0xaa
1a003474:	d1c1      	bne.n	1a0033fa <FSSDC_FatFs_DiskInitialize+0x6a>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
1a003476:	4b31      	ldr	r3, [pc, #196]	; (1a00353c <FSSDC_FatFs_DiskInitialize+0x1ac>)
1a003478:	781b      	ldrb	r3, [r3, #0]
1a00347a:	b133      	cbz	r3, 1a00348a <FSSDC_FatFs_DiskInitialize+0xfa>
1a00347c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
1a003480:	20e9      	movs	r0, #233	; 0xe9
1a003482:	f7ff fedf 	bl	1a003244 <send_cmd>
1a003486:	2800      	cmp	r0, #0
1a003488:	d1f5      	bne.n	1a003476 <FSSDC_FatFs_DiskInitialize+0xe6>
                if (Timer1 && send_cmd(CMD58, 0) == 0) 
1a00348a:	4b2c      	ldr	r3, [pc, #176]	; (1a00353c <FSSDC_FatFs_DiskInitialize+0x1ac>)
1a00348c:	781b      	ldrb	r3, [r3, #0]
1a00348e:	2b00      	cmp	r3, #0
1a003490:	d0b3      	beq.n	1a0033fa <FSSDC_FatFs_DiskInitialize+0x6a>
1a003492:	2100      	movs	r1, #0
1a003494:	207a      	movs	r0, #122	; 0x7a
1a003496:	f7ff fed5 	bl	1a003244 <send_cmd>
1a00349a:	4605      	mov	r5, r0
1a00349c:	b140      	cbz	r0, 1a0034b0 <FSSDC_FatFs_DiskInitialize+0x120>
1a00349e:	e7ac      	b.n	1a0033fa <FSSDC_FatFs_DiskInitialize+0x6a>
                        ocr[n] = rcvr_spi();
1a0034a0:	f7ff fe92 	bl	1a0031c8 <rcvr_spi>
1a0034a4:	ab02      	add	r3, sp, #8
1a0034a6:	442b      	add	r3, r5
1a0034a8:	f803 0c04 	strb.w	r0, [r3, #-4]
					for (n = 0; n < 4; n++)                     /* Check CCS bit in the OCR */
1a0034ac:	3501      	adds	r5, #1
1a0034ae:	b2ed      	uxtb	r5, r5
1a0034b0:	2d03      	cmp	r5, #3
1a0034b2:	d9f5      	bls.n	1a0034a0 <FSSDC_FatFs_DiskInitialize+0x110>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
1a0034b4:	f89d 3004 	ldrb.w	r3, [sp, #4]
1a0034b8:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0034bc:	d021      	beq.n	1a003502 <FSSDC_FatFs_DiskInitialize+0x172>
1a0034be:	240c      	movs	r4, #12
1a0034c0:	e79b      	b.n	1a0033fa <FSSDC_FatFs_DiskInitialize+0x6a>
			if (send_cmd(ACMD41, 0) <= 1)
1a0034c2:	2100      	movs	r1, #0
1a0034c4:	20e9      	movs	r0, #233	; 0xe9
1a0034c6:	f7ff febd 	bl	1a003244 <send_cmd>
1a0034ca:	2801      	cmp	r0, #1
1a0034cc:	d916      	bls.n	1a0034fc <FSSDC_FatFs_DiskInitialize+0x16c>
				ty = CT_MMC; cmd = CMD1;                        /* MMCv3 */
1a0034ce:	2641      	movs	r6, #65	; 0x41
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
1a0034d0:	4b1a      	ldr	r3, [pc, #104]	; (1a00353c <FSSDC_FatFs_DiskInitialize+0x1ac>)
1a0034d2:	781b      	ldrb	r3, [r3, #0]
1a0034d4:	b12b      	cbz	r3, 1a0034e2 <FSSDC_FatFs_DiskInitialize+0x152>
1a0034d6:	2100      	movs	r1, #0
1a0034d8:	4630      	mov	r0, r6
1a0034da:	f7ff feb3 	bl	1a003244 <send_cmd>
1a0034de:	2800      	cmp	r0, #0
1a0034e0:	d1f6      	bne.n	1a0034d0 <FSSDC_FatFs_DiskInitialize+0x140>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
1a0034e2:	4b16      	ldr	r3, [pc, #88]	; (1a00353c <FSSDC_FatFs_DiskInitialize+0x1ac>)
1a0034e4:	781b      	ldrb	r3, [r3, #0]
1a0034e6:	2b00      	cmp	r3, #0
1a0034e8:	d087      	beq.n	1a0033fa <FSSDC_FatFs_DiskInitialize+0x6a>
1a0034ea:	f44f 7100 	mov.w	r1, #512	; 0x200
1a0034ee:	2050      	movs	r0, #80	; 0x50
1a0034f0:	f7ff fea8 	bl	1a003244 <send_cmd>
1a0034f4:	2800      	cmp	r0, #0
1a0034f6:	d180      	bne.n	1a0033fa <FSSDC_FatFs_DiskInitialize+0x6a>
1a0034f8:	462c      	mov	r4, r5
1a0034fa:	e77e      	b.n	1a0033fa <FSSDC_FatFs_DiskInitialize+0x6a>
				ty = CT_SD1; cmd = ACMD41;                      /* SDv1 */
1a0034fc:	2502      	movs	r5, #2
1a0034fe:	26e9      	movs	r6, #233	; 0xe9
1a003500:	e7e6      	b.n	1a0034d0 <FSSDC_FatFs_DiskInitialize+0x140>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
1a003502:	2404      	movs	r4, #4
1a003504:	e779      	b.n	1a0033fa <FSSDC_FatFs_DiskInitialize+0x6a>
        Board_UARTPutSTR ("FSSDC: [Init] New card status: Error (Not Initialized).\r\n");        
1a003506:	480e      	ldr	r0, [pc, #56]	; (1a003540 <FSSDC_FatFs_DiskInitialize+0x1b0>)
1a003508:	f000 fb9e 	bl	1a003c48 <Board_UARTPutSTR>
        newCardStatus (FSSDC_CardStatus_Error); 
1a00350c:	2000      	movs	r0, #0
1a00350e:	f7ff fe1d 	bl	1a00314c <newCardStatus>
1a003512:	e788      	b.n	1a003426 <FSSDC_FatFs_DiskInitialize+0x96>
1a003514:	10000001 	.word	0x10000001
1a003518:	1a006890 	.word	0x1a006890
1a00351c:	1a0068b4 	.word	0x1a0068b4
1a003520:	10000008 	.word	0x10000008
1a003524:	400c5000 	.word	0x400c5000
1a003528:	1a0068dc 	.word	0x1a0068dc
1a00352c:	100009f4 	.word	0x100009f4
1a003530:	10000004 	.word	0x10000004
1a003534:	1a00693c 	.word	0x1a00693c
1a003538:	1a00690c 	.word	0x1a00690c
1a00353c:	100009f5 	.word	0x100009f5
1a003540:	1a006974 	.word	0x1a006974

1a003544 <FSSDC_FatFs_DiskRead>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/
DRESULT FSSDC_FatFs_DiskRead (BYTE *buff, DWORD sector, UINT count)
{   
1a003544:	b538      	push	{r3, r4, r5, lr}
	if (g_diskStats & STA_NOINIT)
1a003546:	4b1d      	ldr	r3, [pc, #116]	; (1a0035bc <FSSDC_FatFs_DiskRead+0x78>)
1a003548:	781b      	ldrb	r3, [r3, #0]
1a00354a:	f013 0f01 	tst.w	r3, #1
1a00354e:	d121      	bne.n	1a003594 <FSSDC_FatFs_DiskRead+0x50>
1a003550:	4605      	mov	r5, r0
1a003552:	4614      	mov	r4, r2
    {
        Board_UARTPutSTR ("FSSDC: [Read] Card not initialized.\r\n");
        return RES_NOTRDY;
    }

	if (!(CardType & CT_BLOCK)) 
1a003554:	4b1a      	ldr	r3, [pc, #104]	; (1a0035c0 <FSSDC_FatFs_DiskRead+0x7c>)
1a003556:	781b      	ldrb	r3, [r3, #0]
1a003558:	f013 0f08 	tst.w	r3, #8
1a00355c:	d100      	bne.n	1a003560 <FSSDC_FatFs_DiskRead+0x1c>
    {
        sector *= 512;                      /* Convert to byte address if needed */
1a00355e:	0249      	lsls	r1, r1, #9
    }

	if (count == 1) 
1a003560:	2c01      	cmp	r4, #1
1a003562:	d01c      	beq.n	1a00359e <FSSDC_FatFs_DiskRead+0x5a>
			&& rcvr_datablock(buff, 512))
			count = 0;
	}
	else 
    {                                       /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) 
1a003564:	2052      	movs	r0, #82	; 0x52
1a003566:	f7ff fe6d 	bl	1a003244 <send_cmd>
1a00356a:	b968      	cbnz	r0, 1a003588 <FSSDC_FatFs_DiskRead+0x44>
        {                                   /* READ_MULTIPLE_BLOCK */
			do 
            {
				if (!rcvr_datablock(buff, 512)) 
1a00356c:	f44f 7100 	mov.w	r1, #512	; 0x200
1a003570:	4628      	mov	r0, r5
1a003572:	f7ff fed7 	bl	1a003324 <rcvr_datablock>
1a003576:	b118      	cbz	r0, 1a003580 <FSSDC_FatFs_DiskRead+0x3c>
                {
                    break;
                }
				buff += 512;
1a003578:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} 
            while (--count);
1a00357c:	3c01      	subs	r4, #1
1a00357e:	d1f5      	bne.n	1a00356c <FSSDC_FatFs_DiskRead+0x28>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
1a003580:	2100      	movs	r1, #0
1a003582:	204c      	movs	r0, #76	; 0x4c
1a003584:	f7ff fe5e 	bl	1a003244 <send_cmd>
		}
	}
	deselect();
1a003588:	f7ff fe3e 	bl	1a003208 <deselect>

	return count ? RES_ERROR : RES_OK;
1a00358c:	1c20      	adds	r0, r4, #0
1a00358e:	bf18      	it	ne
1a003590:	2001      	movne	r0, #1
}
1a003592:	bd38      	pop	{r3, r4, r5, pc}
        Board_UARTPutSTR ("FSSDC: [Read] Card not initialized.\r\n");
1a003594:	480b      	ldr	r0, [pc, #44]	; (1a0035c4 <FSSDC_FatFs_DiskRead+0x80>)
1a003596:	f000 fb57 	bl	1a003c48 <Board_UARTPutSTR>
        return RES_NOTRDY;
1a00359a:	2003      	movs	r0, #3
1a00359c:	e7f9      	b.n	1a003592 <FSSDC_FatFs_DiskRead+0x4e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
1a00359e:	2051      	movs	r0, #81	; 0x51
1a0035a0:	f7ff fe50 	bl	1a003244 <send_cmd>
1a0035a4:	2800      	cmp	r0, #0
1a0035a6:	d1ef      	bne.n	1a003588 <FSSDC_FatFs_DiskRead+0x44>
			&& rcvr_datablock(buff, 512))
1a0035a8:	f44f 7100 	mov.w	r1, #512	; 0x200
1a0035ac:	4628      	mov	r0, r5
1a0035ae:	f7ff feb9 	bl	1a003324 <rcvr_datablock>
1a0035b2:	2800      	cmp	r0, #0
1a0035b4:	d0e8      	beq.n	1a003588 <FSSDC_FatFs_DiskRead+0x44>
			count = 0;
1a0035b6:	2400      	movs	r4, #0
1a0035b8:	e7e6      	b.n	1a003588 <FSSDC_FatFs_DiskRead+0x44>
1a0035ba:	bf00      	nop
1a0035bc:	10000001 	.word	0x10000001
1a0035c0:	100009f4 	.word	0x100009f4
1a0035c4:	1a0069fc 	.word	0x1a0069fc

1a0035c8 <FSSDC_FatFs_DiskWrite>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
DRESULT FSSDC_FatFs_DiskWrite (const BYTE *buff, DWORD sector, UINT count)
{
1a0035c8:	b570      	push	{r4, r5, r6, lr}
	if (g_diskStats & STA_NOINIT)
1a0035ca:	4b28      	ldr	r3, [pc, #160]	; (1a00366c <FSSDC_FatFs_DiskWrite+0xa4>)
1a0035cc:	781b      	ldrb	r3, [r3, #0]
1a0035ce:	f013 0f01 	tst.w	r3, #1
1a0035d2:	d12b      	bne.n	1a00362c <FSSDC_FatFs_DiskWrite+0x64>
1a0035d4:	4605      	mov	r5, r0
1a0035d6:	460e      	mov	r6, r1
1a0035d8:	4614      	mov	r4, r2
    {
        Board_UARTPutSTR ("FSSDC: [Write] Card not initialized.\r\n");
        return RES_NOTRDY;
    }
    
	if (g_diskStats & STA_PROTECT)
1a0035da:	4b24      	ldr	r3, [pc, #144]	; (1a00366c <FSSDC_FatFs_DiskWrite+0xa4>)
1a0035dc:	781b      	ldrb	r3, [r3, #0]
1a0035de:	f013 0f04 	tst.w	r3, #4
1a0035e2:	d128      	bne.n	1a003636 <FSSDC_FatFs_DiskWrite+0x6e>
    {
        Board_UARTPutSTR ("FSSDC: [Write] Card is write protected.\r\n");
        return RES_WRPRT;
    }

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
1a0035e4:	4b22      	ldr	r3, [pc, #136]	; (1a003670 <FSSDC_FatFs_DiskWrite+0xa8>)
1a0035e6:	781b      	ldrb	r3, [r3, #0]
1a0035e8:	f013 0f08 	tst.w	r3, #8
1a0035ec:	d100      	bne.n	1a0035f0 <FSSDC_FatFs_DiskWrite+0x28>
1a0035ee:	024e      	lsls	r6, r1, #9

	if (count == 1) 
1a0035f0:	2c01      	cmp	r4, #1
1a0035f2:	d025      	beq.n	1a003640 <FSSDC_FatFs_DiskWrite+0x78>
			count = 0;
        }
	}
	else 
    {                                           /* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
1a0035f4:	f013 0f06 	tst.w	r3, #6
1a0035f8:	d130      	bne.n	1a00365c <FSSDC_FatFs_DiskWrite+0x94>
		if (send_cmd(CMD25, sector) == 0) 
1a0035fa:	4631      	mov	r1, r6
1a0035fc:	2059      	movs	r0, #89	; 0x59
1a0035fe:	f7ff fe21 	bl	1a003244 <send_cmd>
1a003602:	b968      	cbnz	r0, 1a003620 <FSSDC_FatFs_DiskWrite+0x58>
        {                                       /* WRITE_MULTIPLE_BLOCK */
			do 
            {
				if (!xmit_datablock(buff, 0xFC))
1a003604:	21fc      	movs	r1, #252	; 0xfc
1a003606:	4628      	mov	r0, r5
1a003608:	f7ff fe5e 	bl	1a0032c8 <xmit_datablock>
1a00360c:	b118      	cbz	r0, 1a003616 <FSSDC_FatFs_DiskWrite+0x4e>
                {
                    break;
                }
				buff += 512;
1a00360e:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} 
            while (--count);
1a003612:	3c01      	subs	r4, #1
1a003614:	d1f6      	bne.n	1a003604 <FSSDC_FatFs_DiskWrite+0x3c>
			if (!xmit_datablock(0, 0xFD))       /* STOP_TRAN token */
1a003616:	21fd      	movs	r1, #253	; 0xfd
1a003618:	2000      	movs	r0, #0
1a00361a:	f7ff fe55 	bl	1a0032c8 <xmit_datablock>
1a00361e:	b310      	cbz	r0, 1a003666 <FSSDC_FatFs_DiskWrite+0x9e>
            {
				count = 1;
            }
		}
	}
	deselect();
1a003620:	f7ff fdf2 	bl	1a003208 <deselect>

	return count ? RES_ERROR : RES_OK;
1a003624:	1c20      	adds	r0, r4, #0
1a003626:	bf18      	it	ne
1a003628:	2001      	movne	r0, #1
}
1a00362a:	bd70      	pop	{r4, r5, r6, pc}
        Board_UARTPutSTR ("FSSDC: [Write] Card not initialized.\r\n");
1a00362c:	4811      	ldr	r0, [pc, #68]	; (1a003674 <FSSDC_FatFs_DiskWrite+0xac>)
1a00362e:	f000 fb0b 	bl	1a003c48 <Board_UARTPutSTR>
        return RES_NOTRDY;
1a003632:	2003      	movs	r0, #3
1a003634:	e7f9      	b.n	1a00362a <FSSDC_FatFs_DiskWrite+0x62>
        Board_UARTPutSTR ("FSSDC: [Write] Card is write protected.\r\n");
1a003636:	4810      	ldr	r0, [pc, #64]	; (1a003678 <FSSDC_FatFs_DiskWrite+0xb0>)
1a003638:	f000 fb06 	bl	1a003c48 <Board_UARTPutSTR>
        return RES_WRPRT;
1a00363c:	2002      	movs	r0, #2
1a00363e:	e7f4      	b.n	1a00362a <FSSDC_FatFs_DiskWrite+0x62>
		if ((send_cmd(CMD24, sector) == 0)      /* WRITE_BLOCK */
1a003640:	4631      	mov	r1, r6
1a003642:	2058      	movs	r0, #88	; 0x58
1a003644:	f7ff fdfe 	bl	1a003244 <send_cmd>
1a003648:	2800      	cmp	r0, #0
1a00364a:	d1e9      	bne.n	1a003620 <FSSDC_FatFs_DiskWrite+0x58>
                    && xmit_datablock(buff, 0xFE))
1a00364c:	21fe      	movs	r1, #254	; 0xfe
1a00364e:	4628      	mov	r0, r5
1a003650:	f7ff fe3a 	bl	1a0032c8 <xmit_datablock>
1a003654:	2800      	cmp	r0, #0
1a003656:	d0e3      	beq.n	1a003620 <FSSDC_FatFs_DiskWrite+0x58>
			count = 0;
1a003658:	2400      	movs	r4, #0
1a00365a:	e7e1      	b.n	1a003620 <FSSDC_FatFs_DiskWrite+0x58>
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
1a00365c:	4621      	mov	r1, r4
1a00365e:	20d7      	movs	r0, #215	; 0xd7
1a003660:	f7ff fdf0 	bl	1a003244 <send_cmd>
1a003664:	e7c9      	b.n	1a0035fa <FSSDC_FatFs_DiskWrite+0x32>
				count = 1;
1a003666:	2401      	movs	r4, #1
1a003668:	e7da      	b.n	1a003620 <FSSDC_FatFs_DiskWrite+0x58>
1a00366a:	bf00      	nop
1a00366c:	10000001 	.word	0x10000001
1a003670:	100009f4 	.word	0x100009f4
1a003674:	1a006a24 	.word	0x1a006a24
1a003678:	1a006a4c 	.word	0x1a006a4c

1a00367c <FSSDC_FatFs_DiskIoCtl>:

/*-----------------------------------------------------------------------*/
/* Miscellaneous Functions                                               */
/*-----------------------------------------------------------------------*/
DRESULT FSSDC_FatFs_DiskIoCtl (BYTE cmd, void *buff)
{
1a00367c:	b570      	push	{r4, r5, r6, lr}
1a00367e:	b084      	sub	sp, #16
1a003680:	460d      	mov	r5, r1
	BYTE n, csd[16], *ptr = buff;
	WORD csize;

	res = RES_ERROR;

	if (cmd == CTRL_POWER)
1a003682:	2805      	cmp	r0, #5
1a003684:	d018      	beq.n	1a0036b8 <FSSDC_FatFs_DiskIoCtl+0x3c>
			res = RES_PARERR;
		}
	}
	else 
    {
		if (g_diskStats & STA_NOINIT)
1a003686:	4bb3      	ldr	r3, [pc, #716]	; (1a003954 <FSSDC_FatFs_DiskIoCtl+0x2d8>)
1a003688:	781b      	ldrb	r3, [r3, #0]
1a00368a:	f013 0f01 	tst.w	r3, #1
1a00368e:	d11f      	bne.n	1a0036d0 <FSSDC_FatFs_DiskIoCtl+0x54>
        {
            Board_UARTPutSTR ("FSSDC: [IOCtl] Card not initialized.\r\n");
            return RES_NOTRDY;
        }

		switch (cmd) {
1a003690:	280e      	cmp	r0, #14
1a003692:	f200 814a 	bhi.w	1a00392a <FSSDC_FatFs_DiskIoCtl+0x2ae>
1a003696:	e8df f010 	tbh	[pc, r0, lsl #1]
1a00369a:	0020      	.short	0x0020
1a00369c:	006f002d 	.word	0x006f002d
1a0036a0:	01480076 	.word	0x01480076
1a0036a4:	01480148 	.word	0x01480148
1a0036a8:	01480148 	.word	0x01480148
1a0036ac:	00d30148 	.word	0x00d30148
1a0036b0:	00ea00da 	.word	0x00ea00da
1a0036b4:	010c00f8 	.word	0x010c00f8
		switch (*ptr) {
1a0036b8:	780b      	ldrb	r3, [r1, #0]
1a0036ba:	2b01      	cmp	r3, #1
1a0036bc:	f240 8148 	bls.w	1a003950 <FSSDC_FatFs_DiskIoCtl+0x2d4>
1a0036c0:	2b02      	cmp	r3, #2
1a0036c2:	f040 813e 	bne.w	1a003942 <FSSDC_FatFs_DiskIoCtl+0x2c6>
			*(ptr+1) = (BYTE)chk_power();
1a0036c6:	f7ff fd4d 	bl	1a003164 <chk_power>
1a0036ca:	7068      	strb	r0, [r5, #1]
			res = RES_OK;
1a0036cc:	2400      	movs	r4, #0
1a0036ce:	e13c      	b.n	1a00394a <FSSDC_FatFs_DiskIoCtl+0x2ce>
            Board_UARTPutSTR ("FSSDC: [IOCtl] Card not initialized.\r\n");
1a0036d0:	48a1      	ldr	r0, [pc, #644]	; (1a003958 <FSSDC_FatFs_DiskIoCtl+0x2dc>)
1a0036d2:	f000 fab9 	bl	1a003c48 <Board_UARTPutSTR>
            return RES_NOTRDY;
1a0036d6:	2403      	movs	r4, #3
1a0036d8:	e137      	b.n	1a00394a <FSSDC_FatFs_DiskIoCtl+0x2ce>
		case CTRL_SYNC :                    /* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select_()) 
1a0036da:	f7ff fda1 	bl	1a003220 <select_>
1a0036de:	b918      	cbnz	r0, 1a0036e8 <FSSDC_FatFs_DiskIoCtl+0x6c>

		default:
			res = RES_PARERR;
		}

		deselect();
1a0036e0:	f7ff fd92 	bl	1a003208 <deselect>
	res = RES_ERROR;
1a0036e4:	2401      	movs	r4, #1
1a0036e6:	e12d      	b.n	1a003944 <FSSDC_FatFs_DiskIoCtl+0x2c8>
				deselect();
1a0036e8:	f7ff fd8e 	bl	1a003208 <deselect>
		deselect();
1a0036ec:	f7ff fd8c 	bl	1a003208 <deselect>
				res = RES_OK;
1a0036f0:	2400      	movs	r4, #0
1a0036f2:	e12a      	b.n	1a00394a <FSSDC_FatFs_DiskIoCtl+0x2ce>
			if ((send_cmd(CMD9, 0) == 0) 
1a0036f4:	2100      	movs	r1, #0
1a0036f6:	2049      	movs	r0, #73	; 0x49
1a0036f8:	f7ff fda4 	bl	1a003244 <send_cmd>
1a0036fc:	2800      	cmp	r0, #0
1a0036fe:	f040 8110 	bne.w	1a003922 <FSSDC_FatFs_DiskIoCtl+0x2a6>
                    && rcvr_datablock(csd, 16))
1a003702:	2110      	movs	r1, #16
1a003704:	4668      	mov	r0, sp
1a003706:	f7ff fe0d 	bl	1a003324 <rcvr_datablock>
1a00370a:	2800      	cmp	r0, #0
1a00370c:	f000 8115 	beq.w	1a00393a <FSSDC_FatFs_DiskIoCtl+0x2be>
				if ((csd[0] >> 6) == 1) 
1a003710:	f89d 3000 	ldrb.w	r3, [sp]
1a003714:	099b      	lsrs	r3, r3, #6
1a003716:	2b01      	cmp	r3, #1
1a003718:	d022      	beq.n	1a003760 <FSSDC_FatFs_DiskIoCtl+0xe4>
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
1a00371a:	f89d 2005 	ldrb.w	r2, [sp, #5]
1a00371e:	f002 020f 	and.w	r2, r2, #15
1a003722:	f89d 300a 	ldrb.w	r3, [sp, #10]
1a003726:	eb02 12d3 	add.w	r2, r2, r3, lsr #7
1a00372a:	f89d 3009 	ldrb.w	r3, [sp, #9]
1a00372e:	005b      	lsls	r3, r3, #1
1a003730:	f003 0306 	and.w	r3, r3, #6
1a003734:	441a      	add	r2, r3
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
1a003736:	f89d 3008 	ldrb.w	r3, [sp, #8]
1a00373a:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a00373e:	099b      	lsrs	r3, r3, #6
1a003740:	eb03 0381 	add.w	r3, r3, r1, lsl #2
1a003744:	f89d 1006 	ldrb.w	r1, [sp, #6]
1a003748:	0289      	lsls	r1, r1, #10
1a00374a:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
1a00374e:	440b      	add	r3, r1
1a003750:	3301      	adds	r3, #1
					*(DWORD*)buff = (DWORD)csize << (n - 9);
1a003752:	3a07      	subs	r2, #7
1a003754:	4093      	lsls	r3, r2
1a003756:	602b      	str	r3, [r5, #0]
		deselect();
1a003758:	f7ff fd56 	bl	1a003208 <deselect>
				res = RES_OK;
1a00375c:	2400      	movs	r4, #0
1a00375e:	e0f4      	b.n	1a00394a <FSSDC_FatFs_DiskIoCtl+0x2ce>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
1a003760:	f89d 3009 	ldrb.w	r3, [sp, #9]
1a003764:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003768:	eb03 2302 	add.w	r3, r3, r2, lsl #8
1a00376c:	b29b      	uxth	r3, r3
1a00376e:	3301      	adds	r3, #1
1a003770:	b29b      	uxth	r3, r3
					*(DWORD*)buff = (DWORD)csize << 10;
1a003772:	029b      	lsls	r3, r3, #10
1a003774:	602b      	str	r3, [r5, #0]
1a003776:	e7ef      	b.n	1a003758 <FSSDC_FatFs_DiskIoCtl+0xdc>
			*(WORD*)buff = 512;
1a003778:	f44f 7300 	mov.w	r3, #512	; 0x200
1a00377c:	800b      	strh	r3, [r1, #0]
		deselect();
1a00377e:	f7ff fd43 	bl	1a003208 <deselect>
			res = RES_OK;
1a003782:	2400      	movs	r4, #0
1a003784:	e0e1      	b.n	1a00394a <FSSDC_FatFs_DiskIoCtl+0x2ce>
			if (CardType & CT_SD2) {                            /* SDC ver 2.00 */
1a003786:	4b75      	ldr	r3, [pc, #468]	; (1a00395c <FSSDC_FatFs_DiskIoCtl+0x2e0>)
1a003788:	781b      	ldrb	r3, [r3, #0]
1a00378a:	f013 0f04 	tst.w	r3, #4
1a00378e:	d020      	beq.n	1a0037d2 <FSSDC_FatFs_DiskIoCtl+0x156>
				if (send_cmd(ACMD13, 0) == 0)                   /* Read SD status */
1a003790:	2100      	movs	r1, #0
1a003792:	20cd      	movs	r0, #205	; 0xcd
1a003794:	f7ff fd56 	bl	1a003244 <send_cmd>
1a003798:	2800      	cmp	r0, #0
1a00379a:	f040 80ba 	bne.w	1a003912 <FSSDC_FatFs_DiskIoCtl+0x296>
					rcvr_spi();
1a00379e:	f7ff fd13 	bl	1a0031c8 <rcvr_spi>
					if (rcvr_datablock(csd, 16))                /* Read partial block */
1a0037a2:	2110      	movs	r1, #16
1a0037a4:	4668      	mov	r0, sp
1a0037a6:	f7ff fdbd 	bl	1a003324 <rcvr_datablock>
1a0037aa:	2800      	cmp	r0, #0
1a0037ac:	f000 80b5 	beq.w	1a00391a <FSSDC_FatFs_DiskIoCtl+0x29e>
						for (n = 64 - 16; n; n--) 
1a0037b0:	2430      	movs	r4, #48	; 0x30
1a0037b2:	e003      	b.n	1a0037bc <FSSDC_FatFs_DiskIoCtl+0x140>
                            rcvr_spi();                         /* Purge trailing data */
1a0037b4:	f7ff fd08 	bl	1a0031c8 <rcvr_spi>
						for (n = 64 - 16; n; n--) 
1a0037b8:	3c01      	subs	r4, #1
1a0037ba:	b2e4      	uxtb	r4, r4
1a0037bc:	2c00      	cmp	r4, #0
1a0037be:	d1f9      	bne.n	1a0037b4 <FSSDC_FatFs_DiskIoCtl+0x138>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
1a0037c0:	f89d 300a 	ldrb.w	r3, [sp, #10]
1a0037c4:	091a      	lsrs	r2, r3, #4
1a0037c6:	2310      	movs	r3, #16
1a0037c8:	4093      	lsls	r3, r2
1a0037ca:	602b      	str	r3, [r5, #0]
		deselect();
1a0037cc:	f7ff fd1c 	bl	1a003208 <deselect>
1a0037d0:	e0bb      	b.n	1a00394a <FSSDC_FatFs_DiskIoCtl+0x2ce>
				if ((send_cmd(CMD9, 0) == 0) 
1a0037d2:	2100      	movs	r1, #0
1a0037d4:	2049      	movs	r0, #73	; 0x49
1a0037d6:	f7ff fd35 	bl	1a003244 <send_cmd>
1a0037da:	2800      	cmp	r0, #0
1a0037dc:	f040 80a9 	bne.w	1a003932 <FSSDC_FatFs_DiskIoCtl+0x2b6>
                        && rcvr_datablock(csd, 16)) 
1a0037e0:	2110      	movs	r1, #16
1a0037e2:	4668      	mov	r0, sp
1a0037e4:	f7ff fd9e 	bl	1a003324 <rcvr_datablock>
1a0037e8:	2800      	cmp	r0, #0
1a0037ea:	f000 808e 	beq.w	1a00390a <FSSDC_FatFs_DiskIoCtl+0x28e>
					if (CardType & CT_SD1)
1a0037ee:	4b5b      	ldr	r3, [pc, #364]	; (1a00395c <FSSDC_FatFs_DiskIoCtl+0x2e0>)
1a0037f0:	781b      	ldrb	r3, [r3, #0]
1a0037f2:	f013 0f02 	tst.w	r3, #2
1a0037f6:	d013      	beq.n	1a003820 <FSSDC_FatFs_DiskIoCtl+0x1a4>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
1a0037f8:	f89d 300a 	ldrb.w	r3, [sp, #10]
1a0037fc:	005b      	lsls	r3, r3, #1
1a0037fe:	f003 037e 	and.w	r3, r3, #126	; 0x7e
1a003802:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a003806:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
1a00380a:	3301      	adds	r3, #1
1a00380c:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003810:	0992      	lsrs	r2, r2, #6
1a003812:	3a01      	subs	r2, #1
1a003814:	4093      	lsls	r3, r2
1a003816:	602b      	str	r3, [r5, #0]
		deselect();
1a003818:	f7ff fcf6 	bl	1a003208 <deselect>
					res = RES_OK;
1a00381c:	2400      	movs	r4, #0
1a00381e:	e094      	b.n	1a00394a <FSSDC_FatFs_DiskIoCtl+0x2ce>
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
1a003820:	f89d 300a 	ldrb.w	r3, [sp, #10]
1a003824:	f3c3 0284 	ubfx	r2, r3, #2, #5
1a003828:	f89d 100b 	ldrb.w	r1, [sp, #11]
1a00382c:	00cb      	lsls	r3, r1, #3
1a00382e:	f003 0318 	and.w	r3, r3, #24
1a003832:	eb03 1351 	add.w	r3, r3, r1, lsr #5
1a003836:	3301      	adds	r3, #1
1a003838:	fb02 3303 	mla	r3, r2, r3, r3
1a00383c:	602b      	str	r3, [r5, #0]
1a00383e:	e7eb      	b.n	1a003818 <FSSDC_FatFs_DiskIoCtl+0x19c>
			*ptr = CardType;
1a003840:	4b46      	ldr	r3, [pc, #280]	; (1a00395c <FSSDC_FatFs_DiskIoCtl+0x2e0>)
1a003842:	781b      	ldrb	r3, [r3, #0]
1a003844:	700b      	strb	r3, [r1, #0]
		deselect();
1a003846:	f7ff fcdf 	bl	1a003208 <deselect>
			res = RES_OK;
1a00384a:	2400      	movs	r4, #0
1a00384c:	e07d      	b.n	1a00394a <FSSDC_FatFs_DiskIoCtl+0x2ce>
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
1a00384e:	2100      	movs	r1, #0
1a003850:	2049      	movs	r0, #73	; 0x49
1a003852:	f7ff fcf7 	bl	1a003244 <send_cmd>
1a003856:	2800      	cmp	r0, #0
1a003858:	d153      	bne.n	1a003902 <FSSDC_FatFs_DiskIoCtl+0x286>
                    && rcvr_datablock(ptr, 16))
1a00385a:	2110      	movs	r1, #16
1a00385c:	4628      	mov	r0, r5
1a00385e:	f7ff fd61 	bl	1a003324 <rcvr_datablock>
1a003862:	2800      	cmp	r0, #0
1a003864:	d149      	bne.n	1a0038fa <FSSDC_FatFs_DiskIoCtl+0x27e>
		deselect();
1a003866:	f7ff fccf 	bl	1a003208 <deselect>
	res = RES_ERROR;
1a00386a:	2401      	movs	r4, #1
1a00386c:	e06a      	b.n	1a003944 <FSSDC_FatFs_DiskIoCtl+0x2c8>
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
1a00386e:	2100      	movs	r1, #0
1a003870:	204a      	movs	r0, #74	; 0x4a
1a003872:	f7ff fce7 	bl	1a003244 <send_cmd>
1a003876:	bbe0      	cbnz	r0, 1a0038f2 <FSSDC_FatFs_DiskIoCtl+0x276>
                    && rcvr_datablock(ptr, 16))
1a003878:	2110      	movs	r1, #16
1a00387a:	4628      	mov	r0, r5
1a00387c:	f7ff fd52 	bl	1a003324 <rcvr_datablock>
1a003880:	bb98      	cbnz	r0, 1a0038ea <FSSDC_FatFs_DiskIoCtl+0x26e>
		deselect();
1a003882:	f7ff fcc1 	bl	1a003208 <deselect>
	res = RES_ERROR;
1a003886:	2401      	movs	r4, #1
1a003888:	e05c      	b.n	1a003944 <FSSDC_FatFs_DiskIoCtl+0x2c8>
			if (send_cmd(CMD58, 0) == 0) 
1a00388a:	2100      	movs	r1, #0
1a00388c:	207a      	movs	r0, #122	; 0x7a
1a00388e:	f7ff fcd9 	bl	1a003244 <send_cmd>
1a003892:	bb30      	cbnz	r0, 1a0038e2 <FSSDC_FatFs_DiskIoCtl+0x266>
				for (n = 4; n; n--) 
1a003894:	2404      	movs	r4, #4
1a003896:	e006      	b.n	1a0038a6 <FSSDC_FatFs_DiskIoCtl+0x22a>
                    *ptr++ = rcvr_spi();
1a003898:	1c6e      	adds	r6, r5, #1
1a00389a:	f7ff fc95 	bl	1a0031c8 <rcvr_spi>
1a00389e:	7028      	strb	r0, [r5, #0]
				for (n = 4; n; n--) 
1a0038a0:	3c01      	subs	r4, #1
1a0038a2:	b2e4      	uxtb	r4, r4
                    *ptr++ = rcvr_spi();
1a0038a4:	4635      	mov	r5, r6
				for (n = 4; n; n--) 
1a0038a6:	2c00      	cmp	r4, #0
1a0038a8:	d1f6      	bne.n	1a003898 <FSSDC_FatFs_DiskIoCtl+0x21c>
		deselect();
1a0038aa:	f7ff fcad 	bl	1a003208 <deselect>
				res = RES_OK;
1a0038ae:	2400      	movs	r4, #0
1a0038b0:	e04b      	b.n	1a00394a <FSSDC_FatFs_DiskIoCtl+0x2ce>
			if (send_cmd(ACMD13, 0) == 0) 
1a0038b2:	2100      	movs	r1, #0
1a0038b4:	20cd      	movs	r0, #205	; 0xcd
1a0038b6:	f7ff fcc5 	bl	1a003244 <send_cmd>
1a0038ba:	b970      	cbnz	r0, 1a0038da <FSSDC_FatFs_DiskIoCtl+0x25e>
				rcvr_spi();
1a0038bc:	f7ff fc84 	bl	1a0031c8 <rcvr_spi>
				if (rcvr_datablock(ptr, 64))
1a0038c0:	2140      	movs	r1, #64	; 0x40
1a0038c2:	4628      	mov	r0, r5
1a0038c4:	f7ff fd2e 	bl	1a003324 <rcvr_datablock>
1a0038c8:	b918      	cbnz	r0, 1a0038d2 <FSSDC_FatFs_DiskIoCtl+0x256>
		deselect();
1a0038ca:	f7ff fc9d 	bl	1a003208 <deselect>
	res = RES_ERROR;
1a0038ce:	2401      	movs	r4, #1
1a0038d0:	e038      	b.n	1a003944 <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a0038d2:	f7ff fc99 	bl	1a003208 <deselect>
					res = RES_OK;
1a0038d6:	2400      	movs	r4, #0
1a0038d8:	e037      	b.n	1a00394a <FSSDC_FatFs_DiskIoCtl+0x2ce>
		deselect();
1a0038da:	f7ff fc95 	bl	1a003208 <deselect>
	res = RES_ERROR;
1a0038de:	2401      	movs	r4, #1
1a0038e0:	e030      	b.n	1a003944 <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a0038e2:	f7ff fc91 	bl	1a003208 <deselect>
	res = RES_ERROR;
1a0038e6:	2401      	movs	r4, #1
1a0038e8:	e02c      	b.n	1a003944 <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a0038ea:	f7ff fc8d 	bl	1a003208 <deselect>
				res = RES_OK;
1a0038ee:	2400      	movs	r4, #0
1a0038f0:	e02b      	b.n	1a00394a <FSSDC_FatFs_DiskIoCtl+0x2ce>
		deselect();
1a0038f2:	f7ff fc89 	bl	1a003208 <deselect>
	res = RES_ERROR;
1a0038f6:	2401      	movs	r4, #1
1a0038f8:	e024      	b.n	1a003944 <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a0038fa:	f7ff fc85 	bl	1a003208 <deselect>
				res = RES_OK;
1a0038fe:	2400      	movs	r4, #0
1a003900:	e023      	b.n	1a00394a <FSSDC_FatFs_DiskIoCtl+0x2ce>
		deselect();
1a003902:	f7ff fc81 	bl	1a003208 <deselect>
	res = RES_ERROR;
1a003906:	2401      	movs	r4, #1
1a003908:	e01c      	b.n	1a003944 <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a00390a:	f7ff fc7d 	bl	1a003208 <deselect>
	res = RES_ERROR;
1a00390e:	2401      	movs	r4, #1
1a003910:	e018      	b.n	1a003944 <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a003912:	f7ff fc79 	bl	1a003208 <deselect>
	res = RES_ERROR;
1a003916:	2401      	movs	r4, #1
1a003918:	e014      	b.n	1a003944 <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a00391a:	f7ff fc75 	bl	1a003208 <deselect>
	res = RES_ERROR;
1a00391e:	2401      	movs	r4, #1
1a003920:	e010      	b.n	1a003944 <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a003922:	f7ff fc71 	bl	1a003208 <deselect>
	res = RES_ERROR;
1a003926:	2401      	movs	r4, #1
1a003928:	e00c      	b.n	1a003944 <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a00392a:	f7ff fc6d 	bl	1a003208 <deselect>
			res = RES_PARERR;
1a00392e:	2404      	movs	r4, #4
1a003930:	e008      	b.n	1a003944 <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a003932:	f7ff fc69 	bl	1a003208 <deselect>
	res = RES_ERROR;
1a003936:	2401      	movs	r4, #1
1a003938:	e004      	b.n	1a003944 <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a00393a:	f7ff fc65 	bl	1a003208 <deselect>
	res = RES_ERROR;
1a00393e:	2401      	movs	r4, #1
1a003940:	e000      	b.n	1a003944 <FSSDC_FatFs_DiskIoCtl+0x2c8>
			res = RES_PARERR;
1a003942:	2404      	movs	r4, #4
	}
    
    if (res != RES_OK)
    {
        Board_UARTPutSTR ("FSSDC: [IOCtl] Returning Error.\r\n");        
1a003944:	4806      	ldr	r0, [pc, #24]	; (1a003960 <FSSDC_FatFs_DiskIoCtl+0x2e4>)
1a003946:	f000 f97f 	bl	1a003c48 <Board_UARTPutSTR>
    }

	return res;
}
1a00394a:	4620      	mov	r0, r4
1a00394c:	b004      	add	sp, #16
1a00394e:	bd70      	pop	{r4, r5, r6, pc}
			res = RES_OK;
1a003950:	2400      	movs	r4, #0
1a003952:	e7fa      	b.n	1a00394a <FSSDC_FatFs_DiskIoCtl+0x2ce>
1a003954:	10000001 	.word	0x10000001
1a003958:	1a0069b0 	.word	0x1a0069b0
1a00395c:	100009f4 	.word	0x100009f4
1a003960:	1a0069d8 	.word	0x1a0069d8

1a003964 <FSSDC_InitSPI>:
    WARNING: for card connectors without presence detection
    >>>> Only call this function when the card is inserted!
--------------------------------------------------------------------------------
*/
void FSSDC_InitSPI ()
{
1a003964:	b510      	push	{r4, lr}
        seems to work at mode 0 at the SPI mode. Thus the SPI mode 0 (CPHA=0, CPOL=0)
        is the proper setting to control MMC/SDC
        
        http://elm-chan.org/docs/mmc/mmc_e.html#spimode
    */
    Chip_SSP_Init       (LPC_SSP1);
1a003966:	4c13      	ldr	r4, [pc, #76]	; (1a0039b4 <FSSDC_InitSPI+0x50>)
1a003968:	4620      	mov	r0, r4
1a00396a:	f001 f883 	bl	1a004a74 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00396e:	6863      	ldr	r3, [r4, #4]
1a003970:	f023 0304 	bic.w	r3, r3, #4
1a003974:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003976:	6823      	ldr	r3, [r4, #0]
1a003978:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a00397c:	f043 0307 	orr.w	r3, r3, #7
1a003980:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode   (LPC_SSP1, SSP_MODE_MASTER);
    Chip_SSP_SetFormat  (LPC_SSP1, SSP_BITS_8, SSP_FRAMEFORMAT_SPI,
                         SSP_CLOCK_CPHA0_CPOL0);
    FCLK_SLOW           ();
1a003982:	4b0d      	ldr	r3, [pc, #52]	; (1a0039b8 <FSSDC_InitSPI+0x54>)
1a003984:	6819      	ldr	r1, [r3, #0]
1a003986:	4620      	mov	r0, r4
1a003988:	f001 f854 	bl	1a004a34 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a00398c:	6863      	ldr	r3, [r4, #4]
1a00398e:	f043 0302 	orr.w	r3, r3, #2
1a003992:	6063      	str	r3, [r4, #4]
    Chip_SSP_Enable     (LPC_SSP1);
    
    // PLEASE NOTE: muxing and direction of CS signal on FSSDC_CS_{PIN/PORT}
    //              must be configured beforehand!
    deselect ();    
1a003994:	f7ff fc38 	bl	1a003208 <deselect>
    
#ifndef FSSDC_SUPPORTS_HOT_INSERTION
    g_diskStats &= ~STA_NODISK;
1a003998:	4a08      	ldr	r2, [pc, #32]	; (1a0039bc <FSSDC_InitSPI+0x58>)
1a00399a:	7813      	ldrb	r3, [r2, #0]
1a00399c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
1a0039a0:	7013      	strb	r3, [r2, #0]
    Board_UARTPutSTR ("FSSDC: [InitSPI] New card status: Inserted.\r\n");
1a0039a2:	4807      	ldr	r0, [pc, #28]	; (1a0039c0 <FSSDC_InitSPI+0x5c>)
1a0039a4:	f000 f950 	bl	1a003c48 <Board_UARTPutSTR>
    newCardStatus (FSSDC_CardStatus_Inserted);
1a0039a8:	2002      	movs	r0, #2
1a0039aa:	f7ff fbcf 	bl	1a00314c <newCardStatus>
    FSSDC_FatFs_DiskInitialize ();
1a0039ae:	f7ff fcef 	bl	1a003390 <FSSDC_FatFs_DiskInitialize>
#endif
}
1a0039b2:	bd10      	pop	{r4, pc}
1a0039b4:	400c5000 	.word	0x400c5000
1a0039b8:	10000008 	.word	0x10000008
1a0039bc:	10000001 	.word	0x10000001
1a0039c0:	1a006a78 	.word	0x1a006a78

1a0039c4 <FSSDC_Update>:
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */
void FSSDC_Update ()
{   
    if (Timer1)             /* 100Hz decrement timer */
1a0039c4:	4b08      	ldr	r3, [pc, #32]	; (1a0039e8 <FSSDC_Update+0x24>)
1a0039c6:	781b      	ldrb	r3, [r3, #0]
1a0039c8:	b123      	cbz	r3, 1a0039d4 <FSSDC_Update+0x10>
    {
        -- Timer1;
1a0039ca:	4a07      	ldr	r2, [pc, #28]	; (1a0039e8 <FSSDC_Update+0x24>)
1a0039cc:	7813      	ldrb	r3, [r2, #0]
1a0039ce:	3b01      	subs	r3, #1
1a0039d0:	b2db      	uxtb	r3, r3
1a0039d2:	7013      	strb	r3, [r2, #0]
    }
    
    if (Timer2)
1a0039d4:	4b05      	ldr	r3, [pc, #20]	; (1a0039ec <FSSDC_Update+0x28>)
1a0039d6:	781b      	ldrb	r3, [r3, #0]
1a0039d8:	b123      	cbz	r3, 1a0039e4 <FSSDC_Update+0x20>
    {
        -- Timer2;
1a0039da:	4a04      	ldr	r2, [pc, #16]	; (1a0039ec <FSSDC_Update+0x28>)
1a0039dc:	7813      	ldrb	r3, [r2, #0]
1a0039de:	3b01      	subs	r3, #1
1a0039e0:	b2db      	uxtb	r3, r3
1a0039e2:	7013      	strb	r3, [r2, #0]
			s &= ~STA_NODISK;

		g_diskStats = s;
	}
    #endif
}
1a0039e4:	4770      	bx	lr
1a0039e6:	bf00      	nop
1a0039e8:	100009f5 	.word	0x100009f5
1a0039ec:	100009f6 	.word	0x100009f6

1a0039f0 <get_fattime>:


// Definitions required by FatFs according to ffconf.h
#if !FF_FS_READONLY && !FF_FS_NORTC
DWORD get_fattime (void)
{
1a0039f0:	b500      	push	{lr}
1a0039f2:	b089      	sub	sp, #36	; 0x24
	/* Get local time */
    RTC_TIME_T rtcTime;
	Chip_RTC_GetFullTime (LPC_RTC, &rtcTime);
1a0039f4:	4669      	mov	r1, sp
1a0039f6:	480c      	ldr	r0, [pc, #48]	; (1a003a28 <get_fattime+0x38>)
1a0039f8:	f000 fe8b 	bl	1a004712 <Chip_RTC_GetFullTime>

	/* Pack date and time into a DWORD variable */
	return (  (DWORD) (rtcTime.time[RTC_TIMETYPE_YEAR] - 1980)  << 25)
1a0039fc:	9b07      	ldr	r3, [sp, #28]
1a0039fe:	f2a3 70bc 	subw	r0, r3, #1980	; 0x7bc
		   | ((DWORD)  rtcTime.time[RTC_TIMETYPE_MONTH]         << 21)
1a003a02:	9b06      	ldr	r3, [sp, #24]
1a003a04:	055b      	lsls	r3, r3, #21
1a003a06:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
		   | ((DWORD)  rtcTime.time[RTC_TIMETYPE_DAYOFMONTH]    << 16)
1a003a0a:	9803      	ldr	r0, [sp, #12]
1a003a0c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
		   | ((DWORD)  rtcTime.time[RTC_TIMETYPE_HOUR]          << 11)
1a003a10:	9802      	ldr	r0, [sp, #8]
1a003a12:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
		   | ((DWORD)  rtcTime.time[RTC_TIMETYPE_MINUTE]        << 5)
1a003a16:	9801      	ldr	r0, [sp, #4]
1a003a18:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
		   | ((DWORD)  rtcTime.time[RTC_TIMETYPE_SECOND]        >> 1);
}
1a003a1c:	9800      	ldr	r0, [sp, #0]
1a003a1e:	ea43 0050 	orr.w	r0, r3, r0, lsr #1
1a003a22:	b009      	add	sp, #36	; 0x24
1a003a24:	f85d fb04 	ldr.w	pc, [sp], #4
1a003a28:	40046000 	.word	0x40046000

1a003a2c <disk_timerproc>:
};
#endif

// Must be called once every 10 ms ideally from PendSV, not SysTickHandler!
void disk_timerproc (void)
{
1a003a2c:	b508      	push	{r3, lr}
    FSSDC_Update ();
1a003a2e:	f7ff ffc9 	bl	1a0039c4 <FSSDC_Update>
    #ifdef LPCUSBLIB_HOST_MASS_STORAGE
    FSUSB_Update ();
    #endif
}
1a003a32:	bd08      	pop	{r3, pc}

1a003a34 <disk_status>:

DSTATUS disk_status (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{    
    switch (pdrv)
1a003a34:	b108      	cbz	r0, 1a003a3a <disk_status+0x6>
            #else
            break;
            #endif
    }

    return STA_NOINIT;
1a003a36:	2001      	movs	r0, #1
}
1a003a38:	4770      	bx	lr
{    
1a003a3a:	b508      	push	{r3, lr}
            return FSSDC_FatFs_DiskStatus ();
1a003a3c:	f7ff fca2 	bl	1a003384 <FSSDC_FatFs_DiskStatus>
}
1a003a40:	bd08      	pop	{r3, pc}

1a003a42 <disk_initialize>:

DSTATUS disk_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv)
1a003a42:	b108      	cbz	r0, 1a003a48 <disk_initialize+0x6>
            #else
            break;
            #endif
    }
    
    return STA_NOINIT;
1a003a44:	2001      	movs	r0, #1
}
1a003a46:	4770      	bx	lr
{
1a003a48:	b508      	push	{r3, lr}
            return FSSDC_FatFs_DiskInitialize ();
1a003a4a:	f7ff fca1 	bl	1a003390 <FSSDC_FatFs_DiskInitialize>
}
1a003a4e:	bd08      	pop	{r3, pc}

1a003a50 <disk_read>:
	BYTE *buff,         /* Data buffer to store read data */
	DWORD sector,       /* Start sector in LBA */
	UINT count          /* Number of sectors to read */
)
{
	if (!buff || !count) 
1a003a50:	b141      	cbz	r1, 1a003a64 <disk_read+0x14>
{
1a003a52:	b510      	push	{r4, lr}
	if (!buff || !count) 
1a003a54:	b143      	cbz	r3, 1a003a68 <disk_read+0x18>
    {
		return RES_PARERR;
	}
    
    switch (pdrv)
1a003a56:	b948      	cbnz	r0, 1a003a6c <disk_read+0x1c>
1a003a58:	4608      	mov	r0, r1
1a003a5a:	4611      	mov	r1, r2
    {
        case FATFS_DISK_DRIVE_FSSDC:
            return FSSDC_FatFs_DiskRead (buff, sector, count);
1a003a5c:	461a      	mov	r2, r3
1a003a5e:	f7ff fd71 	bl	1a003544 <FSSDC_FatFs_DiskRead>
            break;
            #endif
    }
    
    return RES_PARERR;
}
1a003a62:	bd10      	pop	{r4, pc}
		return RES_PARERR;
1a003a64:	2004      	movs	r0, #4
}
1a003a66:	4770      	bx	lr
		return RES_PARERR;
1a003a68:	2004      	movs	r0, #4
1a003a6a:	e7fa      	b.n	1a003a62 <disk_read+0x12>
    return RES_PARERR;
1a003a6c:	2004      	movs	r0, #4
1a003a6e:	e7f8      	b.n	1a003a62 <disk_read+0x12>

1a003a70 <disk_write>:
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
	if (!buff || !count)
1a003a70:	b141      	cbz	r1, 1a003a84 <disk_write+0x14>
{
1a003a72:	b510      	push	{r4, lr}
	if (!buff || !count)
1a003a74:	b143      	cbz	r3, 1a003a88 <disk_write+0x18>
    {
		return RES_PARERR;
	}
    
    switch (pdrv)
1a003a76:	b948      	cbnz	r0, 1a003a8c <disk_write+0x1c>
1a003a78:	4608      	mov	r0, r1
1a003a7a:	4611      	mov	r1, r2
    {
        case FATFS_DISK_DRIVE_FSSDC:
            return FSSDC_FatFs_DiskWrite (buff, sector, count);
1a003a7c:	461a      	mov	r2, r3
1a003a7e:	f7ff fda3 	bl	1a0035c8 <FSSDC_FatFs_DiskWrite>
            break;
            #endif
    }
    
	return RES_PARERR;
}
1a003a82:	bd10      	pop	{r4, pc}
		return RES_PARERR;
1a003a84:	2004      	movs	r0, #4
}
1a003a86:	4770      	bx	lr
		return RES_PARERR;
1a003a88:	2004      	movs	r0, #4
1a003a8a:	e7fa      	b.n	1a003a82 <disk_write+0x12>
	return RES_PARERR;
1a003a8c:	2004      	movs	r0, #4
1a003a8e:	e7f8      	b.n	1a003a82 <disk_write+0x12>

1a003a90 <disk_ioctl>:
	BYTE pdrv,          /* Physical drive nmuber (0..) */
	BYTE cmd,           /* Control code */
	void *buff          /* Buffer to send/receive control data */
)
{   
    switch (pdrv)
1a003a90:	b928      	cbnz	r0, 1a003a9e <disk_ioctl+0xe>
{   
1a003a92:	b508      	push	{r3, lr}
1a003a94:	4608      	mov	r0, r1
    {
        case FATFS_DISK_DRIVE_FSSDC:
            return FSSDC_FatFs_DiskIoCtl (cmd, buff);
1a003a96:	4611      	mov	r1, r2
1a003a98:	f7ff fdf0 	bl	1a00367c <FSSDC_FatFs_DiskIoCtl>
            break;
            #endif
    }

	return RES_PARERR;
}
1a003a9c:	bd08      	pop	{r3, pc}
	return RES_PARERR;
1a003a9e:	2004      	movs	r0, #4
}
1a003aa0:	4770      	bx	lr
1a003aa2:	Address 0x000000001a003aa2 is out of bounds.


1a003aa4 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a003aa4:	2200      	movs	r2, #0
1a003aa6:	2a05      	cmp	r2, #5
1a003aa8:	d819      	bhi.n	1a003ade <Board_LED_Init+0x3a>
{
1a003aaa:	b470      	push	{r4, r5, r6}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a003aac:	490c      	ldr	r1, [pc, #48]	; (1a003ae0 <Board_LED_Init+0x3c>)
1a003aae:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a003ab2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a003ab6:	784c      	ldrb	r4, [r1, #1]
	pGPIO->DIR[port] |= 1UL << pin;
1a003ab8:	4b0a      	ldr	r3, [pc, #40]	; (1a003ae4 <Board_LED_Init+0x40>)
1a003aba:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a003abe:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a003ac2:	2001      	movs	r0, #1
1a003ac4:	40a0      	lsls	r0, r4
1a003ac6:	4301      	orrs	r1, r0
1a003ac8:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a003acc:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a003ad0:	2100      	movs	r1, #0
1a003ad2:	5519      	strb	r1, [r3, r4]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a003ad4:	3201      	adds	r2, #1
1a003ad6:	2a05      	cmp	r2, #5
1a003ad8:	d9e8      	bls.n	1a003aac <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a003ada:	bc70      	pop	{r4, r5, r6}
1a003adc:	4770      	bx	lr
1a003ade:	4770      	bx	lr
1a003ae0:	1a006ab4 	.word	0x1a006ab4
1a003ae4:	400f4000 	.word	0x400f4000

1a003ae8 <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a003ae8:	2300      	movs	r3, #0
1a003aea:	2b03      	cmp	r3, #3
1a003aec:	d816      	bhi.n	1a003b1c <Board_TEC_Init+0x34>
{
1a003aee:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a003af0:	490b      	ldr	r1, [pc, #44]	; (1a003b20 <Board_TEC_Init+0x38>)
1a003af2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a003af6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a003afa:	784d      	ldrb	r5, [r1, #1]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a003afc:	4c09      	ldr	r4, [pc, #36]	; (1a003b24 <Board_TEC_Init+0x3c>)
1a003afe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a003b02:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a003b06:	2001      	movs	r0, #1
1a003b08:	40a8      	lsls	r0, r5
1a003b0a:	ea21 0100 	bic.w	r1, r1, r0
1a003b0e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a003b12:	3301      	adds	r3, #1
1a003b14:	2b03      	cmp	r3, #3
1a003b16:	d9eb      	bls.n	1a003af0 <Board_TEC_Init+0x8>
    }
}
1a003b18:	bc30      	pop	{r4, r5}
1a003b1a:	4770      	bx	lr
1a003b1c:	4770      	bx	lr
1a003b1e:	bf00      	nop
1a003b20:	1a006aac 	.word	0x1a006aac
1a003b24:	400f4000 	.word	0x400f4000

1a003b28 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a003b28:	2300      	movs	r3, #0
1a003b2a:	2b08      	cmp	r3, #8
1a003b2c:	d816      	bhi.n	1a003b5c <Board_GPIO_Init+0x34>
{
1a003b2e:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a003b30:	490b      	ldr	r1, [pc, #44]	; (1a003b60 <Board_GPIO_Init+0x38>)
1a003b32:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a003b36:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a003b3a:	784d      	ldrb	r5, [r1, #1]
1a003b3c:	4c09      	ldr	r4, [pc, #36]	; (1a003b64 <Board_GPIO_Init+0x3c>)
1a003b3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a003b42:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a003b46:	2001      	movs	r0, #1
1a003b48:	40a8      	lsls	r0, r5
1a003b4a:	ea21 0100 	bic.w	r1, r1, r0
1a003b4e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a003b52:	3301      	adds	r3, #1
1a003b54:	2b08      	cmp	r3, #8
1a003b56:	d9eb      	bls.n	1a003b30 <Board_GPIO_Init+0x8>
    }
}
1a003b58:	bc30      	pop	{r4, r5}
1a003b5a:	4770      	bx	lr
1a003b5c:	4770      	bx	lr
1a003b5e:	bf00      	nop
1a003b60:	1a006ac0 	.word	0x1a006ac0
1a003b64:	400f4000 	.word	0x400f4000

1a003b68 <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a003b68:	b510      	push	{r4, lr}
1a003b6a:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a003b6c:	4c08      	ldr	r4, [pc, #32]	; (1a003b90 <Board_ADC_Init+0x28>)
1a003b6e:	4669      	mov	r1, sp
1a003b70:	4620      	mov	r0, r4
1a003b72:	f000 fa25 	bl	1a003fc0 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a003b76:	4a07      	ldr	r2, [pc, #28]	; (1a003b94 <Board_ADC_Init+0x2c>)
1a003b78:	4669      	mov	r1, sp
1a003b7a:	4620      	mov	r0, r4
1a003b7c:	f000 fa40 	bl	1a004000 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a003b80:	2200      	movs	r2, #0
1a003b82:	4669      	mov	r1, sp
1a003b84:	4620      	mov	r0, r4
1a003b86:	f000 fa54 	bl	1a004032 <Chip_ADC_SetResolution>
}
1a003b8a:	b002      	add	sp, #8
1a003b8c:	bd10      	pop	{r4, pc}
1a003b8e:	bf00      	nop
1a003b90:	400e3000 	.word	0x400e3000
1a003b94:	00061a80 	.word	0x00061a80

1a003b98 <Board_SPI_Init>:
{
1a003b98:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a003b9a:	4c0b      	ldr	r4, [pc, #44]	; (1a003bc8 <Board_SPI_Init+0x30>)
1a003b9c:	4620      	mov	r0, r4
1a003b9e:	f000 ff69 	bl	1a004a74 <Chip_SSP_Init>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a003ba2:	6863      	ldr	r3, [r4, #4]
1a003ba4:	f023 0304 	bic.w	r3, r3, #4
1a003ba8:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003baa:	6823      	ldr	r3, [r4, #0]
1a003bac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003bb0:	f043 0307 	orr.w	r3, r3, #7
1a003bb4:	6023      	str	r3, [r4, #0]
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a003bb6:	4905      	ldr	r1, [pc, #20]	; (1a003bcc <Board_SPI_Init+0x34>)
1a003bb8:	4620      	mov	r0, r4
1a003bba:	f000 ff3b 	bl	1a004a34 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a003bbe:	6863      	ldr	r3, [r4, #4]
1a003bc0:	f043 0302 	orr.w	r3, r3, #2
1a003bc4:	6063      	str	r3, [r4, #4]
}
1a003bc6:	bd10      	pop	{r4, pc}
1a003bc8:	400c5000 	.word	0x400c5000
1a003bcc:	000186a0 	.word	0x000186a0

1a003bd0 <Board_I2C_Init>:
{
1a003bd0:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a003bd2:	2000      	movs	r0, #0
1a003bd4:	f000 f8ce 	bl	1a003d74 <Chip_I2C_Init>
1a003bd8:	4b04      	ldr	r3, [pc, #16]	; (1a003bec <Board_I2C_Init+0x1c>)
1a003bda:	f640 0208 	movw	r2, #2056	; 0x808
1a003bde:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a003be2:	4903      	ldr	r1, [pc, #12]	; (1a003bf0 <Board_I2C_Init+0x20>)
1a003be4:	2000      	movs	r0, #0
1a003be6:	f000 f8d7 	bl	1a003d98 <Chip_I2C_SetClockRate>
}
1a003bea:	bd08      	pop	{r3, pc}
1a003bec:	40086000 	.word	0x40086000
1a003bf0:	000f4240 	.word	0x000f4240

1a003bf4 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a003bf4:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a003bf6:	4c07      	ldr	r4, [pc, #28]	; (1a003c14 <Board_Debug_Init+0x20>)
1a003bf8:	4620      	mov	r0, r4
1a003bfa:	f000 f8ff 	bl	1a003dfc <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a003bfe:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a003c02:	4620      	mov	r0, r4
1a003c04:	f000 f944 	bl	1a003e90 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a003c08:	2303      	movs	r3, #3
1a003c0a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a003c0c:	2301      	movs	r3, #1
1a003c0e:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a003c10:	bd10      	pop	{r4, pc}
1a003c12:	bf00      	nop
1a003c14:	400c1000 	.word	0x400c1000

1a003c18 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a003c18:	4b03      	ldr	r3, [pc, #12]	; (1a003c28 <Board_UARTPutChar+0x10>)
1a003c1a:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
    while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a003c1c:	f013 0f20 	tst.w	r3, #32
1a003c20:	d0fa      	beq.n	1a003c18 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a003c22:	4b01      	ldr	r3, [pc, #4]	; (1a003c28 <Board_UARTPutChar+0x10>)
1a003c24:	6018      	str	r0, [r3, #0]
    Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a003c26:	4770      	bx	lr
1a003c28:	400c1000 	.word	0x400c1000

1a003c2c <Board_UARTGetChar>:
	return pUART->LSR;
1a003c2c:	4b05      	ldr	r3, [pc, #20]	; (1a003c44 <Board_UARTGetChar+0x18>)
1a003c2e:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
    if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a003c30:	f013 0f01 	tst.w	r3, #1
1a003c34:	d003      	beq.n	1a003c3e <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a003c36:	4b03      	ldr	r3, [pc, #12]	; (1a003c44 <Board_UARTGetChar+0x18>)
1a003c38:	6818      	ldr	r0, [r3, #0]
       return (int) Chip_UART_ReadByte(DEBUG_UART);
1a003c3a:	b2c0      	uxtb	r0, r0
1a003c3c:	4770      	bx	lr
    }
    return EOF;
1a003c3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a003c42:	4770      	bx	lr
1a003c44:	400c1000 	.word	0x400c1000

1a003c48 <Board_UARTPutSTR>:


void Board_UARTPutSTR(const char *str)
{
1a003c48:	b510      	push	{r4, lr}
1a003c4a:	4604      	mov	r4, r0
    while (*str != '\0') {
1a003c4c:	e002      	b.n	1a003c54 <Board_UARTPutSTR+0xc>
        Board_UARTPutChar(*str++);
1a003c4e:	3401      	adds	r4, #1
1a003c50:	f7ff ffe2 	bl	1a003c18 <Board_UARTPutChar>
    while (*str != '\0') {
1a003c54:	7820      	ldrb	r0, [r4, #0]
1a003c56:	2800      	cmp	r0, #0
1a003c58:	d1f9      	bne.n	1a003c4e <Board_UARTPutSTR+0x6>
    }
}
1a003c5a:	bd10      	pop	{r4, pc}

1a003c5c <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a003c5c:	b508      	push	{r3, lr}
   DEBUGINIT();
1a003c5e:	f7ff ffc9 	bl	1a003bf4 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a003c62:	4808      	ldr	r0, [pc, #32]	; (1a003c84 <Board_Init+0x28>)
1a003c64:	f000 fd6c 	bl	1a004740 <Chip_GPIO_Init>
   
   Board_GPIO_Init();
1a003c68:	f7ff ff5e 	bl	1a003b28 <Board_GPIO_Init>
   Board_ADC_Init();
1a003c6c:	f7ff ff7c 	bl	1a003b68 <Board_ADC_Init>
   Board_SPI_Init();
1a003c70:	f7ff ff92 	bl	1a003b98 <Board_SPI_Init>
   Board_I2C_Init();
1a003c74:	f7ff ffac 	bl	1a003bd0 <Board_I2C_Init>

   Board_LED_Init();
1a003c78:	f7ff ff14 	bl	1a003aa4 <Board_LED_Init>
   Board_TEC_Init();
1a003c7c:	f7ff ff34 	bl	1a003ae8 <Board_TEC_Init>

   #ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
   #endif
}
1a003c80:	bd08      	pop	{r3, pc}
1a003c82:	bf00      	nop
1a003c84:	400f4000 	.word	0x400f4000

1a003c88 <__stdio_putchar>:
    Chip_ADC_EnableChannel(LPC_ADC0, curADCChannel, DISABLE);
    curADCChannel = 0xFF;
    return data;
}

void __stdio_putchar(int c) {
1a003c88:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a003c8a:	b2c0      	uxtb	r0, r0
1a003c8c:	f7ff ffc4 	bl	1a003c18 <Board_UARTPutChar>
}
1a003c90:	bd08      	pop	{r3, pc}

1a003c92 <__stdio_getchar>:

int __stdio_getchar() {
1a003c92:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a003c94:	f7ff ffca 	bl	1a003c2c <Board_UARTGetChar>
}
1a003c98:	bd08      	pop	{r3, pc}

1a003c9a <__stdio_init>:

void __stdio_init() {
1a003c9a:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a003c9c:	f7ff ffaa 	bl	1a003bf4 <Board_Debug_Init>
1a003ca0:	bd08      	pop	{r3, pc}
1a003ca2:	Address 0x000000001a003ca2 is out of bounds.


1a003ca4 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a003ca4:	2300      	movs	r3, #0
1a003ca6:	2b1c      	cmp	r3, #28
1a003ca8:	d812      	bhi.n	1a003cd0 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a003caa:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a003cac:	4a09      	ldr	r2, [pc, #36]	; (1a003cd4 <Board_SetupMuxing+0x30>)
1a003cae:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a003cb2:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a003cb6:	784a      	ldrb	r2, [r1, #1]
1a003cb8:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003cba:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a003cbe:	4906      	ldr	r1, [pc, #24]	; (1a003cd8 <Board_SetupMuxing+0x34>)
1a003cc0:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a003cc4:	3301      	adds	r3, #1
1a003cc6:	2b1c      	cmp	r3, #28
1a003cc8:	d9f0      	bls.n	1a003cac <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a003cca:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003cce:	4770      	bx	lr
1a003cd0:	4770      	bx	lr
1a003cd2:	bf00      	nop
1a003cd4:	1a006adc 	.word	0x1a006adc
1a003cd8:	40086000 	.word	0x40086000

1a003cdc <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a003cdc:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a003cde:	4a17      	ldr	r2, [pc, #92]	; (1a003d3c <Board_SetupClocking+0x60>)
1a003ce0:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a003ce4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a003ce8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a003cec:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a003cf0:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a003cf4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a003cf8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a003cfc:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a003d00:	2201      	movs	r2, #1
1a003d02:	490f      	ldr	r1, [pc, #60]	; (1a003d40 <Board_SetupClocking+0x64>)
1a003d04:	2006      	movs	r0, #6
1a003d06:	f000 fd1d 	bl	1a004744 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a003d0a:	2400      	movs	r4, #0
1a003d0c:	b14c      	cbz	r4, 1a003d22 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a003d0e:	4b0b      	ldr	r3, [pc, #44]	; (1a003d3c <Board_SetupClocking+0x60>)
1a003d10:	685a      	ldr	r2, [r3, #4]
1a003d12:	f022 020c 	bic.w	r2, r2, #12
1a003d16:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a003d18:	685a      	ldr	r2, [r3, #4]
1a003d1a:	f042 0203 	orr.w	r2, r2, #3
1a003d1e:	605a      	str	r2, [r3, #4]
}
1a003d20:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a003d22:	4808      	ldr	r0, [pc, #32]	; (1a003d44 <Board_SetupClocking+0x68>)
1a003d24:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a003d28:	2301      	movs	r3, #1
1a003d2a:	788a      	ldrb	r2, [r1, #2]
1a003d2c:	7849      	ldrb	r1, [r1, #1]
1a003d2e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a003d32:	f000 fba9 	bl	1a004488 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a003d36:	3401      	adds	r4, #1
1a003d38:	e7e8      	b.n	1a003d0c <Board_SetupClocking+0x30>
1a003d3a:	bf00      	nop
1a003d3c:	40043000 	.word	0x40043000
1a003d40:	0c28cb00 	.word	0x0c28cb00
1a003d44:	1a006ad8 	.word	0x1a006ad8

1a003d48 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a003d48:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a003d4a:	f7ff ffab 	bl	1a003ca4 <Board_SetupMuxing>
    Board_SetupClocking();
1a003d4e:	f7ff ffc5 	bl	1a003cdc <Board_SetupClocking>
}
1a003d52:	bd08      	pop	{r3, pc}

1a003d54 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a003d54:	2901      	cmp	r1, #1
1a003d56:	d000      	beq.n	1a003d5a <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a003d58:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a003d5a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a003d5e:	0082      	lsls	r2, r0, #2
1a003d60:	4b03      	ldr	r3, [pc, #12]	; (1a003d70 <Chip_I2C_EventHandler+0x1c>)
1a003d62:	4413      	add	r3, r2
1a003d64:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a003d66:	7d13      	ldrb	r3, [r2, #20]
1a003d68:	b2db      	uxtb	r3, r3
1a003d6a:	2b04      	cmp	r3, #4
1a003d6c:	d0fb      	beq.n	1a003d66 <Chip_I2C_EventHandler+0x12>
1a003d6e:	e7f3      	b.n	1a003d58 <Chip_I2C_EventHandler+0x4>
1a003d70:	10000010 	.word	0x10000010

1a003d74 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a003d74:	b570      	push	{r4, r5, r6, lr}
1a003d76:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a003d78:	4e06      	ldr	r6, [pc, #24]	; (1a003d94 <Chip_I2C_Init+0x20>)
1a003d7a:	00c4      	lsls	r4, r0, #3
1a003d7c:	1a22      	subs	r2, r4, r0
1a003d7e:	0093      	lsls	r3, r2, #2
1a003d80:	4433      	add	r3, r6
1a003d82:	8898      	ldrh	r0, [r3, #4]
1a003d84:	f000 fbe4 	bl	1a004550 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a003d88:	1b64      	subs	r4, r4, r5
1a003d8a:	00a3      	lsls	r3, r4, #2
1a003d8c:	58f3      	ldr	r3, [r6, r3]
1a003d8e:	226c      	movs	r2, #108	; 0x6c
1a003d90:	619a      	str	r2, [r3, #24]
}
1a003d92:	bd70      	pop	{r4, r5, r6, pc}
1a003d94:	10000010 	.word	0x10000010

1a003d98 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a003d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003d9c:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a003d9e:	4e0b      	ldr	r6, [pc, #44]	; (1a003dcc <Chip_I2C_SetClockRate+0x34>)
1a003da0:	00c5      	lsls	r5, r0, #3
1a003da2:	1a2b      	subs	r3, r5, r0
1a003da4:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a003da8:	eb06 0308 	add.w	r3, r6, r8
1a003dac:	8898      	ldrh	r0, [r3, #4]
1a003dae:	f000 fbe9 	bl	1a004584 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a003db2:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a003db6:	f856 3008 	ldr.w	r3, [r6, r8]
1a003dba:	0842      	lsrs	r2, r0, #1
1a003dbc:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a003dbe:	f856 3008 	ldr.w	r3, [r6, r8]
1a003dc2:	691a      	ldr	r2, [r3, #16]
1a003dc4:	1a80      	subs	r0, r0, r2
1a003dc6:	6158      	str	r0, [r3, #20]
}
1a003dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003dcc:	10000010 	.word	0x10000010

1a003dd0 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a003dd0:	4b09      	ldr	r3, [pc, #36]	; (1a003df8 <Chip_UART_GetIndex+0x28>)
1a003dd2:	4298      	cmp	r0, r3
1a003dd4:	d009      	beq.n	1a003dea <Chip_UART_GetIndex+0x1a>
1a003dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a003dda:	4298      	cmp	r0, r3
1a003ddc:	d007      	beq.n	1a003dee <Chip_UART_GetIndex+0x1e>
1a003dde:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a003de2:	4298      	cmp	r0, r3
1a003de4:	d005      	beq.n	1a003df2 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a003de6:	2000      	movs	r0, #0
1a003de8:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a003dea:	2002      	movs	r0, #2
1a003dec:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a003dee:	2003      	movs	r0, #3
1a003df0:	4770      	bx	lr
			return 1;
1a003df2:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a003df4:	4770      	bx	lr
1a003df6:	bf00      	nop
1a003df8:	400c1000 	.word	0x400c1000

1a003dfc <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a003dfc:	b530      	push	{r4, r5, lr}
1a003dfe:	b083      	sub	sp, #12
1a003e00:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a003e02:	f7ff ffe5 	bl	1a003dd0 <Chip_UART_GetIndex>
1a003e06:	2301      	movs	r3, #1
1a003e08:	461a      	mov	r2, r3
1a003e0a:	4619      	mov	r1, r3
1a003e0c:	4d0e      	ldr	r5, [pc, #56]	; (1a003e48 <Chip_UART_Init+0x4c>)
1a003e0e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a003e12:	f000 fb7f 	bl	1a004514 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a003e16:	2307      	movs	r3, #7
1a003e18:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a003e1a:	2300      	movs	r3, #0
1a003e1c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a003e1e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a003e20:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a003e22:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a003e24:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a003e26:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a003e28:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a003e2a:	4b08      	ldr	r3, [pc, #32]	; (1a003e4c <Chip_UART_Init+0x50>)
1a003e2c:	429c      	cmp	r4, r3
1a003e2e:	d006      	beq.n	1a003e3e <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a003e30:	2303      	movs	r3, #3
1a003e32:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a003e34:	2310      	movs	r3, #16
1a003e36:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a003e38:	9b01      	ldr	r3, [sp, #4]
}
1a003e3a:	b003      	add	sp, #12
1a003e3c:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a003e3e:	2300      	movs	r3, #0
1a003e40:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a003e42:	69a3      	ldr	r3, [r4, #24]
1a003e44:	9301      	str	r3, [sp, #4]
1a003e46:	e7f3      	b.n	1a003e30 <Chip_UART_Init+0x34>
1a003e48:	1a006b58 	.word	0x1a006b58
1a003e4c:	40082000 	.word	0x40082000

1a003e50 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a003e50:	b538      	push	{r3, r4, r5, lr}
1a003e52:	4605      	mov	r5, r0
1a003e54:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a003e56:	f7ff ffbb 	bl	1a003dd0 <Chip_UART_GetIndex>
1a003e5a:	4b0c      	ldr	r3, [pc, #48]	; (1a003e8c <Chip_UART_SetBaud+0x3c>)
1a003e5c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a003e60:	f000 fb90 	bl	1a004584 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a003e64:	0123      	lsls	r3, r4, #4
1a003e66:	fbb0 f3f3 	udiv	r3, r0, r3
1a003e6a:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a003e6c:	68ea      	ldr	r2, [r5, #12]
1a003e6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a003e72:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a003e74:	6029      	str	r1, [r5, #0]
1a003e76:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a003e7a:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a003e7c:	68ea      	ldr	r2, [r5, #12]
1a003e7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a003e82:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a003e84:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a003e88:	0900      	lsrs	r0, r0, #4
1a003e8a:	bd38      	pop	{r3, r4, r5, pc}
1a003e8c:	1a006b50 	.word	0x1a006b50

1a003e90 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a003e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003e94:	b083      	sub	sp, #12
1a003e96:	4683      	mov	fp, r0
1a003e98:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a003e9a:	f7ff ff99 	bl	1a003dd0 <Chip_UART_GetIndex>
1a003e9e:	4b35      	ldr	r3, [pc, #212]	; (1a003f74 <Chip_UART_SetBaudFDR+0xe4>)
1a003ea0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a003ea4:	f000 fb6e 	bl	1a004584 <Chip_Clock_GetRate>
1a003ea8:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a003eaa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a003eae:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a003eb0:	2300      	movs	r3, #0
1a003eb2:	9301      	str	r3, [sp, #4]
1a003eb4:	46a2      	mov	sl, r4
1a003eb6:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a003eb8:	e02a      	b.n	1a003f10 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a003eba:	4242      	negs	r2, r0
				div ++;
1a003ebc:	1c4b      	adds	r3, r1, #1
1a003ebe:	e017      	b.n	1a003ef0 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a003ec0:	b30a      	cbz	r2, 1a003f06 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a003ec2:	4617      	mov	r7, r2
			sd = d;
1a003ec4:	9501      	str	r5, [sp, #4]
			sm = m;
1a003ec6:	46a2      	mov	sl, r4
			sdiv = div;
1a003ec8:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a003eca:	3501      	adds	r5, #1
1a003ecc:	42ac      	cmp	r4, r5
1a003ece:	d91e      	bls.n	1a003f0e <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a003ed0:	0933      	lsrs	r3, r6, #4
1a003ed2:	0730      	lsls	r0, r6, #28
1a003ed4:	fba4 0100 	umull	r0, r1, r4, r0
1a003ed8:	fb04 1103 	mla	r1, r4, r3, r1
1a003edc:	1962      	adds	r2, r4, r5
1a003ede:	fb08 f202 	mul.w	r2, r8, r2
1a003ee2:	2300      	movs	r3, #0
1a003ee4:	f001 f956 	bl	1a005194 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a003ee8:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a003eea:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a003eec:	2800      	cmp	r0, #0
1a003eee:	dbe4      	blt.n	1a003eba <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a003ef0:	4297      	cmp	r7, r2
1a003ef2:	d3ea      	bcc.n	1a003eca <Chip_UART_SetBaudFDR+0x3a>
1a003ef4:	2b00      	cmp	r3, #0
1a003ef6:	d0e8      	beq.n	1a003eca <Chip_UART_SetBaudFDR+0x3a>
1a003ef8:	0c19      	lsrs	r1, r3, #16
1a003efa:	d1e6      	bne.n	1a003eca <Chip_UART_SetBaudFDR+0x3a>
1a003efc:	2b02      	cmp	r3, #2
1a003efe:	d8df      	bhi.n	1a003ec0 <Chip_UART_SetBaudFDR+0x30>
1a003f00:	2d00      	cmp	r5, #0
1a003f02:	d0dd      	beq.n	1a003ec0 <Chip_UART_SetBaudFDR+0x30>
1a003f04:	e7e1      	b.n	1a003eca <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a003f06:	4617      	mov	r7, r2
			sd = d;
1a003f08:	9501      	str	r5, [sp, #4]
			sm = m;
1a003f0a:	46a2      	mov	sl, r4
			sdiv = div;
1a003f0c:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a003f0e:	3401      	adds	r4, #1
1a003f10:	b11f      	cbz	r7, 1a003f1a <Chip_UART_SetBaudFDR+0x8a>
1a003f12:	2c0f      	cmp	r4, #15
1a003f14:	d801      	bhi.n	1a003f1a <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a003f16:	2500      	movs	r5, #0
1a003f18:	e7d8      	b.n	1a003ecc <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a003f1a:	f1b9 0f00 	cmp.w	r9, #0
1a003f1e:	d024      	beq.n	1a003f6a <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a003f20:	f8db 300c 	ldr.w	r3, [fp, #12]
1a003f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003f28:	f8cb 300c 	str.w	r3, [fp, #12]
1a003f2c:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a003f30:	f8cb 3000 	str.w	r3, [fp]
1a003f34:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a003f38:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a003f3c:	f8db 300c 	ldr.w	r3, [fp, #12]
1a003f40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a003f44:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a003f48:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a003f4c:	b2db      	uxtb	r3, r3
1a003f4e:	9901      	ldr	r1, [sp, #4]
1a003f50:	f001 020f 	and.w	r2, r1, #15
1a003f54:	4313      	orrs	r3, r2
1a003f56:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a003f5a:	0933      	lsrs	r3, r6, #4
1a003f5c:	fb0a f303 	mul.w	r3, sl, r3
1a003f60:	448a      	add	sl, r1
1a003f62:	fb09 f90a 	mul.w	r9, r9, sl
1a003f66:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a003f6a:	4648      	mov	r0, r9
1a003f6c:	b003      	add	sp, #12
1a003f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003f72:	bf00      	nop
1a003f74:	1a006b50 	.word	0x1a006b50

1a003f78 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a003f78:	4b03      	ldr	r3, [pc, #12]	; (1a003f88 <Chip_ADC_GetClockIndex+0x10>)
1a003f7a:	4298      	cmp	r0, r3
1a003f7c:	d001      	beq.n	1a003f82 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a003f7e:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a003f80:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a003f82:	2004      	movs	r0, #4
1a003f84:	4770      	bx	lr
1a003f86:	bf00      	nop
1a003f88:	400e4000 	.word	0x400e4000

1a003f8c <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a003f8c:	b570      	push	{r4, r5, r6, lr}
1a003f8e:	460d      	mov	r5, r1
1a003f90:	4614      	mov	r4, r2
1a003f92:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a003f94:	f7ff fff0 	bl	1a003f78 <Chip_ADC_GetClockIndex>
1a003f98:	f000 faf4 	bl	1a004584 <Chip_Clock_GetRate>
	if (burstMode) {
1a003f9c:	b965      	cbnz	r5, 1a003fb8 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a003f9e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a003fa2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a003fa6:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a003faa:	0064      	lsls	r4, r4, #1
1a003fac:	fbb0 f0f4 	udiv	r0, r0, r4
1a003fb0:	b2c0      	uxtb	r0, r0
1a003fb2:	3801      	subs	r0, #1
	return div;
}
1a003fb4:	b2c0      	uxtb	r0, r0
1a003fb6:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a003fb8:	fb04 f406 	mul.w	r4, r4, r6
1a003fbc:	e7f3      	b.n	1a003fa6 <getClkDiv+0x1a>
1a003fbe:	Address 0x000000001a003fbe is out of bounds.


1a003fc0 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a003fc0:	b538      	push	{r3, r4, r5, lr}
1a003fc2:	4605      	mov	r5, r0
1a003fc4:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a003fc6:	f7ff ffd7 	bl	1a003f78 <Chip_ADC_GetClockIndex>
1a003fca:	2301      	movs	r3, #1
1a003fcc:	461a      	mov	r2, r3
1a003fce:	4619      	mov	r1, r3
1a003fd0:	f000 faa0 	bl	1a004514 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a003fd4:	2100      	movs	r1, #0
1a003fd6:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a003fd8:	4a08      	ldr	r2, [pc, #32]	; (1a003ffc <Chip_ADC_Init+0x3c>)
1a003fda:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a003fdc:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a003fde:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a003fe0:	230b      	movs	r3, #11
1a003fe2:	4628      	mov	r0, r5
1a003fe4:	f7ff ffd2 	bl	1a003f8c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a003fe8:	0200      	lsls	r0, r0, #8
1a003fea:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a003fee:	7920      	ldrb	r0, [r4, #4]
1a003ff0:	0440      	lsls	r0, r0, #17
1a003ff2:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a003ff6:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a003ff8:	6028      	str	r0, [r5, #0]
}
1a003ffa:	bd38      	pop	{r3, r4, r5, pc}
1a003ffc:	00061a80 	.word	0x00061a80

1a004000 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a004000:	b570      	push	{r4, r5, r6, lr}
1a004002:	4605      	mov	r5, r0
1a004004:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a004006:	6804      	ldr	r4, [r0, #0]
1a004008:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a00400c:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a004010:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a004012:	790b      	ldrb	r3, [r1, #4]
1a004014:	f1c3 030b 	rsb	r3, r3, #11
1a004018:	b2db      	uxtb	r3, r3
1a00401a:	7949      	ldrb	r1, [r1, #5]
1a00401c:	f7ff ffb6 	bl	1a003f8c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a004020:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a004024:	7930      	ldrb	r0, [r6, #4]
1a004026:	0440      	lsls	r0, r0, #17
1a004028:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a00402c:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a00402e:	6028      	str	r0, [r5, #0]
}
1a004030:	bd70      	pop	{r4, r5, r6, pc}

1a004032 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a004032:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a004034:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a004036:	680a      	ldr	r2, [r1, #0]
1a004038:	f7ff ffe2 	bl	1a004000 <Chip_ADC_SetSampleRate>
}
1a00403c:	bd08      	pop	{r3, pc}
1a00403e:	Address 0x000000001a00403e is out of bounds.


1a004040 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a004040:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a004042:	680b      	ldr	r3, [r1, #0]
1a004044:	f013 0f80 	tst.w	r3, #128	; 0x80
1a004048:	d002      	beq.n	1a004050 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a00404a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00404e:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a004050:	4607      	mov	r7, r0
1a004052:	2501      	movs	r5, #1
1a004054:	e03b      	b.n	1a0040ce <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a004056:	694b      	ldr	r3, [r1, #20]
1a004058:	fb03 f302 	mul.w	r3, r3, r2
1a00405c:	fbb3 f3f5 	udiv	r3, r3, r5
1a004060:	e014      	b.n	1a00408c <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a004062:	461c      	mov	r4, r3
1a004064:	e020      	b.n	1a0040a8 <pll_calc_divs+0x68>
		return -val;
1a004066:	f1cc 0c00 	rsb	ip, ip, #0
1a00406a:	e020      	b.n	1a0040ae <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a00406c:	3201      	adds	r2, #1
1a00406e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a004072:	dc26      	bgt.n	1a0040c2 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a004074:	680c      	ldr	r4, [r1, #0]
1a004076:	f014 0f40 	tst.w	r4, #64	; 0x40
1a00407a:	d0ec      	beq.n	1a004056 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a00407c:	1c73      	adds	r3, r6, #1
1a00407e:	fa02 fc03 	lsl.w	ip, r2, r3
1a004082:	694b      	ldr	r3, [r1, #20]
1a004084:	fb03 f30c 	mul.w	r3, r3, ip
1a004088:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a00408c:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a0040dc <pll_calc_divs+0x9c>
1a004090:	4563      	cmp	r3, ip
1a004092:	d9eb      	bls.n	1a00406c <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a004094:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a0040e0 <pll_calc_divs+0xa0>
1a004098:	4563      	cmp	r3, ip
1a00409a:	d812      	bhi.n	1a0040c2 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a00409c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0040a0:	d1df      	bne.n	1a004062 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a0040a2:	1c74      	adds	r4, r6, #1
1a0040a4:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a0040a8:	ebb0 0c04 	subs.w	ip, r0, r4
1a0040ac:	d4db      	bmi.n	1a004066 <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a0040ae:	4567      	cmp	r7, ip
1a0040b0:	d9dc      	bls.n	1a00406c <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a0040b2:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a0040b4:	1c77      	adds	r7, r6, #1
1a0040b6:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a0040b8:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a0040ba:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a0040bc:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a0040be:	4667      	mov	r7, ip
1a0040c0:	e7d4      	b.n	1a00406c <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a0040c2:	3601      	adds	r6, #1
1a0040c4:	2e03      	cmp	r6, #3
1a0040c6:	dc01      	bgt.n	1a0040cc <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a0040c8:	2201      	movs	r2, #1
1a0040ca:	e7d0      	b.n	1a00406e <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a0040cc:	3501      	adds	r5, #1
1a0040ce:	2d04      	cmp	r5, #4
1a0040d0:	dc01      	bgt.n	1a0040d6 <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a0040d2:	2600      	movs	r6, #0
1a0040d4:	e7f6      	b.n	1a0040c4 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a0040d6:	bcf0      	pop	{r4, r5, r6, r7}
1a0040d8:	4770      	bx	lr
1a0040da:	bf00      	nop
1a0040dc:	094c5eff 	.word	0x094c5eff
1a0040e0:	1312d000 	.word	0x1312d000

1a0040e4 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0040e4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0040e6:	b099      	sub	sp, #100	; 0x64
1a0040e8:	4605      	mov	r5, r0
1a0040ea:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a0040ec:	225c      	movs	r2, #92	; 0x5c
1a0040ee:	2100      	movs	r1, #0
1a0040f0:	a801      	add	r0, sp, #4
1a0040f2:	f001 f9f3 	bl	1a0054dc <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a0040f6:	2380      	movs	r3, #128	; 0x80
1a0040f8:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a0040fa:	6963      	ldr	r3, [r4, #20]
1a0040fc:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a0040fe:	7923      	ldrb	r3, [r4, #4]
1a004100:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a004104:	4669      	mov	r1, sp
1a004106:	4628      	mov	r0, r5
1a004108:	f7ff ff9a 	bl	1a004040 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a00410c:	9b06      	ldr	r3, [sp, #24]
1a00410e:	42ab      	cmp	r3, r5
1a004110:	d027      	beq.n	1a004162 <pll_get_frac+0x7e>
	if (val < 0)
1a004112:	1aeb      	subs	r3, r5, r3
1a004114:	d42e      	bmi.n	1a004174 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a004116:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a004118:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a00411a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00411e:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a004120:	6963      	ldr	r3, [r4, #20]
1a004122:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a004124:	7923      	ldrb	r3, [r4, #4]
1a004126:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a00412a:	a910      	add	r1, sp, #64	; 0x40
1a00412c:	4628      	mov	r0, r5
1a00412e:	f7ff ff87 	bl	1a004040 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a004132:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a004134:	42ab      	cmp	r3, r5
1a004136:	d01f      	beq.n	1a004178 <pll_get_frac+0x94>
	if (val < 0)
1a004138:	1aeb      	subs	r3, r5, r3
1a00413a:	d425      	bmi.n	1a004188 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a00413c:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a00413e:	4b2b      	ldr	r3, [pc, #172]	; (1a0041ec <pll_get_frac+0x108>)
1a004140:	429d      	cmp	r5, r3
1a004142:	d923      	bls.n	1a00418c <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a004144:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a004146:	1aed      	subs	r5, r5, r3
1a004148:	d433      	bmi.n	1a0041b2 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a00414a:	42ae      	cmp	r6, r5
1a00414c:	dc3b      	bgt.n	1a0041c6 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a00414e:	42be      	cmp	r6, r7
1a004150:	dc31      	bgt.n	1a0041b6 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a004152:	466d      	mov	r5, sp
1a004154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a004156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a004158:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00415c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a004160:	e006      	b.n	1a004170 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a004162:	466d      	mov	r5, sp
1a004164:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a004166:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a004168:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00416c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a004170:	b019      	add	sp, #100	; 0x64
1a004172:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a004174:	425b      	negs	r3, r3
1a004176:	e7ce      	b.n	1a004116 <pll_get_frac+0x32>
		*ppll = pll[2];
1a004178:	ad10      	add	r5, sp, #64	; 0x40
1a00417a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00417c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00417e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a004182:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a004186:	e7f3      	b.n	1a004170 <pll_get_frac+0x8c>
		return -val;
1a004188:	425b      	negs	r3, r3
1a00418a:	e7d7      	b.n	1a00413c <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a00418c:	2340      	movs	r3, #64	; 0x40
1a00418e:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a004190:	6963      	ldr	r3, [r4, #20]
1a004192:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a004194:	a908      	add	r1, sp, #32
1a004196:	4628      	mov	r0, r5
1a004198:	f7ff ff52 	bl	1a004040 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a00419c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00419e:	42ab      	cmp	r3, r5
1a0041a0:	d1d0      	bne.n	1a004144 <pll_get_frac+0x60>
			*ppll = pll[1];
1a0041a2:	ad08      	add	r5, sp, #32
1a0041a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0041a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0041a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0041ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a0041b0:	e7de      	b.n	1a004170 <pll_get_frac+0x8c>
		return -val;
1a0041b2:	426d      	negs	r5, r5
1a0041b4:	e7c9      	b.n	1a00414a <pll_get_frac+0x66>
			*ppll = pll[2];
1a0041b6:	ad10      	add	r5, sp, #64	; 0x40
1a0041b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0041ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0041bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0041c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0041c4:	e7d4      	b.n	1a004170 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a0041c6:	42af      	cmp	r7, r5
1a0041c8:	db07      	blt.n	1a0041da <pll_get_frac+0xf6>
			*ppll = pll[1];
1a0041ca:	ad08      	add	r5, sp, #32
1a0041cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0041ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0041d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0041d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0041d8:	e7ca      	b.n	1a004170 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a0041da:	ad10      	add	r5, sp, #64	; 0x40
1a0041dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0041de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0041e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0041e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0041e8:	e7c2      	b.n	1a004170 <pll_get_frac+0x8c>
1a0041ea:	bf00      	nop
1a0041ec:	068e7780 	.word	0x068e7780

1a0041f0 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a0041f0:	b430      	push	{r4, r5}
1a0041f2:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a0041f4:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a0041f6:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0041f8:	e000      	b.n	1a0041fc <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a0041fa:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0041fc:	281c      	cmp	r0, #28
1a0041fe:	d118      	bne.n	1a004232 <Chip_Clock_FindBaseClock+0x42>
1a004200:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a004204:	0051      	lsls	r1, r2, #1
1a004206:	4a0c      	ldr	r2, [pc, #48]	; (1a004238 <Chip_Clock_FindBaseClock+0x48>)
1a004208:	440a      	add	r2, r1
1a00420a:	7914      	ldrb	r4, [r2, #4]
1a00420c:	4284      	cmp	r4, r0
1a00420e:	d010      	beq.n	1a004232 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a004210:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a004214:	004a      	lsls	r2, r1, #1
1a004216:	4908      	ldr	r1, [pc, #32]	; (1a004238 <Chip_Clock_FindBaseClock+0x48>)
1a004218:	5a8a      	ldrh	r2, [r1, r2]
1a00421a:	42aa      	cmp	r2, r5
1a00421c:	d8ed      	bhi.n	1a0041fa <Chip_Clock_FindBaseClock+0xa>
1a00421e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a004222:	0051      	lsls	r1, r2, #1
1a004224:	4a04      	ldr	r2, [pc, #16]	; (1a004238 <Chip_Clock_FindBaseClock+0x48>)
1a004226:	440a      	add	r2, r1
1a004228:	8852      	ldrh	r2, [r2, #2]
1a00422a:	42aa      	cmp	r2, r5
1a00422c:	d3e5      	bcc.n	1a0041fa <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a00422e:	4620      	mov	r0, r4
1a004230:	e7e4      	b.n	1a0041fc <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a004232:	bc30      	pop	{r4, r5}
1a004234:	4770      	bx	lr
1a004236:	bf00      	nop
1a004238:	1a006b6c 	.word	0x1a006b6c

1a00423c <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a00423c:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a00423e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a004242:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a004244:	4a0d      	ldr	r2, [pc, #52]	; (1a00427c <Chip_Clock_EnableCrystal+0x40>)
1a004246:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a004248:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a00424c:	6992      	ldr	r2, [r2, #24]
1a00424e:	428a      	cmp	r2, r1
1a004250:	d001      	beq.n	1a004256 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a004252:	4a0a      	ldr	r2, [pc, #40]	; (1a00427c <Chip_Clock_EnableCrystal+0x40>)
1a004254:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a004256:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a00425a:	4a09      	ldr	r2, [pc, #36]	; (1a004280 <Chip_Clock_EnableCrystal+0x44>)
1a00425c:	6811      	ldr	r1, [r2, #0]
1a00425e:	4a09      	ldr	r2, [pc, #36]	; (1a004284 <Chip_Clock_EnableCrystal+0x48>)
1a004260:	4291      	cmp	r1, r2
1a004262:	d901      	bls.n	1a004268 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a004264:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a004268:	4a04      	ldr	r2, [pc, #16]	; (1a00427c <Chip_Clock_EnableCrystal+0x40>)
1a00426a:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a00426c:	9b01      	ldr	r3, [sp, #4]
1a00426e:	1e5a      	subs	r2, r3, #1
1a004270:	9201      	str	r2, [sp, #4]
1a004272:	2b00      	cmp	r3, #0
1a004274:	d1fa      	bne.n	1a00426c <Chip_Clock_EnableCrystal+0x30>
}
1a004276:	b002      	add	sp, #8
1a004278:	4770      	bx	lr
1a00427a:	bf00      	nop
1a00427c:	40050000 	.word	0x40050000
1a004280:	1a006ad4 	.word	0x1a006ad4
1a004284:	01312cff 	.word	0x01312cff

1a004288 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a004288:	3012      	adds	r0, #18
1a00428a:	4b05      	ldr	r3, [pc, #20]	; (1a0042a0 <Chip_Clock_GetDividerSource+0x18>)
1a00428c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a004290:	f010 0f01 	tst.w	r0, #1
1a004294:	d102      	bne.n	1a00429c <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a004296:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00429a:	4770      	bx	lr
		return CLKINPUT_PD;
1a00429c:	2011      	movs	r0, #17
}
1a00429e:	4770      	bx	lr
1a0042a0:	40050000 	.word	0x40050000

1a0042a4 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a0042a4:	f100 0212 	add.w	r2, r0, #18
1a0042a8:	4b03      	ldr	r3, [pc, #12]	; (1a0042b8 <Chip_Clock_GetDividerDivisor+0x14>)
1a0042aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a0042ae:	4b03      	ldr	r3, [pc, #12]	; (1a0042bc <Chip_Clock_GetDividerDivisor+0x18>)
1a0042b0:	5c18      	ldrb	r0, [r3, r0]
}
1a0042b2:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a0042b6:	4770      	bx	lr
1a0042b8:	40050000 	.word	0x40050000
1a0042bc:	1a006b64 	.word	0x1a006b64

1a0042c0 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a0042c0:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a0042c2:	2810      	cmp	r0, #16
1a0042c4:	d80a      	bhi.n	1a0042dc <Chip_Clock_GetClockInputHz+0x1c>
1a0042c6:	e8df f000 	tbb	[pc, r0]
1a0042ca:	0b42      	.short	0x0b42
1a0042cc:	091f160d 	.word	0x091f160d
1a0042d0:	2b282522 	.word	0x2b282522
1a0042d4:	322e0909 	.word	0x322e0909
1a0042d8:	3a36      	.short	0x3a36
1a0042da:	3e          	.byte	0x3e
1a0042db:	00          	.byte	0x00
	uint32_t rate = 0;
1a0042dc:	2000      	movs	r0, #0
1a0042de:	e038      	b.n	1a004352 <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a0042e0:	481e      	ldr	r0, [pc, #120]	; (1a00435c <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a0042e2:	e036      	b.n	1a004352 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0042e4:	4b1e      	ldr	r3, [pc, #120]	; (1a004360 <Chip_Clock_GetClockInputHz+0xa0>)
1a0042e6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0042ea:	f003 0307 	and.w	r3, r3, #7
1a0042ee:	2b04      	cmp	r3, #4
1a0042f0:	d130      	bne.n	1a004354 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a0042f2:	2000      	movs	r0, #0
1a0042f4:	e02d      	b.n	1a004352 <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0042f6:	4b1a      	ldr	r3, [pc, #104]	; (1a004360 <Chip_Clock_GetClockInputHz+0xa0>)
1a0042f8:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0042fc:	f003 0307 	and.w	r3, r3, #7
1a004300:	2b04      	cmp	r3, #4
1a004302:	d029      	beq.n	1a004358 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a004304:	4817      	ldr	r0, [pc, #92]	; (1a004364 <Chip_Clock_GetClockInputHz+0xa4>)
1a004306:	e024      	b.n	1a004352 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a004308:	4b17      	ldr	r3, [pc, #92]	; (1a004368 <Chip_Clock_GetClockInputHz+0xa8>)
1a00430a:	6818      	ldr	r0, [r3, #0]
		break;
1a00430c:	e021      	b.n	1a004352 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a00430e:	4b17      	ldr	r3, [pc, #92]	; (1a00436c <Chip_Clock_GetClockInputHz+0xac>)
1a004310:	6818      	ldr	r0, [r3, #0]
		break;
1a004312:	e01e      	b.n	1a004352 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a004314:	4b16      	ldr	r3, [pc, #88]	; (1a004370 <Chip_Clock_GetClockInputHz+0xb0>)
1a004316:	6818      	ldr	r0, [r3, #0]
		break;
1a004318:	e01b      	b.n	1a004352 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a00431a:	4b15      	ldr	r3, [pc, #84]	; (1a004370 <Chip_Clock_GetClockInputHz+0xb0>)
1a00431c:	6858      	ldr	r0, [r3, #4]
		break;
1a00431e:	e018      	b.n	1a004352 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a004320:	f000 f86a 	bl	1a0043f8 <Chip_Clock_GetMainPLLHz>
		break;
1a004324:	e015      	b.n	1a004352 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a004326:	2100      	movs	r1, #0
1a004328:	f000 f89c 	bl	1a004464 <Chip_Clock_GetDivRate>
		break;
1a00432c:	e011      	b.n	1a004352 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00432e:	2101      	movs	r1, #1
1a004330:	f000 f898 	bl	1a004464 <Chip_Clock_GetDivRate>
		break;
1a004334:	e00d      	b.n	1a004352 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a004336:	2102      	movs	r1, #2
1a004338:	f000 f894 	bl	1a004464 <Chip_Clock_GetDivRate>
		break;
1a00433c:	e009      	b.n	1a004352 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a00433e:	2103      	movs	r1, #3
1a004340:	f000 f890 	bl	1a004464 <Chip_Clock_GetDivRate>
		break;
1a004344:	e005      	b.n	1a004352 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a004346:	2104      	movs	r1, #4
1a004348:	f000 f88c 	bl	1a004464 <Chip_Clock_GetDivRate>
		break;
1a00434c:	e001      	b.n	1a004352 <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a00434e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a004352:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a004354:	4803      	ldr	r0, [pc, #12]	; (1a004364 <Chip_Clock_GetClockInputHz+0xa4>)
1a004356:	e7fc      	b.n	1a004352 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a004358:	4806      	ldr	r0, [pc, #24]	; (1a004374 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a00435a:	e7fa      	b.n	1a004352 <Chip_Clock_GetClockInputHz+0x92>
1a00435c:	00b71b00 	.word	0x00b71b00
1a004360:	40043000 	.word	0x40043000
1a004364:	017d7840 	.word	0x017d7840
1a004368:	1a006aa8 	.word	0x1a006aa8
1a00436c:	1a006ad4 	.word	0x1a006ad4
1a004370:	100009fc 	.word	0x100009fc
1a004374:	02faf080 	.word	0x02faf080

1a004378 <Chip_Clock_CalcMainPLLValue>:
{
1a004378:	b538      	push	{r3, r4, r5, lr}
1a00437a:	4605      	mov	r5, r0
1a00437c:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a00437e:	7908      	ldrb	r0, [r1, #4]
1a004380:	f7ff ff9e 	bl	1a0042c0 <Chip_Clock_GetClockInputHz>
1a004384:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a004386:	4b19      	ldr	r3, [pc, #100]	; (1a0043ec <Chip_Clock_CalcMainPLLValue+0x74>)
1a004388:	442b      	add	r3, r5
1a00438a:	4a19      	ldr	r2, [pc, #100]	; (1a0043f0 <Chip_Clock_CalcMainPLLValue+0x78>)
1a00438c:	4293      	cmp	r3, r2
1a00438e:	d821      	bhi.n	1a0043d4 <Chip_Clock_CalcMainPLLValue+0x5c>
1a004390:	b318      	cbz	r0, 1a0043da <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a004392:	2380      	movs	r3, #128	; 0x80
1a004394:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a004396:	2300      	movs	r3, #0
1a004398:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a00439a:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a00439c:	fbb5 f3f0 	udiv	r3, r5, r0
1a0043a0:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a0043a2:	4a14      	ldr	r2, [pc, #80]	; (1a0043f4 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a0043a4:	4295      	cmp	r5, r2
1a0043a6:	d903      	bls.n	1a0043b0 <Chip_Clock_CalcMainPLLValue+0x38>
1a0043a8:	fb03 f000 	mul.w	r0, r3, r0
1a0043ac:	42a8      	cmp	r0, r5
1a0043ae:	d007      	beq.n	1a0043c0 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a0043b0:	4621      	mov	r1, r4
1a0043b2:	4628      	mov	r0, r5
1a0043b4:	f7ff fe96 	bl	1a0040e4 <pll_get_frac>
		if (!ppll->nsel) {
1a0043b8:	68a3      	ldr	r3, [r4, #8]
1a0043ba:	b18b      	cbz	r3, 1a0043e0 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a0043bc:	3b01      	subs	r3, #1
1a0043be:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a0043c0:	6923      	ldr	r3, [r4, #16]
1a0043c2:	b183      	cbz	r3, 1a0043e6 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a0043c4:	68e2      	ldr	r2, [r4, #12]
1a0043c6:	b10a      	cbz	r2, 1a0043cc <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a0043c8:	3a01      	subs	r2, #1
1a0043ca:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a0043cc:	3b01      	subs	r3, #1
1a0043ce:	6123      	str	r3, [r4, #16]
	return 0;
1a0043d0:	2000      	movs	r0, #0
}
1a0043d2:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a0043d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0043d8:	e7fb      	b.n	1a0043d2 <Chip_Clock_CalcMainPLLValue+0x5a>
1a0043da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0043de:	e7f8      	b.n	1a0043d2 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a0043e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0043e4:	e7f5      	b.n	1a0043d2 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a0043e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0043ea:	e7f2      	b.n	1a0043d2 <Chip_Clock_CalcMainPLLValue+0x5a>
1a0043ec:	ff6b3a10 	.word	0xff6b3a10
1a0043f0:	0b940510 	.word	0x0b940510
1a0043f4:	094c5eff 	.word	0x094c5eff

1a0043f8 <Chip_Clock_GetMainPLLHz>:
{
1a0043f8:	b530      	push	{r4, r5, lr}
1a0043fa:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a0043fc:	4d17      	ldr	r5, [pc, #92]	; (1a00445c <Chip_Clock_GetMainPLLHz+0x64>)
1a0043fe:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a004400:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a004404:	f7ff ff5c 	bl	1a0042c0 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a004408:	4b15      	ldr	r3, [pc, #84]	; (1a004460 <Chip_Clock_GetMainPLLHz+0x68>)
1a00440a:	681b      	ldr	r3, [r3, #0]
1a00440c:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a00440e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a004410:	f013 0f01 	tst.w	r3, #1
1a004414:	d01f      	beq.n	1a004456 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a004416:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a00441a:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a00441e:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a004422:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a004426:	3301      	adds	r3, #1
	n = nsel + 1;
1a004428:	3201      	adds	r2, #1
	p = ptab[psel];
1a00442a:	f10d 0c08 	add.w	ip, sp, #8
1a00442e:	4461      	add	r1, ip
1a004430:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a004434:	f014 0f80 	tst.w	r4, #128	; 0x80
1a004438:	d108      	bne.n	1a00444c <Chip_Clock_GetMainPLLHz+0x54>
1a00443a:	b93d      	cbnz	r5, 1a00444c <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a00443c:	0049      	lsls	r1, r1, #1
1a00443e:	fbb3 f3f1 	udiv	r3, r3, r1
1a004442:	fbb0 f0f2 	udiv	r0, r0, r2
1a004446:	fb00 f003 	mul.w	r0, r0, r3
1a00444a:	e005      	b.n	1a004458 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a00444c:	fbb0 f0f2 	udiv	r0, r0, r2
1a004450:	fb03 f000 	mul.w	r0, r3, r0
1a004454:	e000      	b.n	1a004458 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a004456:	2000      	movs	r0, #0
}
1a004458:	b003      	add	sp, #12
1a00445a:	bd30      	pop	{r4, r5, pc}
1a00445c:	40050000 	.word	0x40050000
1a004460:	1a006b60 	.word	0x1a006b60

1a004464 <Chip_Clock_GetDivRate>:
{
1a004464:	b538      	push	{r3, r4, r5, lr}
1a004466:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a004468:	4608      	mov	r0, r1
1a00446a:	f7ff ff0d 	bl	1a004288 <Chip_Clock_GetDividerSource>
1a00446e:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a004470:	4620      	mov	r0, r4
1a004472:	f7ff ff17 	bl	1a0042a4 <Chip_Clock_GetDividerDivisor>
1a004476:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a004478:	4628      	mov	r0, r5
1a00447a:	f7ff ff21 	bl	1a0042c0 <Chip_Clock_GetClockInputHz>
1a00447e:	3401      	adds	r4, #1
}
1a004480:	fbb0 f0f4 	udiv	r0, r0, r4
1a004484:	bd38      	pop	{r3, r4, r5, pc}
1a004486:	Address 0x000000001a004486 is out of bounds.


1a004488 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a004488:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a00448a:	f100 0416 	add.w	r4, r0, #22
1a00448e:	00a4      	lsls	r4, r4, #2
1a004490:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a004494:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a004498:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a00449a:	281b      	cmp	r0, #27
1a00449c:	d813      	bhi.n	1a0044c6 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a00449e:	2911      	cmp	r1, #17
1a0044a0:	d01a      	beq.n	1a0044d8 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a0044a2:	4d0e      	ldr	r5, [pc, #56]	; (1a0044dc <Chip_Clock_SetBaseClock+0x54>)
1a0044a4:	4025      	ands	r5, r4

			if (autoblocken) {
1a0044a6:	b10a      	cbz	r2, 1a0044ac <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a0044a8:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a0044ac:	b10b      	cbz	r3, 1a0044b2 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a0044ae:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a0044b2:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a0044b6:	3016      	adds	r0, #22
1a0044b8:	0080      	lsls	r0, r0, #2
1a0044ba:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0044be:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0044c2:	6045      	str	r5, [r0, #4]
1a0044c4:	e008      	b.n	1a0044d8 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a0044c6:	f044 0401 	orr.w	r4, r4, #1
1a0044ca:	3016      	adds	r0, #22
1a0044cc:	0080      	lsls	r0, r0, #2
1a0044ce:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0044d2:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0044d6:	6044      	str	r4, [r0, #4]
	}
}
1a0044d8:	bc30      	pop	{r4, r5}
1a0044da:	4770      	bx	lr
1a0044dc:	e0fff7fe 	.word	0xe0fff7fe

1a0044e0 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a0044e0:	281b      	cmp	r0, #27
1a0044e2:	d80c      	bhi.n	1a0044fe <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a0044e4:	3016      	adds	r0, #22
1a0044e6:	0080      	lsls	r0, r0, #2
1a0044e8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0044ec:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0044f0:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a0044f2:	f010 0f01 	tst.w	r0, #1
1a0044f6:	d104      	bne.n	1a004502 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0044f8:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0044fc:	4770      	bx	lr
		return CLKINPUT_PD;
1a0044fe:	2011      	movs	r0, #17
1a004500:	4770      	bx	lr
		return CLKINPUT_PD;
1a004502:	2011      	movs	r0, #17
}
1a004504:	4770      	bx	lr

1a004506 <Chip_Clock_GetBaseClocktHz>:
{
1a004506:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a004508:	f7ff ffea 	bl	1a0044e0 <Chip_Clock_GetBaseClock>
1a00450c:	f7ff fed8 	bl	1a0042c0 <Chip_Clock_GetClockInputHz>
}
1a004510:	bd08      	pop	{r3, pc}
1a004512:	Address 0x000000001a004512 is out of bounds.


1a004514 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a004514:	b969      	cbnz	r1, 1a004532 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a004516:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a004518:	b10a      	cbz	r2, 1a00451e <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a00451a:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a00451e:	2b02      	cmp	r3, #2
1a004520:	d009      	beq.n	1a004536 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a004522:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a004526:	d209      	bcs.n	1a00453c <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a004528:	3020      	adds	r0, #32
1a00452a:	4b07      	ldr	r3, [pc, #28]	; (1a004548 <Chip_Clock_EnableOpts+0x34>)
1a00452c:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a004530:	4770      	bx	lr
		reg |= (1 << 1);
1a004532:	2103      	movs	r1, #3
1a004534:	e7f0      	b.n	1a004518 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a004536:	f041 0120 	orr.w	r1, r1, #32
1a00453a:	e7f2      	b.n	1a004522 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a00453c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a004540:	4b02      	ldr	r3, [pc, #8]	; (1a00454c <Chip_Clock_EnableOpts+0x38>)
1a004542:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a004546:	4770      	bx	lr
1a004548:	40051000 	.word	0x40051000
1a00454c:	40052000 	.word	0x40052000

1a004550 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a004550:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a004554:	d208      	bcs.n	1a004568 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a004556:	4a09      	ldr	r2, [pc, #36]	; (1a00457c <Chip_Clock_Enable+0x2c>)
1a004558:	3020      	adds	r0, #32
1a00455a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00455e:	f043 0301 	orr.w	r3, r3, #1
1a004562:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a004566:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a004568:	4a05      	ldr	r2, [pc, #20]	; (1a004580 <Chip_Clock_Enable+0x30>)
1a00456a:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a00456e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a004572:	f043 0301 	orr.w	r3, r3, #1
1a004576:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a00457a:	4770      	bx	lr
1a00457c:	40051000 	.word	0x40051000
1a004580:	40052000 	.word	0x40052000

1a004584 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a004584:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a004586:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00458a:	d309      	bcc.n	1a0045a0 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a00458c:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a004590:	4a0d      	ldr	r2, [pc, #52]	; (1a0045c8 <Chip_Clock_GetRate+0x44>)
1a004592:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a004596:	f014 0f01 	tst.w	r4, #1
1a00459a:	d107      	bne.n	1a0045ac <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a00459c:	2000      	movs	r0, #0
	}

	return rate;
}
1a00459e:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0045a0:	f100 0320 	add.w	r3, r0, #32
1a0045a4:	4a09      	ldr	r2, [pc, #36]	; (1a0045cc <Chip_Clock_GetRate+0x48>)
1a0045a6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a0045aa:	e7f4      	b.n	1a004596 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a0045ac:	f7ff fe20 	bl	1a0041f0 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a0045b0:	f7ff ffa9 	bl	1a004506 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a0045b4:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a0045b8:	d103      	bne.n	1a0045c2 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a0045ba:	2301      	movs	r3, #1
		rate = rate / div;
1a0045bc:	fbb0 f0f3 	udiv	r0, r0, r3
1a0045c0:	e7ed      	b.n	1a00459e <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a0045c2:	2302      	movs	r3, #2
1a0045c4:	e7fa      	b.n	1a0045bc <Chip_Clock_GetRate+0x38>
1a0045c6:	bf00      	nop
1a0045c8:	40052000 	.word	0x40052000
1a0045cc:	40051000 	.word	0x40051000

1a0045d0 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0045d0:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0045d2:	2069      	movs	r0, #105	; 0x69
1a0045d4:	f7ff ffd6 	bl	1a004584 <Chip_Clock_GetRate>
1a0045d8:	4b01      	ldr	r3, [pc, #4]	; (1a0045e0 <SystemCoreClockUpdate+0x10>)
1a0045da:	6018      	str	r0, [r3, #0]
}
1a0045dc:	bd08      	pop	{r3, pc}
1a0045de:	bf00      	nop
1a0045e0:	10000ac0 	.word	0x10000ac0

1a0045e4 <Chip_I2CM_XferHandler>:
	Chip_I2CM_SetDutyCycle(pI2C, (clockDiv >> 1), (clockDiv - (clockDiv >> 1)));
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a0045e4:	b410      	push	{r4}
 * @note	I2C controller clears STO bit when it sees STOP
 *          condition after a START condition on the bus.
 */
static INLINE uint32_t Chip_I2CM_GetCurState(LPC_I2C_T *pI2C)
{
	return pI2C->STAT & I2C_STAT_CODE_BITMASK;
1a0045e6:	6843      	ldr	r3, [r0, #4]
1a0045e8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	uint32_t cclr = I2C_CON_FLAGS;

	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0045ec:	2b30      	cmp	r3, #48	; 0x30
1a0045ee:	d04a      	beq.n	1a004686 <Chip_I2CM_XferHandler+0xa2>
1a0045f0:	d90f      	bls.n	1a004612 <Chip_I2CM_XferHandler+0x2e>
1a0045f2:	2b48      	cmp	r3, #72	; 0x48
1a0045f4:	d06a      	beq.n	1a0046cc <Chip_I2CM_XferHandler+0xe8>
1a0045f6:	d83a      	bhi.n	1a00466e <Chip_I2CM_XferHandler+0x8a>
1a0045f8:	2b38      	cmp	r3, #56	; 0x38
1a0045fa:	d06b      	beq.n	1a0046d4 <Chip_I2CM_XferHandler+0xf0>
1a0045fc:	2b40      	cmp	r3, #64	; 0x40
1a0045fe:	d13e      	bne.n	1a00467e <Chip_I2CM_XferHandler+0x9a>
	case 0x50:		/* Data Received and ACK sent */
		*xfer->rxBuff++ = pI2C->DAT;
		xfer->rxSz--;

	case 0x40:		/* SLA+R sent and ACK received */
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a004600:	88ca      	ldrh	r2, [r1, #6]
1a004602:	2a01      	cmp	r2, #1
1a004604:	d95a      	bls.n	1a0046bc <Chip_I2CM_XferHandler+0xd8>
			cclr &= ~I2C_CON_AA;
1a004606:	2338      	movs	r3, #56	; 0x38
		}
		if (xfer->rxSz == 0) {
1a004608:	b9b2      	cbnz	r2, 1a004638 <Chip_I2CM_XferHandler+0x54>
			xfer->status = I2CM_STATUS_OK;
1a00460a:	804a      	strh	r2, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a00460c:	f023 0310 	bic.w	r3, r3, #16
1a004610:	e012      	b.n	1a004638 <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a004612:	2b10      	cmp	r3, #16
1a004614:	d007      	beq.n	1a004626 <Chip_I2CM_XferHandler+0x42>
1a004616:	d81c      	bhi.n	1a004652 <Chip_I2CM_XferHandler+0x6e>
1a004618:	b91b      	cbnz	r3, 1a004622 <Chip_I2CM_XferHandler+0x3e>
	case 0x38:		/* Arbitration lost */
		xfer->status = I2CM_STATUS_ARBLOST;
		break;

	case 0x00:		/* Bus Error */
		xfer->status = I2CM_STATUS_BUS_ERROR;
1a00461a:	2303      	movs	r3, #3
1a00461c:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a00461e:	232c      	movs	r3, #44	; 0x2c
        break;
1a004620:	e00a      	b.n	1a004638 <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a004622:	2b08      	cmp	r3, #8
1a004624:	d12b      	bne.n	1a00467e <Chip_I2CM_XferHandler+0x9a>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a004626:	780a      	ldrb	r2, [r1, #0]
1a004628:	888b      	ldrh	r3, [r1, #4]
1a00462a:	fab3 f383 	clz	r3, r3
1a00462e:	095b      	lsrs	r3, r3, #5
1a004630:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a004634:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a004636:	233c      	movs	r3, #60	; 0x3c
		cclr &= ~I2C_CON_STO;
        break;
	}

	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a004638:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a00463c:	6002      	str	r2, [r0, #0]
	/* Stop flag should not be cleared as it is a reserved bit */
	pI2C->CONCLR = cclr & (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA);
1a00463e:	f003 032c 	and.w	r3, r3, #44	; 0x2c
1a004642:	6183      	str	r3, [r0, #24]

	return xfer->status != I2CM_STATUS_BUSY;
1a004644:	8848      	ldrh	r0, [r1, #2]
1a004646:	38ff      	subs	r0, #255	; 0xff
1a004648:	bf18      	it	ne
1a00464a:	2001      	movne	r0, #1
}
1a00464c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a004650:	4770      	bx	lr
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a004652:	2b20      	cmp	r3, #32
1a004654:	d017      	beq.n	1a004686 <Chip_I2CM_XferHandler+0xa2>
1a004656:	2b28      	cmp	r3, #40	; 0x28
1a004658:	d001      	beq.n	1a00465e <Chip_I2CM_XferHandler+0x7a>
1a00465a:	2b18      	cmp	r3, #24
1a00465c:	d10f      	bne.n	1a00467e <Chip_I2CM_XferHandler+0x9a>
		if (!xfer->txSz) {
1a00465e:	888b      	ldrh	r3, [r1, #4]
1a004660:	b9cb      	cbnz	r3, 1a004696 <Chip_I2CM_XferHandler+0xb2>
			if (xfer->rxSz) {
1a004662:	88cb      	ldrh	r3, [r1, #6]
1a004664:	2b00      	cmp	r3, #0
1a004666:	d139      	bne.n	1a0046dc <Chip_I2CM_XferHandler+0xf8>
				xfer->status = I2CM_STATUS_OK;
1a004668:	804b      	strh	r3, [r1, #2]
				cclr &= ~I2C_CON_STO;
1a00466a:	232c      	movs	r3, #44	; 0x2c
1a00466c:	e7e4      	b.n	1a004638 <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a00466e:	2b58      	cmp	r3, #88	; 0x58
1a004670:	d01b      	beq.n	1a0046aa <Chip_I2CM_XferHandler+0xc6>
1a004672:	2bf8      	cmp	r3, #248	; 0xf8
1a004674:	d101      	bne.n	1a00467a <Chip_I2CM_XferHandler+0x96>
      return 0;
1a004676:	2000      	movs	r0, #0
1a004678:	e7e8      	b.n	1a00464c <Chip_I2CM_XferHandler+0x68>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a00467a:	2b50      	cmp	r3, #80	; 0x50
1a00467c:	d015      	beq.n	1a0046aa <Chip_I2CM_XferHandler+0xc6>
		xfer->status = I2CM_STATUS_ERROR;
1a00467e:	2301      	movs	r3, #1
1a004680:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a004682:	232c      	movs	r3, #44	; 0x2c
        break;
1a004684:	e7d8      	b.n	1a004638 <Chip_I2CM_XferHandler+0x54>
		if ((xfer->options & I2CM_XFER_OPTION_IGNORE_NACK) == 0) {
1a004686:	784b      	ldrb	r3, [r1, #1]
1a004688:	f013 0f01 	tst.w	r3, #1
1a00468c:	d1e7      	bne.n	1a00465e <Chip_I2CM_XferHandler+0x7a>
			xfer->status = I2CM_STATUS_NAK;
1a00468e:	2302      	movs	r3, #2
1a004690:	804b      	strh	r3, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a004692:	232c      	movs	r3, #44	; 0x2c
			break;
1a004694:	e7d0      	b.n	1a004638 <Chip_I2CM_XferHandler+0x54>
			pI2C->DAT = *xfer->txBuff++;
1a004696:	688b      	ldr	r3, [r1, #8]
1a004698:	1c5a      	adds	r2, r3, #1
1a00469a:	608a      	str	r2, [r1, #8]
1a00469c:	781b      	ldrb	r3, [r3, #0]
1a00469e:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a0046a0:	888b      	ldrh	r3, [r1, #4]
1a0046a2:	3b01      	subs	r3, #1
1a0046a4:	808b      	strh	r3, [r1, #4]
	uint32_t cclr = I2C_CON_FLAGS;
1a0046a6:	233c      	movs	r3, #60	; 0x3c
1a0046a8:	e7c6      	b.n	1a004638 <Chip_I2CM_XferHandler+0x54>
		*xfer->rxBuff++ = pI2C->DAT;
1a0046aa:	6882      	ldr	r2, [r0, #8]
1a0046ac:	68cb      	ldr	r3, [r1, #12]
1a0046ae:	1c5c      	adds	r4, r3, #1
1a0046b0:	60cc      	str	r4, [r1, #12]
1a0046b2:	701a      	strb	r2, [r3, #0]
		xfer->rxSz--;
1a0046b4:	88cb      	ldrh	r3, [r1, #6]
1a0046b6:	3b01      	subs	r3, #1
1a0046b8:	80cb      	strh	r3, [r1, #6]
1a0046ba:	e7a1      	b.n	1a004600 <Chip_I2CM_XferHandler+0x1c>
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a0046bc:	784b      	ldrb	r3, [r1, #1]
1a0046be:	f013 0f02 	tst.w	r3, #2
1a0046c2:	d101      	bne.n	1a0046c8 <Chip_I2CM_XferHandler+0xe4>
	uint32_t cclr = I2C_CON_FLAGS;
1a0046c4:	233c      	movs	r3, #60	; 0x3c
1a0046c6:	e79f      	b.n	1a004608 <Chip_I2CM_XferHandler+0x24>
			cclr &= ~I2C_CON_AA;
1a0046c8:	2338      	movs	r3, #56	; 0x38
1a0046ca:	e79d      	b.n	1a004608 <Chip_I2CM_XferHandler+0x24>
		xfer->status = I2CM_STATUS_SLAVE_NAK;
1a0046cc:	2304      	movs	r3, #4
1a0046ce:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a0046d0:	232c      	movs	r3, #44	; 0x2c
		break;
1a0046d2:	e7b1      	b.n	1a004638 <Chip_I2CM_XferHandler+0x54>
		xfer->status = I2CM_STATUS_ARBLOST;
1a0046d4:	2305      	movs	r3, #5
1a0046d6:	804b      	strh	r3, [r1, #2]
	uint32_t cclr = I2C_CON_FLAGS;
1a0046d8:	233c      	movs	r3, #60	; 0x3c
		break;
1a0046da:	e7ad      	b.n	1a004638 <Chip_I2CM_XferHandler+0x54>
				cclr &= ~I2C_CON_STA;
1a0046dc:	231c      	movs	r3, #28
1a0046de:	e7ab      	b.n	1a004638 <Chip_I2CM_XferHandler+0x54>

1a0046e0 <Chip_I2CM_Xfer>:

/* Transmit and Receive data in master mode */
void Chip_I2CM_Xfer(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	/* set the transfer status as busy */
	xfer->status = I2CM_STATUS_BUSY;
1a0046e0:	23ff      	movs	r3, #255	; 0xff
1a0046e2:	804b      	strh	r3, [r1, #2]
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA | I2C_CON_AA;
1a0046e4:	232c      	movs	r3, #44	; 0x2c
1a0046e6:	6183      	str	r3, [r0, #24]
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_STA;
1a0046e8:	2360      	movs	r3, #96	; 0x60
1a0046ea:	6003      	str	r3, [r0, #0]
	/* Clear controller state. */
	Chip_I2CM_ResetControl(pI2C);
	/* Enter to Master Transmitter mode */
	Chip_I2CM_SendStart(pI2C);
}
1a0046ec:	4770      	bx	lr

1a0046ee <Chip_I2CM_XferBlocking>:

/* Transmit and Receive data in master mode */
uint32_t Chip_I2CM_XferBlocking(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a0046ee:	b538      	push	{r3, r4, r5, lr}
1a0046f0:	4604      	mov	r4, r0
1a0046f2:	460d      	mov	r5, r1
	uint32_t ret = 0;
	/* start transfer */
	Chip_I2CM_Xfer(pI2C, xfer);
1a0046f4:	f7ff fff4 	bl	1a0046e0 <Chip_I2CM_Xfer>
	uint32_t ret = 0;
1a0046f8:	2000      	movs	r0, #0

	while (ret == 0) {
1a0046fa:	e007      	b.n	1a00470c <Chip_I2CM_XferBlocking+0x1e>
	return pI2C->CONSET & I2C_CON_SI;
1a0046fc:	6823      	ldr	r3, [r4, #0]
		/* wait for status change interrupt */
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
1a0046fe:	f013 0f08 	tst.w	r3, #8
1a004702:	d0fb      	beq.n	1a0046fc <Chip_I2CM_XferBlocking+0xe>
		/* call state change handler */
		ret = Chip_I2CM_XferHandler(pI2C, xfer);
1a004704:	4629      	mov	r1, r5
1a004706:	4620      	mov	r0, r4
1a004708:	f7ff ff6c 	bl	1a0045e4 <Chip_I2CM_XferHandler>
	while (ret == 0) {
1a00470c:	2800      	cmp	r0, #0
1a00470e:	d0f5      	beq.n	1a0046fc <Chip_I2CM_XferBlocking+0xe>
	}
	return ret;
}
1a004710:	bd38      	pop	{r3, r4, r5, pc}

1a004712 <Chip_RTC_GetFullTime>:
	pRTC->CCR = ccr_val;
}

/* Get full time from the RTC peripheral */
void Chip_RTC_GetFullTime(LPC_RTC_T *pRTC, RTC_TIME_T *pFullTime)
{
1a004712:	b410      	push	{r4}
	RTC_TIMEINDEX_T i;
	uint32_t secs = 0xFF;
1a004714:	24ff      	movs	r4, #255	; 0xff

	/* Read full time, but verify second tick didn't change during the read. If
	   it did, re-read the time again so it will be consistent across all fields. */
	while (secs != pRTC->TIME[RTC_TIMETYPE_SECOND]) {
1a004716:	e009      	b.n	1a00472c <Chip_RTC_GetFullTime+0x1a>
		secs = pFullTime->time[RTC_TIMETYPE_SECOND] = pRTC->TIME[RTC_TIMETYPE_SECOND];
		for (i = RTC_TIMETYPE_MINUTE; i < RTC_TIMETYPE_LAST; i++) {
			pFullTime->time[i] = pRTC->TIME[i];
1a004718:	f103 0208 	add.w	r2, r3, #8
1a00471c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
1a004720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (i = RTC_TIMETYPE_MINUTE; i < RTC_TIMETYPE_LAST; i++) {
1a004724:	3301      	adds	r3, #1
1a004726:	b2db      	uxtb	r3, r3
1a004728:	2b07      	cmp	r3, #7
1a00472a:	d9f5      	bls.n	1a004718 <Chip_RTC_GetFullTime+0x6>
	while (secs != pRTC->TIME[RTC_TIMETYPE_SECOND]) {
1a00472c:	6a03      	ldr	r3, [r0, #32]
1a00472e:	42a3      	cmp	r3, r4
1a004730:	d003      	beq.n	1a00473a <Chip_RTC_GetFullTime+0x28>
		secs = pFullTime->time[RTC_TIMETYPE_SECOND] = pRTC->TIME[RTC_TIMETYPE_SECOND];
1a004732:	6a04      	ldr	r4, [r0, #32]
1a004734:	600c      	str	r4, [r1, #0]
		for (i = RTC_TIMETYPE_MINUTE; i < RTC_TIMETYPE_LAST; i++) {
1a004736:	2301      	movs	r3, #1
1a004738:	e7f6      	b.n	1a004728 <Chip_RTC_GetFullTime+0x16>
		}
	}
}
1a00473a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00473e:	4770      	bx	lr

1a004740 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a004740:	4770      	bx	lr
1a004742:	Address 0x000000001a004742 is out of bounds.


1a004744 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a004744:	b570      	push	{r4, r5, r6, lr}
1a004746:	b08a      	sub	sp, #40	; 0x28
1a004748:	4605      	mov	r5, r0
1a00474a:	460e      	mov	r6, r1
1a00474c:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a00474e:	f242 7310 	movw	r3, #10000	; 0x2710
1a004752:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a004754:	2806      	cmp	r0, #6
1a004756:	d018      	beq.n	1a00478a <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a004758:	2300      	movs	r3, #0
1a00475a:	2201      	movs	r2, #1
1a00475c:	4629      	mov	r1, r5
1a00475e:	2004      	movs	r0, #4
1a004760:	f7ff fe92 	bl	1a004488 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a004764:	4a49      	ldr	r2, [pc, #292]	; (1a00488c <Chip_SetupCoreClock+0x148>)
1a004766:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a004768:	f043 0301 	orr.w	r3, r3, #1
1a00476c:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a00476e:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a004772:	a901      	add	r1, sp, #4
1a004774:	4630      	mov	r0, r6
1a004776:	f7ff fdff 	bl	1a004378 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a00477a:	4b45      	ldr	r3, [pc, #276]	; (1a004890 <Chip_SetupCoreClock+0x14c>)
1a00477c:	429e      	cmp	r6, r3
1a00477e:	d916      	bls.n	1a0047ae <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a004780:	9b01      	ldr	r3, [sp, #4]
1a004782:	f013 0f40 	tst.w	r3, #64	; 0x40
1a004786:	d003      	beq.n	1a004790 <Chip_SetupCoreClock+0x4c>
1a004788:	e7fe      	b.n	1a004788 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a00478a:	f7ff fd57 	bl	1a00423c <Chip_Clock_EnableCrystal>
1a00478e:	e7e3      	b.n	1a004758 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a004790:	f013 0f80 	tst.w	r3, #128	; 0x80
1a004794:	d005      	beq.n	1a0047a2 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a004796:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00479a:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a00479c:	2500      	movs	r5, #0
			direct = 1;
1a00479e:	2601      	movs	r6, #1
1a0047a0:	e007      	b.n	1a0047b2 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a0047a2:	9b04      	ldr	r3, [sp, #16]
1a0047a4:	3301      	adds	r3, #1
1a0047a6:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a0047a8:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a0047aa:	2600      	movs	r6, #0
1a0047ac:	e001      	b.n	1a0047b2 <Chip_SetupCoreClock+0x6e>
1a0047ae:	2500      	movs	r5, #0
1a0047b0:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0047b2:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0047b6:	9b01      	ldr	r3, [sp, #4]
1a0047b8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0047bc:	9a05      	ldr	r2, [sp, #20]
1a0047be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0047c2:	9a03      	ldr	r2, [sp, #12]
1a0047c4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0047c8:	9a04      	ldr	r2, [sp, #16]
1a0047ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0047ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0047d2:	4a2e      	ldr	r2, [pc, #184]	; (1a00488c <Chip_SetupCoreClock+0x148>)
1a0047d4:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0047d6:	4b2d      	ldr	r3, [pc, #180]	; (1a00488c <Chip_SetupCoreClock+0x148>)
1a0047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a0047da:	f013 0f01 	tst.w	r3, #1
1a0047de:	d0fa      	beq.n	1a0047d6 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0047e0:	2300      	movs	r3, #0
1a0047e2:	2201      	movs	r2, #1
1a0047e4:	2109      	movs	r1, #9
1a0047e6:	2004      	movs	r0, #4
1a0047e8:	f7ff fe4e 	bl	1a004488 <Chip_Clock_SetBaseClock>

	if (direct) {
1a0047ec:	b1fe      	cbz	r6, 1a00482e <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0047ee:	f242 7310 	movw	r3, #10000	; 0x2710
1a0047f2:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a0047f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0047f6:	1e5a      	subs	r2, r3, #1
1a0047f8:	9209      	str	r2, [sp, #36]	; 0x24
1a0047fa:	2b00      	cmp	r3, #0
1a0047fc:	d1fa      	bne.n	1a0047f4 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a0047fe:	9b01      	ldr	r3, [sp, #4]
1a004800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a004804:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a004806:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00480a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00480e:	9a05      	ldr	r2, [sp, #20]
1a004810:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a004814:	9a03      	ldr	r2, [sp, #12]
1a004816:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00481a:	9a04      	ldr	r2, [sp, #16]
1a00481c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a004820:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a004824:	4a19      	ldr	r2, [pc, #100]	; (1a00488c <Chip_SetupCoreClock+0x148>)
1a004826:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a004828:	b36c      	cbz	r4, 1a004886 <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00482a:	2400      	movs	r4, #0
1a00482c:	e029      	b.n	1a004882 <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a00482e:	2d00      	cmp	r5, #0
1a004830:	d0fa      	beq.n	1a004828 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a004832:	f242 7310 	movw	r3, #10000	; 0x2710
1a004836:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a004838:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00483a:	1e5a      	subs	r2, r3, #1
1a00483c:	9209      	str	r2, [sp, #36]	; 0x24
1a00483e:	2b00      	cmp	r3, #0
1a004840:	d1fa      	bne.n	1a004838 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a004842:	9b04      	ldr	r3, [sp, #16]
1a004844:	1e5a      	subs	r2, r3, #1
1a004846:	9204      	str	r2, [sp, #16]
1a004848:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a00484c:	9b01      	ldr	r3, [sp, #4]
1a00484e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a004852:	9905      	ldr	r1, [sp, #20]
1a004854:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a004858:	9903      	ldr	r1, [sp, #12]
1a00485a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a00485e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a004862:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a004866:	4a09      	ldr	r2, [pc, #36]	; (1a00488c <Chip_SetupCoreClock+0x148>)
1a004868:	6453      	str	r3, [r2, #68]	; 0x44
1a00486a:	e7dd      	b.n	1a004828 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a00486c:	4809      	ldr	r0, [pc, #36]	; (1a004894 <Chip_SetupCoreClock+0x150>)
1a00486e:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a004872:	78cb      	ldrb	r3, [r1, #3]
1a004874:	788a      	ldrb	r2, [r1, #2]
1a004876:	7849      	ldrb	r1, [r1, #1]
1a004878:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00487c:	f7ff fe04 	bl	1a004488 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a004880:	3401      	adds	r4, #1
1a004882:	2c11      	cmp	r4, #17
1a004884:	d9f2      	bls.n	1a00486c <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a004886:	b00a      	add	sp, #40	; 0x28
1a004888:	bd70      	pop	{r4, r5, r6, pc}
1a00488a:	bf00      	nop
1a00488c:	40050000 	.word	0x40050000
1a004890:	068e7780 	.word	0x068e7780
1a004894:	1a006bd8 	.word	0x1a006bd8

1a004898 <SSP_Write2BFifo>:
 * Private functions
 ****************************************************************************/

STATIC void SSP_Write2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
1a004898:	680b      	ldr	r3, [r1, #0]
1a00489a:	b133      	cbz	r3, 1a0048aa <SSP_Write2BFifo+0x12>
		Chip_SSP_SendFrame(pSSP, (*(uint16_t *) ((uint32_t) xf_setup->tx_data +
												 xf_setup->tx_cnt)));
1a00489c:	684a      	ldr	r2, [r1, #4]
		Chip_SSP_SendFrame(pSSP, (*(uint16_t *) ((uint32_t) xf_setup->tx_data +
1a00489e:	5a9b      	ldrh	r3, [r3, r2]
	pSSP->DR = SSP_DR_BITMASK(tx_data);
1a0048a0:	6083      	str	r3, [r0, #8]
	}
	else {
		Chip_SSP_SendFrame(pSSP, 0xFFFF);
	}

	xf_setup->tx_cnt += 2;
1a0048a2:	684b      	ldr	r3, [r1, #4]
1a0048a4:	3302      	adds	r3, #2
1a0048a6:	604b      	str	r3, [r1, #4]
}
1a0048a8:	4770      	bx	lr
1a0048aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a0048ae:	6083      	str	r3, [r0, #8]
1a0048b0:	e7f7      	b.n	1a0048a2 <SSP_Write2BFifo+0xa>

1a0048b2 <SSP_Write1BFifo>:

/** SSP macro: write 1 bytes to FIFO buffer */
STATIC void SSP_Write1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
1a0048b2:	680b      	ldr	r3, [r1, #0]
1a0048b4:	b133      	cbz	r3, 1a0048c4 <SSP_Write1BFifo+0x12>
		Chip_SSP_SendFrame(pSSP, (*(uint8_t *) ((uint32_t) xf_setup->tx_data + xf_setup->tx_cnt)));
1a0048b6:	684a      	ldr	r2, [r1, #4]
1a0048b8:	5c9b      	ldrb	r3, [r3, r2]
1a0048ba:	6083      	str	r3, [r0, #8]
	}
	else {
		Chip_SSP_SendFrame(pSSP, 0xFF);
	}

	xf_setup->tx_cnt++;
1a0048bc:	684b      	ldr	r3, [r1, #4]
1a0048be:	3301      	adds	r3, #1
1a0048c0:	604b      	str	r3, [r1, #4]
}
1a0048c2:	4770      	bx	lr
1a0048c4:	23ff      	movs	r3, #255	; 0xff
1a0048c6:	6083      	str	r3, [r0, #8]
1a0048c8:	e7f8      	b.n	1a0048bc <SSP_Write1BFifo+0xa>

1a0048ca <SSP_Read2BFifo>:
	return (pSSP->SR & Stat) ? SET : RESET;
1a0048ca:	68c3      	ldr	r3, [r0, #12]
/** SSP macro: read 1 bytes from FIFO buffer */
STATIC void SSP_Read2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0048cc:	f013 0f04 	tst.w	r3, #4
1a0048d0:	d01b      	beq.n	1a00490a <SSP_Read2BFifo+0x40>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a0048d2:	68ca      	ldr	r2, [r1, #12]
1a0048d4:	690b      	ldr	r3, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0048d6:	429a      	cmp	r2, r3
1a0048d8:	d216      	bcs.n	1a004908 <SSP_Read2BFifo+0x3e>
{
1a0048da:	b410      	push	{r4}
1a0048dc:	e00a      	b.n	1a0048f4 <SSP_Read2BFifo+0x2a>
		rDat = Chip_SSP_ReceiveFrame(pSSP);
		if (xf_setup->rx_data) {
			*(uint16_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
		}

		xf_setup->rx_cnt += 2;
1a0048de:	68cb      	ldr	r3, [r1, #12]
1a0048e0:	3302      	adds	r3, #2
1a0048e2:	60cb      	str	r3, [r1, #12]
1a0048e4:	68c3      	ldr	r3, [r0, #12]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0048e6:	f013 0f04 	tst.w	r3, #4
1a0048ea:	d00a      	beq.n	1a004902 <SSP_Read2BFifo+0x38>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a0048ec:	68ca      	ldr	r2, [r1, #12]
1a0048ee:	690b      	ldr	r3, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0048f0:	429a      	cmp	r2, r3
1a0048f2:	d206      	bcs.n	1a004902 <SSP_Read2BFifo+0x38>
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a0048f4:	6883      	ldr	r3, [r0, #8]
1a0048f6:	b29b      	uxth	r3, r3
		if (xf_setup->rx_data) {
1a0048f8:	688c      	ldr	r4, [r1, #8]
1a0048fa:	2c00      	cmp	r4, #0
1a0048fc:	d0ef      	beq.n	1a0048de <SSP_Read2BFifo+0x14>
			*(uint16_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
1a0048fe:	52a3      	strh	r3, [r4, r2]
1a004900:	e7ed      	b.n	1a0048de <SSP_Read2BFifo+0x14>
	}
}
1a004902:	f85d 4b04 	ldr.w	r4, [sp], #4
1a004906:	4770      	bx	lr
1a004908:	4770      	bx	lr
1a00490a:	4770      	bx	lr

1a00490c <SSP_Read1BFifo>:
	return (pSSP->SR & Stat) ? SET : RESET;
1a00490c:	68c3      	ldr	r3, [r0, #12]
/** SSP macro: read 2 bytes from FIFO buffer */
STATIC void SSP_Read1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a00490e:	f013 0f04 	tst.w	r3, #4
1a004912:	d01a      	beq.n	1a00494a <SSP_Read1BFifo+0x3e>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a004914:	68cb      	ldr	r3, [r1, #12]
1a004916:	690a      	ldr	r2, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a004918:	4293      	cmp	r3, r2
1a00491a:	d215      	bcs.n	1a004948 <SSP_Read1BFifo+0x3c>
{
1a00491c:	b410      	push	{r4}
1a00491e:	e00a      	b.n	1a004936 <SSP_Read1BFifo+0x2a>
		rDat = Chip_SSP_ReceiveFrame(pSSP);
		if (xf_setup->rx_data) {
			*(uint8_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
		}

		xf_setup->rx_cnt++;
1a004920:	68cb      	ldr	r3, [r1, #12]
1a004922:	3301      	adds	r3, #1
1a004924:	60cb      	str	r3, [r1, #12]
1a004926:	68c3      	ldr	r3, [r0, #12]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a004928:	f013 0f04 	tst.w	r3, #4
1a00492c:	d009      	beq.n	1a004942 <SSP_Read1BFifo+0x36>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a00492e:	68cb      	ldr	r3, [r1, #12]
1a004930:	690a      	ldr	r2, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a004932:	4293      	cmp	r3, r2
1a004934:	d205      	bcs.n	1a004942 <SSP_Read1BFifo+0x36>
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a004936:	6884      	ldr	r4, [r0, #8]
		if (xf_setup->rx_data) {
1a004938:	688a      	ldr	r2, [r1, #8]
1a00493a:	2a00      	cmp	r2, #0
1a00493c:	d0f0      	beq.n	1a004920 <SSP_Read1BFifo+0x14>
			*(uint8_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
1a00493e:	54d4      	strb	r4, [r2, r3]
1a004940:	e7ee      	b.n	1a004920 <SSP_Read1BFifo+0x14>
	}
}
1a004942:	f85d 4b04 	ldr.w	r4, [sp], #4
1a004946:	4770      	bx	lr
1a004948:	4770      	bx	lr
1a00494a:	4770      	bx	lr

1a00494c <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a00494c:	4b03      	ldr	r3, [pc, #12]	; (1a00495c <Chip_SSP_GetClockIndex+0x10>)
1a00494e:	4298      	cmp	r0, r3
1a004950:	d001      	beq.n	1a004956 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a004952:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a004954:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a004956:	20a5      	movs	r0, #165	; 0xa5
1a004958:	4770      	bx	lr
1a00495a:	bf00      	nop
1a00495c:	400c5000 	.word	0x400c5000

1a004960 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a004960:	4b04      	ldr	r3, [pc, #16]	; (1a004974 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a004962:	4298      	cmp	r0, r3
1a004964:	d002      	beq.n	1a00496c <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a004966:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a00496a:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a00496c:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a004970:	4770      	bx	lr
1a004972:	bf00      	nop
1a004974:	400c5000 	.word	0x400c5000

1a004978 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a004978:	6803      	ldr	r3, [r0, #0]
1a00497a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a00497e:	0209      	lsls	r1, r1, #8
1a004980:	b289      	uxth	r1, r1
1a004982:	4319      	orrs	r1, r3
1a004984:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a004986:	6102      	str	r2, [r0, #16]
}
1a004988:	4770      	bx	lr

1a00498a <Chip_SSP_RWFrames_Blocking>:

/* SSP Polling Read/Write in blocking mode */
uint32_t Chip_SSP_RWFrames_Blocking(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
1a00498a:	b538      	push	{r3, r4, r5, lr}
1a00498c:	4604      	mov	r4, r0
1a00498e:	460d      	mov	r5, r1
	/* Clear all remaining frames in RX FIFO */
	while (Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE)) {
1a004990:	e000      	b.n	1a004994 <Chip_SSP_RWFrames_Blocking+0xa>
1a004992:	68a3      	ldr	r3, [r4, #8]
	return (pSSP->SR & Stat) ? SET : RESET;
1a004994:	68e3      	ldr	r3, [r4, #12]
1a004996:	f013 0f04 	tst.w	r3, #4
1a00499a:	d1fa      	bne.n	1a004992 <Chip_SSP_RWFrames_Blocking+0x8>
	pSSP->ICR = IntClear;
1a00499c:	2303      	movs	r3, #3
1a00499e:	6223      	str	r3, [r4, #32]
	return SSP_CR0_DSS(pSSP->CR0);
1a0049a0:	6823      	ldr	r3, [r4, #0]
1a0049a2:	f003 030f 	and.w	r3, r3, #15
	}

	/* Clear status */
	Chip_SSP_ClearIntPending(pSSP, SSP_INT_CLEAR_BITMASK);

	if (Chip_SSP_GetDataSize(pSSP) > SSP_BITS_8) {
1a0049a6:	2b07      	cmp	r3, #7
1a0049a8:	d808      	bhi.n	1a0049bc <Chip_SSP_RWFrames_Blocking+0x32>
1a0049aa:	e022      	b.n	1a0049f2 <Chip_SSP_RWFrames_Blocking+0x68>
	return (pSSP->RIS & RawInt) ? SET : RESET;
1a0049ac:	69a3      	ldr	r3, [r4, #24]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
				SSP_Write2BFifo(pSSP, xf_setup);
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
1a0049ae:	f013 0f01 	tst.w	r3, #1
1a0049b2:	d139      	bne.n	1a004a28 <Chip_SSP_RWFrames_Blocking+0x9e>
				return ERROR;
			}

			/* Check for any data available in RX FIFO */
			SSP_Read2BFifo(pSSP, xf_setup);
1a0049b4:	4629      	mov	r1, r5
1a0049b6:	4620      	mov	r0, r4
1a0049b8:	f7ff ff87 	bl	1a0048ca <SSP_Read2BFifo>
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
1a0049bc:	68ea      	ldr	r2, [r5, #12]
1a0049be:	692b      	ldr	r3, [r5, #16]
1a0049c0:	429a      	cmp	r2, r3
1a0049c2:	d302      	bcc.n	1a0049ca <Chip_SSP_RWFrames_Blocking+0x40>
1a0049c4:	686a      	ldr	r2, [r5, #4]
1a0049c6:	4293      	cmp	r3, r2
1a0049c8:	d926      	bls.n	1a004a18 <Chip_SSP_RWFrames_Blocking+0x8e>
	return (pSSP->SR & Stat) ? SET : RESET;
1a0049ca:	68e2      	ldr	r2, [r4, #12]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
1a0049cc:	f012 0f02 	tst.w	r2, #2
1a0049d0:	d0ec      	beq.n	1a0049ac <Chip_SSP_RWFrames_Blocking+0x22>
1a0049d2:	686a      	ldr	r2, [r5, #4]
1a0049d4:	429a      	cmp	r2, r3
1a0049d6:	d2e9      	bcs.n	1a0049ac <Chip_SSP_RWFrames_Blocking+0x22>
				SSP_Write2BFifo(pSSP, xf_setup);
1a0049d8:	4629      	mov	r1, r5
1a0049da:	4620      	mov	r0, r4
1a0049dc:	f7ff ff5c 	bl	1a004898 <SSP_Write2BFifo>
1a0049e0:	e7e4      	b.n	1a0049ac <Chip_SSP_RWFrames_Blocking+0x22>
	return (pSSP->RIS & RawInt) ? SET : RESET;
1a0049e2:	69a3      	ldr	r3, [r4, #24]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
				SSP_Write1BFifo(pSSP, xf_setup);
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
1a0049e4:	f013 0f01 	tst.w	r3, #1
1a0049e8:	d120      	bne.n	1a004a2c <Chip_SSP_RWFrames_Blocking+0xa2>
				return ERROR;
			}

			/* Check for any data available in RX FIFO */
			SSP_Read1BFifo(pSSP, xf_setup);
1a0049ea:	4629      	mov	r1, r5
1a0049ec:	4620      	mov	r0, r4
1a0049ee:	f7ff ff8d 	bl	1a00490c <SSP_Read1BFifo>
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
1a0049f2:	68ea      	ldr	r2, [r5, #12]
1a0049f4:	692b      	ldr	r3, [r5, #16]
1a0049f6:	429a      	cmp	r2, r3
1a0049f8:	d302      	bcc.n	1a004a00 <Chip_SSP_RWFrames_Blocking+0x76>
1a0049fa:	686a      	ldr	r2, [r5, #4]
1a0049fc:	4293      	cmp	r3, r2
1a0049fe:	d90b      	bls.n	1a004a18 <Chip_SSP_RWFrames_Blocking+0x8e>
	return (pSSP->SR & Stat) ? SET : RESET;
1a004a00:	68e2      	ldr	r2, [r4, #12]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
1a004a02:	f012 0f02 	tst.w	r2, #2
1a004a06:	d0ec      	beq.n	1a0049e2 <Chip_SSP_RWFrames_Blocking+0x58>
1a004a08:	686a      	ldr	r2, [r5, #4]
1a004a0a:	429a      	cmp	r2, r3
1a004a0c:	d2e9      	bcs.n	1a0049e2 <Chip_SSP_RWFrames_Blocking+0x58>
				SSP_Write1BFifo(pSSP, xf_setup);
1a004a0e:	4629      	mov	r1, r5
1a004a10:	4620      	mov	r0, r4
1a004a12:	f7ff ff4e 	bl	1a0048b2 <SSP_Write1BFifo>
1a004a16:	e7e4      	b.n	1a0049e2 <Chip_SSP_RWFrames_Blocking+0x58>
		}
	}
	if (xf_setup->tx_data) {
1a004a18:	682b      	ldr	r3, [r5, #0]
1a004a1a:	b10b      	cbz	r3, 1a004a20 <Chip_SSP_RWFrames_Blocking+0x96>
		return xf_setup->tx_cnt;
1a004a1c:	6868      	ldr	r0, [r5, #4]
1a004a1e:	e004      	b.n	1a004a2a <Chip_SSP_RWFrames_Blocking+0xa0>
	}
	else if (xf_setup->rx_data) {
1a004a20:	68ab      	ldr	r3, [r5, #8]
1a004a22:	b12b      	cbz	r3, 1a004a30 <Chip_SSP_RWFrames_Blocking+0xa6>
		return xf_setup->rx_cnt;
1a004a24:	68e8      	ldr	r0, [r5, #12]
1a004a26:	e000      	b.n	1a004a2a <Chip_SSP_RWFrames_Blocking+0xa0>
				return ERROR;
1a004a28:	2000      	movs	r0, #0
	}

	return 0;
}
1a004a2a:	bd38      	pop	{r3, r4, r5, pc}
				return ERROR;
1a004a2c:	2000      	movs	r0, #0
1a004a2e:	e7fc      	b.n	1a004a2a <Chip_SSP_RWFrames_Blocking+0xa0>
	return 0;
1a004a30:	2000      	movs	r0, #0
1a004a32:	e7fa      	b.n	1a004a2a <Chip_SSP_RWFrames_Blocking+0xa0>

1a004a34 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a004a34:	b570      	push	{r4, r5, r6, lr}
1a004a36:	4606      	mov	r6, r0
1a004a38:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a004a3a:	f7ff ff91 	bl	1a004960 <Chip_SSP_GetPeriphClockIndex>
1a004a3e:	f7ff fda1 	bl	1a004584 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a004a42:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a004a44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a004a48:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a004a4a:	e000      	b.n	1a004a4e <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a004a4c:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a004a4e:	42ab      	cmp	r3, r5
1a004a50:	d90b      	bls.n	1a004a6a <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a004a52:	1c4c      	adds	r4, r1, #1
1a004a54:	fb02 f304 	mul.w	r3, r2, r4
1a004a58:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a004a5c:	429d      	cmp	r5, r3
1a004a5e:	d2f6      	bcs.n	1a004a4e <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a004a60:	2cff      	cmp	r4, #255	; 0xff
1a004a62:	d9f3      	bls.n	1a004a4c <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a004a64:	3202      	adds	r2, #2
				cr0_div = 0;
1a004a66:	2100      	movs	r1, #0
1a004a68:	e7f1      	b.n	1a004a4e <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a004a6a:	4630      	mov	r0, r6
1a004a6c:	f7ff ff84 	bl	1a004978 <Chip_SSP_SetClockRate>
}
1a004a70:	bd70      	pop	{r4, r5, r6, pc}
1a004a72:	Address 0x000000001a004a72 is out of bounds.


1a004a74 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a004a74:	b510      	push	{r4, lr}
1a004a76:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a004a78:	f7ff ff68 	bl	1a00494c <Chip_SSP_GetClockIndex>
1a004a7c:	f7ff fd68 	bl	1a004550 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a004a80:	4620      	mov	r0, r4
1a004a82:	f7ff ff6d 	bl	1a004960 <Chip_SSP_GetPeriphClockIndex>
1a004a86:	f7ff fd63 	bl	1a004550 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a004a8a:	6863      	ldr	r3, [r4, #4]
1a004a8c:	f023 0304 	bic.w	r3, r3, #4
1a004a90:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a004a92:	6823      	ldr	r3, [r4, #0]
1a004a94:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a004a98:	f043 0307 	orr.w	r3, r3, #7
1a004a9c:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a004a9e:	4902      	ldr	r1, [pc, #8]	; (1a004aa8 <Chip_SSP_Init+0x34>)
1a004aa0:	4620      	mov	r0, r4
1a004aa2:	f7ff ffc7 	bl	1a004a34 <Chip_SSP_SetBitRate>
}
1a004aa6:	bd10      	pop	{r4, pc}
1a004aa8:	000186a0 	.word	0x000186a0

1a004aac <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a004aac:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a004aae:	4a0b      	ldr	r2, [pc, #44]	; (1a004adc <SystemInit+0x30>)
1a004ab0:	4b0b      	ldr	r3, [pc, #44]	; (1a004ae0 <SystemInit+0x34>)
1a004ab2:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a004ab4:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a004ab8:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a004aba:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a004abe:	2b20      	cmp	r3, #32
1a004ac0:	d004      	beq.n	1a004acc <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a004ac2:	f7ff f941 	bl	1a003d48 <Board_SystemInit>
   Board_Init();
1a004ac6:	f7ff f8c9 	bl	1a003c5c <Board_Init>
}
1a004aca:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a004acc:	4a04      	ldr	r2, [pc, #16]	; (1a004ae0 <SystemInit+0x34>)
1a004ace:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a004ad2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a004ad6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a004ada:	e7f2      	b.n	1a004ac2 <SystemInit+0x16>
1a004adc:	1a000000 	.word	0x1a000000
1a004ae0:	e000ed00 	.word	0xe000ed00

1a004ae4 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a004ae4:	4b04      	ldr	r3, [pc, #16]	; (1a004af8 <cyclesCounterInit+0x14>)
1a004ae6:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a004ae8:	4a04      	ldr	r2, [pc, #16]	; (1a004afc <cyclesCounterInit+0x18>)
1a004aea:	6813      	ldr	r3, [r2, #0]
1a004aec:	f043 0301 	orr.w	r3, r3, #1
1a004af0:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a004af2:	2001      	movs	r0, #1
1a004af4:	4770      	bx	lr
1a004af6:	bf00      	nop
1a004af8:	10000048 	.word	0x10000048
1a004afc:	e0001000 	.word	0xe0001000

1a004b00 <uartRxReady>:
//-------------------------------------------------------------

// Return TRUE if have unread data in RX FIFO
bool_t uartRxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
1a004b00:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a004b04:	0083      	lsls	r3, r0, #2
1a004b06:	4a03      	ldr	r2, [pc, #12]	; (1a004b14 <uartRxReady+0x14>)
1a004b08:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a004b0a:	6958      	ldr	r0, [r3, #20]
}
1a004b0c:	f000 0001 	and.w	r0, r0, #1
1a004b10:	4770      	bx	lr
1a004b12:	bf00      	nop
1a004b14:	1a006c20 	.word	0x1a006c20

1a004b18 <uartRxRead>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
}
// Read from RX FIFO
uint8_t uartRxRead( uartMap_t uart )
{
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a004b18:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a004b1c:	0083      	lsls	r3, r0, #2
1a004b1e:	4a02      	ldr	r2, [pc, #8]	; (1a004b28 <uartRxRead+0x10>)
1a004b20:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a004b22:	6818      	ldr	r0, [r3, #0]
}
1a004b24:	b2c0      	uxtb	r0, r0
1a004b26:	4770      	bx	lr
1a004b28:	1a006c20 	.word	0x1a006c20

1a004b2c <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a004b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a004b30:	4680      	mov	r8, r0
1a004b32:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a004b34:	4c19      	ldr	r4, [pc, #100]	; (1a004b9c <uartInit+0x70>)
1a004b36:	0045      	lsls	r5, r0, #1
1a004b38:	182a      	adds	r2, r5, r0
1a004b3a:	0093      	lsls	r3, r2, #2
1a004b3c:	18e6      	adds	r6, r4, r3
1a004b3e:	58e7      	ldr	r7, [r4, r3]
1a004b40:	4638      	mov	r0, r7
1a004b42:	f7ff f95b 	bl	1a003dfc <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a004b46:	4649      	mov	r1, r9
1a004b48:	4638      	mov	r0, r7
1a004b4a:	f7ff f981 	bl	1a003e50 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a004b4e:	2307      	movs	r3, #7
1a004b50:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a004b52:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a004b54:	2301      	movs	r3, #1
1a004b56:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a004b58:	7930      	ldrb	r0, [r6, #4]
1a004b5a:	7973      	ldrb	r3, [r6, #5]
1a004b5c:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a004b5e:	f042 0218 	orr.w	r2, r2, #24
1a004b62:	490f      	ldr	r1, [pc, #60]	; (1a004ba0 <uartInit+0x74>)
1a004b64:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a004b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a004b6c:	79f0      	ldrb	r0, [r6, #7]
1a004b6e:	7a33      	ldrb	r3, [r6, #8]
1a004b70:	7a72      	ldrb	r2, [r6, #9]
1a004b72:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a004b76:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a004b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a004b7e:	f1b8 0f01 	cmp.w	r8, #1
1a004b82:	d001      	beq.n	1a004b88 <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a004b84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a004b88:	4a06      	ldr	r2, [pc, #24]	; (1a004ba4 <uartInit+0x78>)
1a004b8a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a004b8c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a004b90:	64d3      	str	r3, [r2, #76]	; 0x4c
1a004b92:	221a      	movs	r2, #26
1a004b94:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a004b98:	e7f4      	b.n	1a004b84 <uartInit+0x58>
1a004b9a:	bf00      	nop
1a004b9c:	1a006c20 	.word	0x1a006c20
1a004ba0:	40086000 	.word	0x40086000
1a004ba4:	40081000 	.word	0x40081000

1a004ba8 <uartReadByte>:

// Read 1 byte from RX FIFO, check first if exist aviable data
bool_t uartReadByte( uartMap_t uart, uint8_t* receivedByte )
{
1a004ba8:	b538      	push	{r3, r4, r5, lr}
1a004baa:	4605      	mov	r5, r0
1a004bac:	460c      	mov	r4, r1
   bool_t retVal = TRUE;
   if ( uartRxReady(uart) ) {
1a004bae:	f7ff ffa7 	bl	1a004b00 <uartRxReady>
1a004bb2:	4603      	mov	r3, r0
1a004bb4:	b908      	cbnz	r0, 1a004bba <uartReadByte+0x12>
      *receivedByte = uartRxRead(uart);
   } else {
      retVal = FALSE;
   }
   return retVal;
}
1a004bb6:	4618      	mov	r0, r3
1a004bb8:	bd38      	pop	{r3, r4, r5, pc}
      *receivedByte = uartRxRead(uart);
1a004bba:	4628      	mov	r0, r5
1a004bbc:	f7ff ffac 	bl	1a004b18 <uartRxRead>
1a004bc0:	7020      	strb	r0, [r4, #0]
   bool_t retVal = TRUE;
1a004bc2:	2301      	movs	r3, #1
1a004bc4:	e7f7      	b.n	1a004bb6 <uartReadByte+0xe>
1a004bc6:	Address 0x000000001a004bc6 is out of bounds.


1a004bc8 <spiInit>:
bool_t spiInit( spiMap_t spi )
{

   bool_t retVal = TRUE;

   if( spi == SPI0 ) {
1a004bc8:	b108      	cbz	r0, 1a004bce <spiInit+0x6>
      // Initialize SSP Peripheral
      Chip_SSP_Init( LPC_SSP1 );
      Chip_SSP_Enable( LPC_SSP1 );

   } else {
      retVal = FALSE;
1a004bca:	2000      	movs	r0, #0
   }

   return retVal;
}
1a004bcc:	4770      	bx	lr
{
1a004bce:	b510      	push	{r4, lr}
1a004bd0:	4b0e      	ldr	r3, [pc, #56]	; (1a004c0c <spiInit+0x44>)
1a004bd2:	2200      	movs	r2, #0
1a004bd4:	f8c3 2790 	str.w	r2, [r3, #1936]	; 0x790
1a004bd8:	21c5      	movs	r1, #197	; 0xc5
1a004bda:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
1a004bde:	2105      	movs	r1, #5
1a004be0:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
1a004be4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	pGPIO->DIR[port] |= 1UL << pin;
1a004be8:	4909      	ldr	r1, [pc, #36]	; (1a004c10 <spiInit+0x48>)
1a004bea:	f242 020c 	movw	r2, #8204	; 0x200c
1a004bee:	588b      	ldr	r3, [r1, r2]
1a004bf0:	f043 0301 	orr.w	r3, r3, #1
1a004bf4:	508b      	str	r3, [r1, r2]
      Chip_SSP_Init( LPC_SSP1 );
1a004bf6:	4c07      	ldr	r4, [pc, #28]	; (1a004c14 <spiInit+0x4c>)
1a004bf8:	4620      	mov	r0, r4
1a004bfa:	f7ff ff3b 	bl	1a004a74 <Chip_SSP_Init>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a004bfe:	6863      	ldr	r3, [r4, #4]
1a004c00:	f043 0302 	orr.w	r3, r3, #2
1a004c04:	6063      	str	r3, [r4, #4]
   bool_t retVal = TRUE;
1a004c06:	2001      	movs	r0, #1
}
1a004c08:	bd10      	pop	{r4, pc}
1a004c0a:	bf00      	nop
1a004c0c:	40086000 	.word	0x40086000
1a004c10:	400f4000 	.word	0x400f4000
1a004c14:	400c5000 	.word	0x400c5000

1a004c18 <tickRead>:

// Read Tick Counter
tick_t tickRead( void )
{
   return tickCounter;
}
1a004c18:	4b01      	ldr	r3, [pc, #4]	; (1a004c20 <tickRead+0x8>)
1a004c1a:	e9d3 0100 	ldrd	r0, r1, [r3]
1a004c1e:	4770      	bx	lr
1a004c20:	10000a08 	.word	0x10000a08

1a004c24 <tickCallbackSet>:

// Tick interrupt callback
bool_t tickCallbackSet( callBackFuncPtr_t tickCallback, void* tickCallbackParams )
{
   bool_t retVal = TRUE;
   if( tickCallback != NULL ) {
1a004c24:	b130      	cbz	r0, 1a004c34 <tickCallbackSet+0x10>
      tickHookFunction = tickCallback;
1a004c26:	4a05      	ldr	r2, [pc, #20]	; (1a004c3c <tickCallbackSet+0x18>)
1a004c28:	6010      	str	r0, [r2, #0]
   bool_t retVal = TRUE;
1a004c2a:	2001      	movs	r0, #1
   } else {
      retVal = FALSE;
   }
   if( tickCallbackParams != NULL ) {
1a004c2c:	b121      	cbz	r1, 1a004c38 <tickCallbackSet+0x14>
      callBackFuncParams = tickCallbackParams;
1a004c2e:	4b04      	ldr	r3, [pc, #16]	; (1a004c40 <tickCallbackSet+0x1c>)
1a004c30:	6019      	str	r1, [r3, #0]
1a004c32:	4770      	bx	lr
      retVal = FALSE;
1a004c34:	2000      	movs	r0, #0
1a004c36:	e7f9      	b.n	1a004c2c <tickCallbackSet+0x8>
   } else {
      retVal &= FALSE;
1a004c38:	2000      	movs	r0, #0
   }
   return retVal;
}
1a004c3a:	4770      	bx	lr
1a004c3c:	10000a10 	.word	0x10000a10
1a004c40:	10000a04 	.word	0x10000a04

1a004c44 <tickPowerSet>:

// Enable or disable the peripheral energy and clock
void tickPowerSet( bool_t power )
{
   if( power ) {
1a004c44:	b918      	cbnz	r0, 1a004c4e <tickPowerSet+0xa>
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                      SysTick_CTRL_TICKINT_Msk   |
                      SysTick_CTRL_ENABLE_Msk;
   } else {
      // Disable SysTick IRQ and SysTick Timer
      SysTick->CTRL = 0x0000000;
1a004c46:	4b04      	ldr	r3, [pc, #16]	; (1a004c58 <tickPowerSet+0x14>)
1a004c48:	2200      	movs	r2, #0
1a004c4a:	601a      	str	r2, [r3, #0]
   }
}
1a004c4c:	4770      	bx	lr
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a004c4e:	4b02      	ldr	r3, [pc, #8]	; (1a004c58 <tickPowerSet+0x14>)
1a004c50:	2207      	movs	r2, #7
1a004c52:	601a      	str	r2, [r3, #0]
1a004c54:	4770      	bx	lr
1a004c56:	bf00      	nop
1a004c58:	e000e010 	.word	0xe000e010

1a004c5c <tickInit>:
{
1a004c5c:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a004c5e:	ea50 0301 	orrs.w	r3, r0, r1
1a004c62:	d02a      	beq.n	1a004cba <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a004c64:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a004c68:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a004c6c:	2b00      	cmp	r3, #0
1a004c6e:	bf08      	it	eq
1a004c70:	2a32      	cmpeq	r2, #50	; 0x32
1a004c72:	d227      	bcs.n	1a004cc4 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a004c74:	4b14      	ldr	r3, [pc, #80]	; (1a004cc8 <tickInit+0x6c>)
1a004c76:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a004c7a:	4b14      	ldr	r3, [pc, #80]	; (1a004ccc <tickInit+0x70>)
1a004c7c:	681b      	ldr	r3, [r3, #0]
1a004c7e:	fba3 4500 	umull	r4, r5, r3, r0
1a004c82:	fb03 5501 	mla	r5, r3, r1, r5
1a004c86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a004c8a:	2300      	movs	r3, #0
1a004c8c:	4620      	mov	r0, r4
1a004c8e:	4629      	mov	r1, r5
1a004c90:	f000 fa80 	bl	1a005194 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a004c94:	3801      	subs	r0, #1
1a004c96:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a004c9a:	d209      	bcs.n	1a004cb0 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a004c9c:	4b0c      	ldr	r3, [pc, #48]	; (1a004cd0 <tickInit+0x74>)
1a004c9e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a004ca0:	4a0c      	ldr	r2, [pc, #48]	; (1a004cd4 <tickInit+0x78>)
1a004ca2:	21e0      	movs	r1, #224	; 0xe0
1a004ca4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a004ca8:	2200      	movs	r2, #0
1a004caa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a004cac:	2207      	movs	r2, #7
1a004cae:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a004cb0:	2001      	movs	r0, #1
1a004cb2:	f7ff ffc7 	bl	1a004c44 <tickPowerSet>
      bool_t ret_val = 1;
1a004cb6:	2001      	movs	r0, #1
}
1a004cb8:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a004cba:	2000      	movs	r0, #0
1a004cbc:	f7ff ffc2 	bl	1a004c44 <tickPowerSet>
         ret_val = 0;
1a004cc0:	2000      	movs	r0, #0
1a004cc2:	e7f9      	b.n	1a004cb8 <tickInit+0x5c>
            ret_val = 0;
1a004cc4:	2000      	movs	r0, #0
1a004cc6:	e7f7      	b.n	1a004cb8 <tickInit+0x5c>
1a004cc8:	10000ac8 	.word	0x10000ac8
1a004ccc:	10000ac0 	.word	0x10000ac0
1a004cd0:	e000e010 	.word	0xe000e010
1a004cd4:	e000ed00 	.word	0xe000ed00

1a004cd8 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a004cd8:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a004cdc:	4908      	ldr	r1, [pc, #32]	; (1a004d00 <SysTick_Handler+0x28>)
1a004cde:	e9d1 2300 	ldrd	r2, r3, [r1]
1a004ce2:	f112 0b01 	adds.w	fp, r2, #1
1a004ce6:	f143 0c00 	adc.w	ip, r3, #0
1a004cea:	e9c1 bc00 	strd	fp, ip, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a004cee:	4b05      	ldr	r3, [pc, #20]	; (1a004d04 <SysTick_Handler+0x2c>)
1a004cf0:	681b      	ldr	r3, [r3, #0]
1a004cf2:	b113      	cbz	r3, 1a004cfa <SysTick_Handler+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a004cf4:	4a04      	ldr	r2, [pc, #16]	; (1a004d08 <SysTick_Handler+0x30>)
1a004cf6:	6810      	ldr	r0, [r2, #0]
1a004cf8:	4798      	blx	r3
   }
}
1a004cfa:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a004cfe:	bf00      	nop
1a004d00:	10000a08 	.word	0x10000a08
1a004d04:	10000a10 	.word	0x10000a10
1a004d08:	10000a04 	.word	0x10000a04

1a004d0c <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a004d0c:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a004d0e:	4d0b      	ldr	r5, [pc, #44]	; (1a004d3c <gpioObtainPinInit+0x30>)
1a004d10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a004d14:	182c      	adds	r4, r5, r0
1a004d16:	5628      	ldrsb	r0, [r5, r0]
1a004d18:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a004d1a:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a004d1e:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a004d20:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a004d24:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a004d26:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a004d2a:	9b02      	ldr	r3, [sp, #8]
1a004d2c:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a004d2e:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a004d32:	9b03      	ldr	r3, [sp, #12]
1a004d34:	701a      	strb	r2, [r3, #0]
}
1a004d36:	bc30      	pop	{r4, r5}
1a004d38:	4770      	bx	lr
1a004d3a:	bf00      	nop
1a004d3c:	1a006c68 	.word	0x1a006c68

1a004d40 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a004d40:	b570      	push	{r4, r5, r6, lr}
1a004d42:	b084      	sub	sp, #16
1a004d44:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a004d46:	2300      	movs	r3, #0
1a004d48:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a004d4c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a004d50:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a004d54:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a004d58:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a004d5c:	f10d 030b 	add.w	r3, sp, #11
1a004d60:	9301      	str	r3, [sp, #4]
1a004d62:	ab03      	add	r3, sp, #12
1a004d64:	9300      	str	r3, [sp, #0]
1a004d66:	f10d 030d 	add.w	r3, sp, #13
1a004d6a:	f10d 020e 	add.w	r2, sp, #14
1a004d6e:	f10d 010f 	add.w	r1, sp, #15
1a004d72:	f7ff ffcb 	bl	1a004d0c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a004d76:	2c05      	cmp	r4, #5
1a004d78:	f200 80a5 	bhi.w	1a004ec6 <gpioInit+0x186>
1a004d7c:	e8df f004 	tbb	[pc, r4]
1a004d80:	45278109 	.word	0x45278109
1a004d84:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a004d86:	4851      	ldr	r0, [pc, #324]	; (1a004ecc <gpioInit+0x18c>)
1a004d88:	f7ff fcda 	bl	1a004740 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a004d8c:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a004d8e:	b004      	add	sp, #16
1a004d90:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a004d92:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a004d96:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a004d9a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a004d9e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a004da2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a004da6:	494a      	ldr	r1, [pc, #296]	; (1a004ed0 <gpioInit+0x190>)
1a004da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004dac:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004db0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004db4:	2001      	movs	r0, #1
1a004db6:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] &= ~bitValue;
1a004dba:	4c44      	ldr	r4, [pc, #272]	; (1a004ecc <gpioInit+0x18c>)
1a004dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a004dc0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a004dc4:	ea22 0201 	bic.w	r2, r2, r1
1a004dc8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a004dcc:	e7df      	b.n	1a004d8e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a004dce:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a004dd2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a004dd6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a004dda:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a004dde:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a004de2:	493b      	ldr	r1, [pc, #236]	; (1a004ed0 <gpioInit+0x190>)
1a004de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004de8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004dec:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004df0:	2001      	movs	r0, #1
1a004df2:	fa00 f102 	lsl.w	r1, r0, r2
1a004df6:	4c35      	ldr	r4, [pc, #212]	; (1a004ecc <gpioInit+0x18c>)
1a004df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a004dfc:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a004e00:	ea22 0201 	bic.w	r2, r2, r1
1a004e04:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a004e08:	e7c1      	b.n	1a004d8e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a004e0a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a004e0e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a004e12:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a004e16:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a004e1a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a004e1e:	492c      	ldr	r1, [pc, #176]	; (1a004ed0 <gpioInit+0x190>)
1a004e20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004e24:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004e28:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004e2c:	2001      	movs	r0, #1
1a004e2e:	fa00 f102 	lsl.w	r1, r0, r2
1a004e32:	4c26      	ldr	r4, [pc, #152]	; (1a004ecc <gpioInit+0x18c>)
1a004e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a004e38:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a004e3c:	ea22 0201 	bic.w	r2, r2, r1
1a004e40:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a004e44:	e7a3      	b.n	1a004d8e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a004e46:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a004e4a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a004e4e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a004e52:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a004e56:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a004e5a:	491d      	ldr	r1, [pc, #116]	; (1a004ed0 <gpioInit+0x190>)
1a004e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004e60:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004e64:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004e68:	2001      	movs	r0, #1
1a004e6a:	fa00 f102 	lsl.w	r1, r0, r2
1a004e6e:	4c17      	ldr	r4, [pc, #92]	; (1a004ecc <gpioInit+0x18c>)
1a004e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a004e74:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a004e78:	ea22 0201 	bic.w	r2, r2, r1
1a004e7c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a004e80:	e785      	b.n	1a004d8e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a004e82:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a004e86:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a004e8a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a004e8e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a004e92:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a004e96:	490e      	ldr	r1, [pc, #56]	; (1a004ed0 <gpioInit+0x190>)
1a004e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a004e9c:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a004ea0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004ea4:	2001      	movs	r0, #1
1a004ea6:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a004eaa:	4b08      	ldr	r3, [pc, #32]	; (1a004ecc <gpioInit+0x18c>)
1a004eac:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a004eb0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a004eb4:	4331      	orrs	r1, r6
1a004eb6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a004eba:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a004ebc:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a004ec0:	2100      	movs	r1, #0
1a004ec2:	5499      	strb	r1, [r3, r2]
1a004ec4:	e763      	b.n	1a004d8e <gpioInit+0x4e>
      ret_val = 0;
1a004ec6:	2000      	movs	r0, #0
1a004ec8:	e761      	b.n	1a004d8e <gpioInit+0x4e>
1a004eca:	bf00      	nop
1a004ecc:	400f4000 	.word	0x400f4000
1a004ed0:	40086000 	.word	0x40086000

1a004ed4 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a004ed4:	b510      	push	{r4, lr}
1a004ed6:	b084      	sub	sp, #16
1a004ed8:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a004eda:	2300      	movs	r3, #0
1a004edc:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a004ee0:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a004ee4:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a004ee8:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a004eec:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a004ef0:	f10d 030b 	add.w	r3, sp, #11
1a004ef4:	9301      	str	r3, [sp, #4]
1a004ef6:	ab03      	add	r3, sp, #12
1a004ef8:	9300      	str	r3, [sp, #0]
1a004efa:	f10d 030d 	add.w	r3, sp, #13
1a004efe:	f10d 020e 	add.w	r2, sp, #14
1a004f02:	f10d 010f 	add.w	r1, sp, #15
1a004f06:	f7ff ff01 	bl	1a004d0c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a004f0a:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004f0e:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a004f12:	3400      	adds	r4, #0
1a004f14:	bf18      	it	ne
1a004f16:	2401      	movne	r4, #1
1a004f18:	015b      	lsls	r3, r3, #5
1a004f1a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a004f1e:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a004f22:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a004f24:	2001      	movs	r0, #1
1a004f26:	b004      	add	sp, #16
1a004f28:	bd10      	pop	{r4, pc}

1a004f2a <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a004f2a:	b500      	push	{lr}
1a004f2c:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a004f2e:	2300      	movs	r3, #0
1a004f30:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a004f34:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a004f38:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a004f3c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a004f40:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a004f44:	f10d 030b 	add.w	r3, sp, #11
1a004f48:	9301      	str	r3, [sp, #4]
1a004f4a:	ab03      	add	r3, sp, #12
1a004f4c:	9300      	str	r3, [sp, #0]
1a004f4e:	f10d 030d 	add.w	r3, sp, #13
1a004f52:	f10d 020e 	add.w	r2, sp, #14
1a004f56:	f10d 010f 	add.w	r1, sp, #15
1a004f5a:	f7ff fed7 	bl	1a004d0c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a004f5e:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a004f62:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a004f66:	015b      	lsls	r3, r3, #5
1a004f68:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a004f6c:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a004f70:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a004f72:	3000      	adds	r0, #0
1a004f74:	bf18      	it	ne
1a004f76:	2001      	movne	r0, #1
1a004f78:	b005      	add	sp, #20
1a004f7a:	f85d fb04 	ldr.w	pc, [sp], #4

1a004f7e <gpioToggle>:
{
1a004f7e:	b510      	push	{r4, lr}
1a004f80:	4604      	mov	r4, r0
   return gpioWrite( pin, !gpioRead(pin) );
1a004f82:	f7ff ffd2 	bl	1a004f2a <gpioRead>
1a004f86:	fab0 f180 	clz	r1, r0
1a004f8a:	0949      	lsrs	r1, r1, #5
1a004f8c:	4620      	mov	r0, r4
1a004f8e:	f7ff ffa1 	bl	1a004ed4 <gpioWrite>
}
1a004f92:	bd10      	pop	{r4, pc}

1a004f94 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a004f94:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a004f96:	4b04      	ldr	r3, [pc, #16]	; (1a004fa8 <USB0_IRQHandler+0x14>)
1a004f98:	681b      	ldr	r3, [r3, #0]
1a004f9a:	681b      	ldr	r3, [r3, #0]
1a004f9c:	68db      	ldr	r3, [r3, #12]
1a004f9e:	4a03      	ldr	r2, [pc, #12]	; (1a004fac <USB0_IRQHandler+0x18>)
1a004fa0:	6810      	ldr	r0, [r2, #0]
1a004fa2:	4798      	blx	r3
}
1a004fa4:	bd08      	pop	{r3, pc}
1a004fa6:	bf00      	nop
1a004fa8:	10000ad0 	.word	0x10000ad0
1a004fac:	10000a14 	.word	0x10000a14

1a004fb0 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a004fb0:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a004fb2:	f7ff fb0d 	bl	1a0045d0 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a004fb6:	4b3a      	ldr	r3, [pc, #232]	; (1a0050a0 <boardInit+0xf0>)
1a004fb8:	6818      	ldr	r0, [r3, #0]
1a004fba:	f7ff fd93 	bl	1a004ae4 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a004fbe:	2001      	movs	r0, #1
1a004fc0:	2100      	movs	r1, #0
1a004fc2:	f7ff fe4b 	bl	1a004c5c <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a004fc6:	2105      	movs	r1, #5
1a004fc8:	2000      	movs	r0, #0
1a004fca:	f7ff feb9 	bl	1a004d40 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a004fce:	2100      	movs	r1, #0
1a004fd0:	2024      	movs	r0, #36	; 0x24
1a004fd2:	f7ff feb5 	bl	1a004d40 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a004fd6:	2100      	movs	r1, #0
1a004fd8:	2025      	movs	r0, #37	; 0x25
1a004fda:	f7ff feb1 	bl	1a004d40 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a004fde:	2100      	movs	r1, #0
1a004fe0:	2026      	movs	r0, #38	; 0x26
1a004fe2:	f7ff fead 	bl	1a004d40 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a004fe6:	2100      	movs	r1, #0
1a004fe8:	2027      	movs	r0, #39	; 0x27
1a004fea:	f7ff fea9 	bl	1a004d40 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a004fee:	2101      	movs	r1, #1
1a004ff0:	2028      	movs	r0, #40	; 0x28
1a004ff2:	f7ff fea5 	bl	1a004d40 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a004ff6:	2101      	movs	r1, #1
1a004ff8:	2029      	movs	r0, #41	; 0x29
1a004ffa:	f7ff fea1 	bl	1a004d40 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a004ffe:	2101      	movs	r1, #1
1a005000:	202a      	movs	r0, #42	; 0x2a
1a005002:	f7ff fe9d 	bl	1a004d40 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a005006:	2101      	movs	r1, #1
1a005008:	202b      	movs	r0, #43	; 0x2b
1a00500a:	f7ff fe99 	bl	1a004d40 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a00500e:	2101      	movs	r1, #1
1a005010:	202c      	movs	r0, #44	; 0x2c
1a005012:	f7ff fe95 	bl	1a004d40 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a005016:	2101      	movs	r1, #1
1a005018:	202d      	movs	r0, #45	; 0x2d
1a00501a:	f7ff fe91 	bl	1a004d40 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a00501e:	2100      	movs	r1, #0
1a005020:	202e      	movs	r0, #46	; 0x2e
1a005022:	f7ff fe8d 	bl	1a004d40 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a005026:	2100      	movs	r1, #0
1a005028:	202f      	movs	r0, #47	; 0x2f
1a00502a:	f7ff fe89 	bl	1a004d40 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a00502e:	2100      	movs	r1, #0
1a005030:	2030      	movs	r0, #48	; 0x30
1a005032:	f7ff fe85 	bl	1a004d40 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a005036:	2100      	movs	r1, #0
1a005038:	2031      	movs	r0, #49	; 0x31
1a00503a:	f7ff fe81 	bl	1a004d40 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a00503e:	2100      	movs	r1, #0
1a005040:	2032      	movs	r0, #50	; 0x32
1a005042:	f7ff fe7d 	bl	1a004d40 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a005046:	2100      	movs	r1, #0
1a005048:	2033      	movs	r0, #51	; 0x33
1a00504a:	f7ff fe79 	bl	1a004d40 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a00504e:	2100      	movs	r1, #0
1a005050:	2034      	movs	r0, #52	; 0x34
1a005052:	f7ff fe75 	bl	1a004d40 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a005056:	2100      	movs	r1, #0
1a005058:	2035      	movs	r0, #53	; 0x35
1a00505a:	f7ff fe71 	bl	1a004d40 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a00505e:	2101      	movs	r1, #1
1a005060:	2036      	movs	r0, #54	; 0x36
1a005062:	f7ff fe6d 	bl	1a004d40 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a005066:	2101      	movs	r1, #1
1a005068:	2037      	movs	r0, #55	; 0x37
1a00506a:	f7ff fe69 	bl	1a004d40 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a00506e:	2101      	movs	r1, #1
1a005070:	2038      	movs	r0, #56	; 0x38
1a005072:	f7ff fe65 	bl	1a004d40 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a005076:	2101      	movs	r1, #1
1a005078:	2039      	movs	r0, #57	; 0x39
1a00507a:	f7ff fe61 	bl	1a004d40 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a00507e:	2101      	movs	r1, #1
1a005080:	203a      	movs	r0, #58	; 0x3a
1a005082:	f7ff fe5d 	bl	1a004d40 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a005086:	2101      	movs	r1, #1
1a005088:	203b      	movs	r0, #59	; 0x3b
1a00508a:	f7ff fe59 	bl	1a004d40 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a00508e:	2101      	movs	r1, #1
1a005090:	203c      	movs	r0, #60	; 0x3c
1a005092:	f7ff fe55 	bl	1a004d40 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a005096:	2101      	movs	r1, #1
1a005098:	203d      	movs	r0, #61	; 0x3d
1a00509a:	f7ff fe51 	bl	1a004d40 <gpioInit>

}
1a00509e:	bd08      	pop	{r3, pc}
1a0050a0:	10000ac0 	.word	0x10000ac0

1a0050a4 <delayInit>:
*/

/* ---- Non Blocking Delay ---- */

void delayInit( delay_t * delay, tick_t duration )
{
1a0050a4:	b510      	push	{r4, lr}
1a0050a6:	4604      	mov	r4, r0
1a0050a8:	4610      	mov	r0, r2
1a0050aa:	4619      	mov	r1, r3
   delay->duration = duration/tickRateMS;
1a0050ac:	4b04      	ldr	r3, [pc, #16]	; (1a0050c0 <delayInit+0x1c>)
1a0050ae:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0050b2:	f000 f86f 	bl	1a005194 <__aeabi_uldivmod>
1a0050b6:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a0050ba:	2300      	movs	r3, #0
1a0050bc:	7423      	strb	r3, [r4, #16]
}
1a0050be:	bd10      	pop	{r4, pc}
1a0050c0:	10000ac8 	.word	0x10000ac8

1a0050c4 <delayRead>:

bool_t delayRead( delay_t * delay )
{
1a0050c4:	b570      	push	{r4, r5, r6, lr}
1a0050c6:	4604      	mov	r4, r0

   bool_t timeArrived = 0;

   if( !delay->running ) {
1a0050c8:	7c05      	ldrb	r5, [r0, #16]
1a0050ca:	b195      	cbz	r5, 1a0050f2 <delayRead+0x2e>
      delay->startTime = tickRead();
      delay->running = 1;
   } else {
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
1a0050cc:	f7ff fda4 	bl	1a004c18 <tickRead>
1a0050d0:	e9d4 2300 	ldrd	r2, r3, [r4]
1a0050d4:	1a82      	subs	r2, r0, r2
1a0050d6:	eb61 0303 	sbc.w	r3, r1, r3
1a0050da:	4615      	mov	r5, r2
1a0050dc:	461e      	mov	r6, r3
1a0050de:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a0050e2:	429e      	cmp	r6, r3
1a0050e4:	bf08      	it	eq
1a0050e6:	4295      	cmpeq	r5, r2
1a0050e8:	d30b      	bcc.n	1a005102 <delayRead+0x3e>
         timeArrived = 1;
         delay->running = 0;
1a0050ea:	2300      	movs	r3, #0
1a0050ec:	7423      	strb	r3, [r4, #16]
         timeArrived = 1;
1a0050ee:	2501      	movs	r5, #1
1a0050f0:	e005      	b.n	1a0050fe <delayRead+0x3a>
      delay->startTime = tickRead();
1a0050f2:	f7ff fd91 	bl	1a004c18 <tickRead>
1a0050f6:	e9c4 0100 	strd	r0, r1, [r4]
      delay->running = 1;
1a0050fa:	2301      	movs	r3, #1
1a0050fc:	7423      	strb	r3, [r4, #16]
      }
   }

   return timeArrived;
}
1a0050fe:	4628      	mov	r0, r5
1a005100:	bd70      	pop	{r4, r5, r6, pc}
   bool_t timeArrived = 0;
1a005102:	2500      	movs	r5, #0
1a005104:	e7fb      	b.n	1a0050fe <delayRead+0x3a>
1a005106:	Address 0x000000001a005106 is out of bounds.


1a005108 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a005108:	2301      	movs	r3, #1
1a00510a:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a00510e:	4b01      	ldr	r3, [pc, #4]	; (1a005114 <clearInterrupt+0xc>)
1a005110:	6258      	str	r0, [r3, #36]	; 0x24
}
1a005112:	4770      	bx	lr
1a005114:	40087000 	.word	0x40087000

1a005118 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a005118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a00511a:	4b12      	ldr	r3, [pc, #72]	; (1a005164 <serveInterrupt+0x4c>)
1a00511c:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a00511e:	4b12      	ldr	r3, [pc, #72]	; (1a005168 <serveInterrupt+0x50>)
1a005120:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a005122:	2301      	movs	r3, #1
1a005124:	4083      	lsls	r3, r0
1a005126:	420b      	tst	r3, r1
1a005128:	d111      	bne.n	1a00514e <serveInterrupt+0x36>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a00512a:	4910      	ldr	r1, [pc, #64]	; (1a00516c <serveInterrupt+0x54>)
1a00512c:	688e      	ldr	r6, [r1, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a00512e:	4d10      	ldr	r5, [pc, #64]	; (1a005170 <serveInterrupt+0x58>)
1a005130:	0051      	lsls	r1, r2, #1
1a005132:	188f      	adds	r7, r1, r2
1a005134:	00fc      	lsls	r4, r7, #3
1a005136:	4627      	mov	r7, r4
1a005138:	442c      	add	r4, r5
1a00513a:	60a6      	str	r6, [r4, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a00513c:	6864      	ldr	r4, [r4, #4]
1a00513e:	1b36      	subs	r6, r6, r4
1a005140:	443d      	add	r5, r7
1a005142:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a005144:	4a08      	ldr	r2, [pc, #32]	; (1a005168 <serveInterrupt+0x50>)
1a005146:	6213      	str	r3, [r2, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a005148:	f7ff ffde 	bl	1a005108 <clearInterrupt>
}
1a00514c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00514e:	4907      	ldr	r1, [pc, #28]	; (1a00516c <serveInterrupt+0x54>)
1a005150:	688c      	ldr	r4, [r1, #8]
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a005152:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a005156:	00d1      	lsls	r1, r2, #3
1a005158:	4a05      	ldr	r2, [pc, #20]	; (1a005170 <serveInterrupt+0x58>)
1a00515a:	440a      	add	r2, r1
1a00515c:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a00515e:	4a02      	ldr	r2, [pc, #8]	; (1a005168 <serveInterrupt+0x50>)
1a005160:	61d3      	str	r3, [r2, #28]
1a005162:	e7f1      	b.n	1a005148 <serveInterrupt+0x30>
1a005164:	1a006da0 	.word	0x1a006da0
1a005168:	40087000 	.word	0x40087000
1a00516c:	40084000 	.word	0x40084000
1a005170:	1000004c 	.word	0x1000004c

1a005174 <GPIO0_IRQHandler>:
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a005174:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a005176:	2000      	movs	r0, #0
1a005178:	f7ff ffce 	bl	1a005118 <serveInterrupt>
}
1a00517c:	bd08      	pop	{r3, pc}

1a00517e <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a00517e:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a005180:	2001      	movs	r0, #1
1a005182:	f7ff ffc9 	bl	1a005118 <serveInterrupt>
}
1a005186:	bd08      	pop	{r3, pc}

1a005188 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a005188:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a00518a:	2002      	movs	r0, #2
1a00518c:	f7ff ffc4 	bl	1a005118 <serveInterrupt>
}
1a005190:	bd08      	pop	{r3, pc}
1a005192:	Address 0x000000001a005192 is out of bounds.


1a005194 <__aeabi_uldivmod>:
1a005194:	b953      	cbnz	r3, 1a0051ac <__aeabi_uldivmod+0x18>
1a005196:	b94a      	cbnz	r2, 1a0051ac <__aeabi_uldivmod+0x18>
1a005198:	2900      	cmp	r1, #0
1a00519a:	bf08      	it	eq
1a00519c:	2800      	cmpeq	r0, #0
1a00519e:	bf1c      	itt	ne
1a0051a0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a0051a4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a0051a8:	f000 b972 	b.w	1a005490 <__aeabi_idiv0>
1a0051ac:	f1ad 0c08 	sub.w	ip, sp, #8
1a0051b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a0051b4:	f000 f806 	bl	1a0051c4 <__udivmoddi4>
1a0051b8:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0051bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0051c0:	b004      	add	sp, #16
1a0051c2:	4770      	bx	lr

1a0051c4 <__udivmoddi4>:
1a0051c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0051c8:	9e08      	ldr	r6, [sp, #32]
1a0051ca:	4604      	mov	r4, r0
1a0051cc:	4688      	mov	r8, r1
1a0051ce:	2b00      	cmp	r3, #0
1a0051d0:	d14b      	bne.n	1a00526a <__udivmoddi4+0xa6>
1a0051d2:	428a      	cmp	r2, r1
1a0051d4:	4615      	mov	r5, r2
1a0051d6:	d967      	bls.n	1a0052a8 <__udivmoddi4+0xe4>
1a0051d8:	fab2 f282 	clz	r2, r2
1a0051dc:	b14a      	cbz	r2, 1a0051f2 <__udivmoddi4+0x2e>
1a0051de:	f1c2 0720 	rsb	r7, r2, #32
1a0051e2:	fa01 f302 	lsl.w	r3, r1, r2
1a0051e6:	fa20 f707 	lsr.w	r7, r0, r7
1a0051ea:	4095      	lsls	r5, r2
1a0051ec:	ea47 0803 	orr.w	r8, r7, r3
1a0051f0:	4094      	lsls	r4, r2
1a0051f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0051f6:	0c23      	lsrs	r3, r4, #16
1a0051f8:	fbb8 f7fe 	udiv	r7, r8, lr
1a0051fc:	fa1f fc85 	uxth.w	ip, r5
1a005200:	fb0e 8817 	mls	r8, lr, r7, r8
1a005204:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a005208:	fb07 f10c 	mul.w	r1, r7, ip
1a00520c:	4299      	cmp	r1, r3
1a00520e:	d909      	bls.n	1a005224 <__udivmoddi4+0x60>
1a005210:	18eb      	adds	r3, r5, r3
1a005212:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a005216:	f080 811b 	bcs.w	1a005450 <__udivmoddi4+0x28c>
1a00521a:	4299      	cmp	r1, r3
1a00521c:	f240 8118 	bls.w	1a005450 <__udivmoddi4+0x28c>
1a005220:	3f02      	subs	r7, #2
1a005222:	442b      	add	r3, r5
1a005224:	1a5b      	subs	r3, r3, r1
1a005226:	b2a4      	uxth	r4, r4
1a005228:	fbb3 f0fe 	udiv	r0, r3, lr
1a00522c:	fb0e 3310 	mls	r3, lr, r0, r3
1a005230:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a005234:	fb00 fc0c 	mul.w	ip, r0, ip
1a005238:	45a4      	cmp	ip, r4
1a00523a:	d909      	bls.n	1a005250 <__udivmoddi4+0x8c>
1a00523c:	192c      	adds	r4, r5, r4
1a00523e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a005242:	f080 8107 	bcs.w	1a005454 <__udivmoddi4+0x290>
1a005246:	45a4      	cmp	ip, r4
1a005248:	f240 8104 	bls.w	1a005454 <__udivmoddi4+0x290>
1a00524c:	3802      	subs	r0, #2
1a00524e:	442c      	add	r4, r5
1a005250:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a005254:	eba4 040c 	sub.w	r4, r4, ip
1a005258:	2700      	movs	r7, #0
1a00525a:	b11e      	cbz	r6, 1a005264 <__udivmoddi4+0xa0>
1a00525c:	40d4      	lsrs	r4, r2
1a00525e:	2300      	movs	r3, #0
1a005260:	e9c6 4300 	strd	r4, r3, [r6]
1a005264:	4639      	mov	r1, r7
1a005266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00526a:	428b      	cmp	r3, r1
1a00526c:	d909      	bls.n	1a005282 <__udivmoddi4+0xbe>
1a00526e:	2e00      	cmp	r6, #0
1a005270:	f000 80eb 	beq.w	1a00544a <__udivmoddi4+0x286>
1a005274:	2700      	movs	r7, #0
1a005276:	e9c6 0100 	strd	r0, r1, [r6]
1a00527a:	4638      	mov	r0, r7
1a00527c:	4639      	mov	r1, r7
1a00527e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a005282:	fab3 f783 	clz	r7, r3
1a005286:	2f00      	cmp	r7, #0
1a005288:	d147      	bne.n	1a00531a <__udivmoddi4+0x156>
1a00528a:	428b      	cmp	r3, r1
1a00528c:	d302      	bcc.n	1a005294 <__udivmoddi4+0xd0>
1a00528e:	4282      	cmp	r2, r0
1a005290:	f200 80fa 	bhi.w	1a005488 <__udivmoddi4+0x2c4>
1a005294:	1a84      	subs	r4, r0, r2
1a005296:	eb61 0303 	sbc.w	r3, r1, r3
1a00529a:	2001      	movs	r0, #1
1a00529c:	4698      	mov	r8, r3
1a00529e:	2e00      	cmp	r6, #0
1a0052a0:	d0e0      	beq.n	1a005264 <__udivmoddi4+0xa0>
1a0052a2:	e9c6 4800 	strd	r4, r8, [r6]
1a0052a6:	e7dd      	b.n	1a005264 <__udivmoddi4+0xa0>
1a0052a8:	b902      	cbnz	r2, 1a0052ac <__udivmoddi4+0xe8>
1a0052aa:	deff      	udf	#255	; 0xff
1a0052ac:	fab2 f282 	clz	r2, r2
1a0052b0:	2a00      	cmp	r2, #0
1a0052b2:	f040 808f 	bne.w	1a0053d4 <__udivmoddi4+0x210>
1a0052b6:	1b49      	subs	r1, r1, r5
1a0052b8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0052bc:	fa1f f885 	uxth.w	r8, r5
1a0052c0:	2701      	movs	r7, #1
1a0052c2:	fbb1 fcfe 	udiv	ip, r1, lr
1a0052c6:	0c23      	lsrs	r3, r4, #16
1a0052c8:	fb0e 111c 	mls	r1, lr, ip, r1
1a0052cc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0052d0:	fb08 f10c 	mul.w	r1, r8, ip
1a0052d4:	4299      	cmp	r1, r3
1a0052d6:	d907      	bls.n	1a0052e8 <__udivmoddi4+0x124>
1a0052d8:	18eb      	adds	r3, r5, r3
1a0052da:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a0052de:	d202      	bcs.n	1a0052e6 <__udivmoddi4+0x122>
1a0052e0:	4299      	cmp	r1, r3
1a0052e2:	f200 80cd 	bhi.w	1a005480 <__udivmoddi4+0x2bc>
1a0052e6:	4684      	mov	ip, r0
1a0052e8:	1a59      	subs	r1, r3, r1
1a0052ea:	b2a3      	uxth	r3, r4
1a0052ec:	fbb1 f0fe 	udiv	r0, r1, lr
1a0052f0:	fb0e 1410 	mls	r4, lr, r0, r1
1a0052f4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a0052f8:	fb08 f800 	mul.w	r8, r8, r0
1a0052fc:	45a0      	cmp	r8, r4
1a0052fe:	d907      	bls.n	1a005310 <__udivmoddi4+0x14c>
1a005300:	192c      	adds	r4, r5, r4
1a005302:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a005306:	d202      	bcs.n	1a00530e <__udivmoddi4+0x14a>
1a005308:	45a0      	cmp	r8, r4
1a00530a:	f200 80b6 	bhi.w	1a00547a <__udivmoddi4+0x2b6>
1a00530e:	4618      	mov	r0, r3
1a005310:	eba4 0408 	sub.w	r4, r4, r8
1a005314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a005318:	e79f      	b.n	1a00525a <__udivmoddi4+0x96>
1a00531a:	f1c7 0c20 	rsb	ip, r7, #32
1a00531e:	40bb      	lsls	r3, r7
1a005320:	fa22 fe0c 	lsr.w	lr, r2, ip
1a005324:	ea4e 0e03 	orr.w	lr, lr, r3
1a005328:	fa01 f407 	lsl.w	r4, r1, r7
1a00532c:	fa20 f50c 	lsr.w	r5, r0, ip
1a005330:	fa21 f30c 	lsr.w	r3, r1, ip
1a005334:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a005338:	4325      	orrs	r5, r4
1a00533a:	fbb3 f9f8 	udiv	r9, r3, r8
1a00533e:	0c2c      	lsrs	r4, r5, #16
1a005340:	fb08 3319 	mls	r3, r8, r9, r3
1a005344:	fa1f fa8e 	uxth.w	sl, lr
1a005348:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a00534c:	fb09 f40a 	mul.w	r4, r9, sl
1a005350:	429c      	cmp	r4, r3
1a005352:	fa02 f207 	lsl.w	r2, r2, r7
1a005356:	fa00 f107 	lsl.w	r1, r0, r7
1a00535a:	d90b      	bls.n	1a005374 <__udivmoddi4+0x1b0>
1a00535c:	eb1e 0303 	adds.w	r3, lr, r3
1a005360:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a005364:	f080 8087 	bcs.w	1a005476 <__udivmoddi4+0x2b2>
1a005368:	429c      	cmp	r4, r3
1a00536a:	f240 8084 	bls.w	1a005476 <__udivmoddi4+0x2b2>
1a00536e:	f1a9 0902 	sub.w	r9, r9, #2
1a005372:	4473      	add	r3, lr
1a005374:	1b1b      	subs	r3, r3, r4
1a005376:	b2ad      	uxth	r5, r5
1a005378:	fbb3 f0f8 	udiv	r0, r3, r8
1a00537c:	fb08 3310 	mls	r3, r8, r0, r3
1a005380:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a005384:	fb00 fa0a 	mul.w	sl, r0, sl
1a005388:	45a2      	cmp	sl, r4
1a00538a:	d908      	bls.n	1a00539e <__udivmoddi4+0x1da>
1a00538c:	eb1e 0404 	adds.w	r4, lr, r4
1a005390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a005394:	d26b      	bcs.n	1a00546e <__udivmoddi4+0x2aa>
1a005396:	45a2      	cmp	sl, r4
1a005398:	d969      	bls.n	1a00546e <__udivmoddi4+0x2aa>
1a00539a:	3802      	subs	r0, #2
1a00539c:	4474      	add	r4, lr
1a00539e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a0053a2:	fba0 8902 	umull	r8, r9, r0, r2
1a0053a6:	eba4 040a 	sub.w	r4, r4, sl
1a0053aa:	454c      	cmp	r4, r9
1a0053ac:	46c2      	mov	sl, r8
1a0053ae:	464b      	mov	r3, r9
1a0053b0:	d354      	bcc.n	1a00545c <__udivmoddi4+0x298>
1a0053b2:	d051      	beq.n	1a005458 <__udivmoddi4+0x294>
1a0053b4:	2e00      	cmp	r6, #0
1a0053b6:	d069      	beq.n	1a00548c <__udivmoddi4+0x2c8>
1a0053b8:	ebb1 050a 	subs.w	r5, r1, sl
1a0053bc:	eb64 0403 	sbc.w	r4, r4, r3
1a0053c0:	fa04 fc0c 	lsl.w	ip, r4, ip
1a0053c4:	40fd      	lsrs	r5, r7
1a0053c6:	40fc      	lsrs	r4, r7
1a0053c8:	ea4c 0505 	orr.w	r5, ip, r5
1a0053cc:	e9c6 5400 	strd	r5, r4, [r6]
1a0053d0:	2700      	movs	r7, #0
1a0053d2:	e747      	b.n	1a005264 <__udivmoddi4+0xa0>
1a0053d4:	f1c2 0320 	rsb	r3, r2, #32
1a0053d8:	fa20 f703 	lsr.w	r7, r0, r3
1a0053dc:	4095      	lsls	r5, r2
1a0053de:	fa01 f002 	lsl.w	r0, r1, r2
1a0053e2:	fa21 f303 	lsr.w	r3, r1, r3
1a0053e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0053ea:	4338      	orrs	r0, r7
1a0053ec:	0c01      	lsrs	r1, r0, #16
1a0053ee:	fbb3 f7fe 	udiv	r7, r3, lr
1a0053f2:	fa1f f885 	uxth.w	r8, r5
1a0053f6:	fb0e 3317 	mls	r3, lr, r7, r3
1a0053fa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0053fe:	fb07 f308 	mul.w	r3, r7, r8
1a005402:	428b      	cmp	r3, r1
1a005404:	fa04 f402 	lsl.w	r4, r4, r2
1a005408:	d907      	bls.n	1a00541a <__udivmoddi4+0x256>
1a00540a:	1869      	adds	r1, r5, r1
1a00540c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a005410:	d22f      	bcs.n	1a005472 <__udivmoddi4+0x2ae>
1a005412:	428b      	cmp	r3, r1
1a005414:	d92d      	bls.n	1a005472 <__udivmoddi4+0x2ae>
1a005416:	3f02      	subs	r7, #2
1a005418:	4429      	add	r1, r5
1a00541a:	1acb      	subs	r3, r1, r3
1a00541c:	b281      	uxth	r1, r0
1a00541e:	fbb3 f0fe 	udiv	r0, r3, lr
1a005422:	fb0e 3310 	mls	r3, lr, r0, r3
1a005426:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00542a:	fb00 f308 	mul.w	r3, r0, r8
1a00542e:	428b      	cmp	r3, r1
1a005430:	d907      	bls.n	1a005442 <__udivmoddi4+0x27e>
1a005432:	1869      	adds	r1, r5, r1
1a005434:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a005438:	d217      	bcs.n	1a00546a <__udivmoddi4+0x2a6>
1a00543a:	428b      	cmp	r3, r1
1a00543c:	d915      	bls.n	1a00546a <__udivmoddi4+0x2a6>
1a00543e:	3802      	subs	r0, #2
1a005440:	4429      	add	r1, r5
1a005442:	1ac9      	subs	r1, r1, r3
1a005444:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a005448:	e73b      	b.n	1a0052c2 <__udivmoddi4+0xfe>
1a00544a:	4637      	mov	r7, r6
1a00544c:	4630      	mov	r0, r6
1a00544e:	e709      	b.n	1a005264 <__udivmoddi4+0xa0>
1a005450:	4607      	mov	r7, r0
1a005452:	e6e7      	b.n	1a005224 <__udivmoddi4+0x60>
1a005454:	4618      	mov	r0, r3
1a005456:	e6fb      	b.n	1a005250 <__udivmoddi4+0x8c>
1a005458:	4541      	cmp	r1, r8
1a00545a:	d2ab      	bcs.n	1a0053b4 <__udivmoddi4+0x1f0>
1a00545c:	ebb8 0a02 	subs.w	sl, r8, r2
1a005460:	eb69 020e 	sbc.w	r2, r9, lr
1a005464:	3801      	subs	r0, #1
1a005466:	4613      	mov	r3, r2
1a005468:	e7a4      	b.n	1a0053b4 <__udivmoddi4+0x1f0>
1a00546a:	4660      	mov	r0, ip
1a00546c:	e7e9      	b.n	1a005442 <__udivmoddi4+0x27e>
1a00546e:	4618      	mov	r0, r3
1a005470:	e795      	b.n	1a00539e <__udivmoddi4+0x1da>
1a005472:	4667      	mov	r7, ip
1a005474:	e7d1      	b.n	1a00541a <__udivmoddi4+0x256>
1a005476:	4681      	mov	r9, r0
1a005478:	e77c      	b.n	1a005374 <__udivmoddi4+0x1b0>
1a00547a:	3802      	subs	r0, #2
1a00547c:	442c      	add	r4, r5
1a00547e:	e747      	b.n	1a005310 <__udivmoddi4+0x14c>
1a005480:	f1ac 0c02 	sub.w	ip, ip, #2
1a005484:	442b      	add	r3, r5
1a005486:	e72f      	b.n	1a0052e8 <__udivmoddi4+0x124>
1a005488:	4638      	mov	r0, r7
1a00548a:	e708      	b.n	1a00529e <__udivmoddi4+0xda>
1a00548c:	4637      	mov	r7, r6
1a00548e:	e6e9      	b.n	1a005264 <__udivmoddi4+0xa0>

1a005490 <__aeabi_idiv0>:
1a005490:	4770      	bx	lr
1a005492:	bf00      	nop

1a005494 <__libc_init_array>:
1a005494:	b570      	push	{r4, r5, r6, lr}
1a005496:	4e0d      	ldr	r6, [pc, #52]	; (1a0054cc <__libc_init_array+0x38>)
1a005498:	4c0d      	ldr	r4, [pc, #52]	; (1a0054d0 <__libc_init_array+0x3c>)
1a00549a:	1ba4      	subs	r4, r4, r6
1a00549c:	10a4      	asrs	r4, r4, #2
1a00549e:	2500      	movs	r5, #0
1a0054a0:	42a5      	cmp	r5, r4
1a0054a2:	d109      	bne.n	1a0054b8 <__libc_init_array+0x24>
1a0054a4:	4e0b      	ldr	r6, [pc, #44]	; (1a0054d4 <__libc_init_array+0x40>)
1a0054a6:	4c0c      	ldr	r4, [pc, #48]	; (1a0054d8 <__libc_init_array+0x44>)
1a0054a8:	f7fb fa5f 	bl	1a00096a <_init>
1a0054ac:	1ba4      	subs	r4, r4, r6
1a0054ae:	10a4      	asrs	r4, r4, #2
1a0054b0:	2500      	movs	r5, #0
1a0054b2:	42a5      	cmp	r5, r4
1a0054b4:	d105      	bne.n	1a0054c2 <__libc_init_array+0x2e>
1a0054b6:	bd70      	pop	{r4, r5, r6, pc}
1a0054b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a0054bc:	4798      	blx	r3
1a0054be:	3501      	adds	r5, #1
1a0054c0:	e7ee      	b.n	1a0054a0 <__libc_init_array+0xc>
1a0054c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a0054c6:	4798      	blx	r3
1a0054c8:	3501      	adds	r5, #1
1a0054ca:	e7f2      	b.n	1a0054b2 <__libc_init_array+0x1e>
1a0054cc:	1a006e3c 	.word	0x1a006e3c
1a0054d0:	1a006e3c 	.word	0x1a006e3c
1a0054d4:	1a006e3c 	.word	0x1a006e3c
1a0054d8:	1a006e40 	.word	0x1a006e40

1a0054dc <memset>:
1a0054dc:	4402      	add	r2, r0
1a0054de:	4603      	mov	r3, r0
1a0054e0:	4293      	cmp	r3, r2
1a0054e2:	d100      	bne.n	1a0054e6 <memset+0xa>
1a0054e4:	4770      	bx	lr
1a0054e6:	f803 1b01 	strb.w	r1, [r3], #1
1a0054ea:	e7f9      	b.n	1a0054e0 <memset+0x4>

1a0054ec <iprintf>:
1a0054ec:	b40f      	push	{r0, r1, r2, r3}
1a0054ee:	4b0a      	ldr	r3, [pc, #40]	; (1a005518 <iprintf+0x2c>)
1a0054f0:	b513      	push	{r0, r1, r4, lr}
1a0054f2:	681c      	ldr	r4, [r3, #0]
1a0054f4:	b124      	cbz	r4, 1a005500 <iprintf+0x14>
1a0054f6:	69a3      	ldr	r3, [r4, #24]
1a0054f8:	b913      	cbnz	r3, 1a005500 <iprintf+0x14>
1a0054fa:	4620      	mov	r0, r4
1a0054fc:	f000 fa42 	bl	1a005984 <__sinit>
1a005500:	ab05      	add	r3, sp, #20
1a005502:	9a04      	ldr	r2, [sp, #16]
1a005504:	68a1      	ldr	r1, [r4, #8]
1a005506:	9301      	str	r3, [sp, #4]
1a005508:	4620      	mov	r0, r4
1a00550a:	f000 fbfb 	bl	1a005d04 <_vfiprintf_r>
1a00550e:	b002      	add	sp, #8
1a005510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a005514:	b004      	add	sp, #16
1a005516:	4770      	bx	lr
1a005518:	10000094 	.word	0x10000094

1a00551c <_puts_r>:
1a00551c:	b570      	push	{r4, r5, r6, lr}
1a00551e:	460e      	mov	r6, r1
1a005520:	4605      	mov	r5, r0
1a005522:	b118      	cbz	r0, 1a00552c <_puts_r+0x10>
1a005524:	6983      	ldr	r3, [r0, #24]
1a005526:	b90b      	cbnz	r3, 1a00552c <_puts_r+0x10>
1a005528:	f000 fa2c 	bl	1a005984 <__sinit>
1a00552c:	69ab      	ldr	r3, [r5, #24]
1a00552e:	68ac      	ldr	r4, [r5, #8]
1a005530:	b913      	cbnz	r3, 1a005538 <_puts_r+0x1c>
1a005532:	4628      	mov	r0, r5
1a005534:	f000 fa26 	bl	1a005984 <__sinit>
1a005538:	4b23      	ldr	r3, [pc, #140]	; (1a0055c8 <_puts_r+0xac>)
1a00553a:	429c      	cmp	r4, r3
1a00553c:	d117      	bne.n	1a00556e <_puts_r+0x52>
1a00553e:	686c      	ldr	r4, [r5, #4]
1a005540:	89a3      	ldrh	r3, [r4, #12]
1a005542:	071b      	lsls	r3, r3, #28
1a005544:	d51d      	bpl.n	1a005582 <_puts_r+0x66>
1a005546:	6923      	ldr	r3, [r4, #16]
1a005548:	b1db      	cbz	r3, 1a005582 <_puts_r+0x66>
1a00554a:	3e01      	subs	r6, #1
1a00554c:	68a3      	ldr	r3, [r4, #8]
1a00554e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a005552:	3b01      	subs	r3, #1
1a005554:	60a3      	str	r3, [r4, #8]
1a005556:	b9e9      	cbnz	r1, 1a005594 <_puts_r+0x78>
1a005558:	2b00      	cmp	r3, #0
1a00555a:	da2e      	bge.n	1a0055ba <_puts_r+0x9e>
1a00555c:	4622      	mov	r2, r4
1a00555e:	210a      	movs	r1, #10
1a005560:	4628      	mov	r0, r5
1a005562:	f000 f85f 	bl	1a005624 <__swbuf_r>
1a005566:	3001      	adds	r0, #1
1a005568:	d011      	beq.n	1a00558e <_puts_r+0x72>
1a00556a:	200a      	movs	r0, #10
1a00556c:	e011      	b.n	1a005592 <_puts_r+0x76>
1a00556e:	4b17      	ldr	r3, [pc, #92]	; (1a0055cc <_puts_r+0xb0>)
1a005570:	429c      	cmp	r4, r3
1a005572:	d101      	bne.n	1a005578 <_puts_r+0x5c>
1a005574:	68ac      	ldr	r4, [r5, #8]
1a005576:	e7e3      	b.n	1a005540 <_puts_r+0x24>
1a005578:	4b15      	ldr	r3, [pc, #84]	; (1a0055d0 <_puts_r+0xb4>)
1a00557a:	429c      	cmp	r4, r3
1a00557c:	bf08      	it	eq
1a00557e:	68ec      	ldreq	r4, [r5, #12]
1a005580:	e7de      	b.n	1a005540 <_puts_r+0x24>
1a005582:	4621      	mov	r1, r4
1a005584:	4628      	mov	r0, r5
1a005586:	f000 f89f 	bl	1a0056c8 <__swsetup_r>
1a00558a:	2800      	cmp	r0, #0
1a00558c:	d0dd      	beq.n	1a00554a <_puts_r+0x2e>
1a00558e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005592:	bd70      	pop	{r4, r5, r6, pc}
1a005594:	2b00      	cmp	r3, #0
1a005596:	da04      	bge.n	1a0055a2 <_puts_r+0x86>
1a005598:	69a2      	ldr	r2, [r4, #24]
1a00559a:	429a      	cmp	r2, r3
1a00559c:	dc06      	bgt.n	1a0055ac <_puts_r+0x90>
1a00559e:	290a      	cmp	r1, #10
1a0055a0:	d004      	beq.n	1a0055ac <_puts_r+0x90>
1a0055a2:	6823      	ldr	r3, [r4, #0]
1a0055a4:	1c5a      	adds	r2, r3, #1
1a0055a6:	6022      	str	r2, [r4, #0]
1a0055a8:	7019      	strb	r1, [r3, #0]
1a0055aa:	e7cf      	b.n	1a00554c <_puts_r+0x30>
1a0055ac:	4622      	mov	r2, r4
1a0055ae:	4628      	mov	r0, r5
1a0055b0:	f000 f838 	bl	1a005624 <__swbuf_r>
1a0055b4:	3001      	adds	r0, #1
1a0055b6:	d1c9      	bne.n	1a00554c <_puts_r+0x30>
1a0055b8:	e7e9      	b.n	1a00558e <_puts_r+0x72>
1a0055ba:	6823      	ldr	r3, [r4, #0]
1a0055bc:	200a      	movs	r0, #10
1a0055be:	1c5a      	adds	r2, r3, #1
1a0055c0:	6022      	str	r2, [r4, #0]
1a0055c2:	7018      	strb	r0, [r3, #0]
1a0055c4:	e7e5      	b.n	1a005592 <_puts_r+0x76>
1a0055c6:	bf00      	nop
1a0055c8:	1a006dc4 	.word	0x1a006dc4
1a0055cc:	1a006de4 	.word	0x1a006de4
1a0055d0:	1a006da4 	.word	0x1a006da4

1a0055d4 <puts>:
1a0055d4:	4b02      	ldr	r3, [pc, #8]	; (1a0055e0 <puts+0xc>)
1a0055d6:	4601      	mov	r1, r0
1a0055d8:	6818      	ldr	r0, [r3, #0]
1a0055da:	f7ff bf9f 	b.w	1a00551c <_puts_r>
1a0055de:	bf00      	nop
1a0055e0:	10000094 	.word	0x10000094

1a0055e4 <strcat>:
1a0055e4:	b510      	push	{r4, lr}
1a0055e6:	4603      	mov	r3, r0
1a0055e8:	781a      	ldrb	r2, [r3, #0]
1a0055ea:	1c5c      	adds	r4, r3, #1
1a0055ec:	b93a      	cbnz	r2, 1a0055fe <strcat+0x1a>
1a0055ee:	3b01      	subs	r3, #1
1a0055f0:	f811 2b01 	ldrb.w	r2, [r1], #1
1a0055f4:	f803 2f01 	strb.w	r2, [r3, #1]!
1a0055f8:	2a00      	cmp	r2, #0
1a0055fa:	d1f9      	bne.n	1a0055f0 <strcat+0xc>
1a0055fc:	bd10      	pop	{r4, pc}
1a0055fe:	4623      	mov	r3, r4
1a005600:	e7f2      	b.n	1a0055e8 <strcat+0x4>

1a005602 <strcpy>:
1a005602:	4603      	mov	r3, r0
1a005604:	f811 2b01 	ldrb.w	r2, [r1], #1
1a005608:	f803 2b01 	strb.w	r2, [r3], #1
1a00560c:	2a00      	cmp	r2, #0
1a00560e:	d1f9      	bne.n	1a005604 <strcpy+0x2>
1a005610:	4770      	bx	lr

1a005612 <strlen>:
1a005612:	4603      	mov	r3, r0
1a005614:	f813 2b01 	ldrb.w	r2, [r3], #1
1a005618:	2a00      	cmp	r2, #0
1a00561a:	d1fb      	bne.n	1a005614 <strlen+0x2>
1a00561c:	1a18      	subs	r0, r3, r0
1a00561e:	3801      	subs	r0, #1
1a005620:	4770      	bx	lr
1a005622:	Address 0x000000001a005622 is out of bounds.


1a005624 <__swbuf_r>:
1a005624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a005626:	460e      	mov	r6, r1
1a005628:	4614      	mov	r4, r2
1a00562a:	4605      	mov	r5, r0
1a00562c:	b118      	cbz	r0, 1a005636 <__swbuf_r+0x12>
1a00562e:	6983      	ldr	r3, [r0, #24]
1a005630:	b90b      	cbnz	r3, 1a005636 <__swbuf_r+0x12>
1a005632:	f000 f9a7 	bl	1a005984 <__sinit>
1a005636:	4b21      	ldr	r3, [pc, #132]	; (1a0056bc <__swbuf_r+0x98>)
1a005638:	429c      	cmp	r4, r3
1a00563a:	d12a      	bne.n	1a005692 <__swbuf_r+0x6e>
1a00563c:	686c      	ldr	r4, [r5, #4]
1a00563e:	69a3      	ldr	r3, [r4, #24]
1a005640:	60a3      	str	r3, [r4, #8]
1a005642:	89a3      	ldrh	r3, [r4, #12]
1a005644:	071a      	lsls	r2, r3, #28
1a005646:	d52e      	bpl.n	1a0056a6 <__swbuf_r+0x82>
1a005648:	6923      	ldr	r3, [r4, #16]
1a00564a:	b363      	cbz	r3, 1a0056a6 <__swbuf_r+0x82>
1a00564c:	6923      	ldr	r3, [r4, #16]
1a00564e:	6820      	ldr	r0, [r4, #0]
1a005650:	1ac0      	subs	r0, r0, r3
1a005652:	6963      	ldr	r3, [r4, #20]
1a005654:	b2f6      	uxtb	r6, r6
1a005656:	4283      	cmp	r3, r0
1a005658:	4637      	mov	r7, r6
1a00565a:	dc04      	bgt.n	1a005666 <__swbuf_r+0x42>
1a00565c:	4621      	mov	r1, r4
1a00565e:	4628      	mov	r0, r5
1a005660:	f000 f926 	bl	1a0058b0 <_fflush_r>
1a005664:	bb28      	cbnz	r0, 1a0056b2 <__swbuf_r+0x8e>
1a005666:	68a3      	ldr	r3, [r4, #8]
1a005668:	3b01      	subs	r3, #1
1a00566a:	60a3      	str	r3, [r4, #8]
1a00566c:	6823      	ldr	r3, [r4, #0]
1a00566e:	1c5a      	adds	r2, r3, #1
1a005670:	6022      	str	r2, [r4, #0]
1a005672:	701e      	strb	r6, [r3, #0]
1a005674:	6963      	ldr	r3, [r4, #20]
1a005676:	3001      	adds	r0, #1
1a005678:	4283      	cmp	r3, r0
1a00567a:	d004      	beq.n	1a005686 <__swbuf_r+0x62>
1a00567c:	89a3      	ldrh	r3, [r4, #12]
1a00567e:	07db      	lsls	r3, r3, #31
1a005680:	d519      	bpl.n	1a0056b6 <__swbuf_r+0x92>
1a005682:	2e0a      	cmp	r6, #10
1a005684:	d117      	bne.n	1a0056b6 <__swbuf_r+0x92>
1a005686:	4621      	mov	r1, r4
1a005688:	4628      	mov	r0, r5
1a00568a:	f000 f911 	bl	1a0058b0 <_fflush_r>
1a00568e:	b190      	cbz	r0, 1a0056b6 <__swbuf_r+0x92>
1a005690:	e00f      	b.n	1a0056b2 <__swbuf_r+0x8e>
1a005692:	4b0b      	ldr	r3, [pc, #44]	; (1a0056c0 <__swbuf_r+0x9c>)
1a005694:	429c      	cmp	r4, r3
1a005696:	d101      	bne.n	1a00569c <__swbuf_r+0x78>
1a005698:	68ac      	ldr	r4, [r5, #8]
1a00569a:	e7d0      	b.n	1a00563e <__swbuf_r+0x1a>
1a00569c:	4b09      	ldr	r3, [pc, #36]	; (1a0056c4 <__swbuf_r+0xa0>)
1a00569e:	429c      	cmp	r4, r3
1a0056a0:	bf08      	it	eq
1a0056a2:	68ec      	ldreq	r4, [r5, #12]
1a0056a4:	e7cb      	b.n	1a00563e <__swbuf_r+0x1a>
1a0056a6:	4621      	mov	r1, r4
1a0056a8:	4628      	mov	r0, r5
1a0056aa:	f000 f80d 	bl	1a0056c8 <__swsetup_r>
1a0056ae:	2800      	cmp	r0, #0
1a0056b0:	d0cc      	beq.n	1a00564c <__swbuf_r+0x28>
1a0056b2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a0056b6:	4638      	mov	r0, r7
1a0056b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0056ba:	bf00      	nop
1a0056bc:	1a006dc4 	.word	0x1a006dc4
1a0056c0:	1a006de4 	.word	0x1a006de4
1a0056c4:	1a006da4 	.word	0x1a006da4

1a0056c8 <__swsetup_r>:
1a0056c8:	4b32      	ldr	r3, [pc, #200]	; (1a005794 <__swsetup_r+0xcc>)
1a0056ca:	b570      	push	{r4, r5, r6, lr}
1a0056cc:	681d      	ldr	r5, [r3, #0]
1a0056ce:	4606      	mov	r6, r0
1a0056d0:	460c      	mov	r4, r1
1a0056d2:	b125      	cbz	r5, 1a0056de <__swsetup_r+0x16>
1a0056d4:	69ab      	ldr	r3, [r5, #24]
1a0056d6:	b913      	cbnz	r3, 1a0056de <__swsetup_r+0x16>
1a0056d8:	4628      	mov	r0, r5
1a0056da:	f000 f953 	bl	1a005984 <__sinit>
1a0056de:	4b2e      	ldr	r3, [pc, #184]	; (1a005798 <__swsetup_r+0xd0>)
1a0056e0:	429c      	cmp	r4, r3
1a0056e2:	d10f      	bne.n	1a005704 <__swsetup_r+0x3c>
1a0056e4:	686c      	ldr	r4, [r5, #4]
1a0056e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0056ea:	b29a      	uxth	r2, r3
1a0056ec:	0715      	lsls	r5, r2, #28
1a0056ee:	d42c      	bmi.n	1a00574a <__swsetup_r+0x82>
1a0056f0:	06d0      	lsls	r0, r2, #27
1a0056f2:	d411      	bmi.n	1a005718 <__swsetup_r+0x50>
1a0056f4:	2209      	movs	r2, #9
1a0056f6:	6032      	str	r2, [r6, #0]
1a0056f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0056fc:	81a3      	strh	r3, [r4, #12]
1a0056fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005702:	e03e      	b.n	1a005782 <__swsetup_r+0xba>
1a005704:	4b25      	ldr	r3, [pc, #148]	; (1a00579c <__swsetup_r+0xd4>)
1a005706:	429c      	cmp	r4, r3
1a005708:	d101      	bne.n	1a00570e <__swsetup_r+0x46>
1a00570a:	68ac      	ldr	r4, [r5, #8]
1a00570c:	e7eb      	b.n	1a0056e6 <__swsetup_r+0x1e>
1a00570e:	4b24      	ldr	r3, [pc, #144]	; (1a0057a0 <__swsetup_r+0xd8>)
1a005710:	429c      	cmp	r4, r3
1a005712:	bf08      	it	eq
1a005714:	68ec      	ldreq	r4, [r5, #12]
1a005716:	e7e6      	b.n	1a0056e6 <__swsetup_r+0x1e>
1a005718:	0751      	lsls	r1, r2, #29
1a00571a:	d512      	bpl.n	1a005742 <__swsetup_r+0x7a>
1a00571c:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a00571e:	b141      	cbz	r1, 1a005732 <__swsetup_r+0x6a>
1a005720:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a005724:	4299      	cmp	r1, r3
1a005726:	d002      	beq.n	1a00572e <__swsetup_r+0x66>
1a005728:	4630      	mov	r0, r6
1a00572a:	f000 fa19 	bl	1a005b60 <_free_r>
1a00572e:	2300      	movs	r3, #0
1a005730:	6363      	str	r3, [r4, #52]	; 0x34
1a005732:	89a3      	ldrh	r3, [r4, #12]
1a005734:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a005738:	81a3      	strh	r3, [r4, #12]
1a00573a:	2300      	movs	r3, #0
1a00573c:	6063      	str	r3, [r4, #4]
1a00573e:	6923      	ldr	r3, [r4, #16]
1a005740:	6023      	str	r3, [r4, #0]
1a005742:	89a3      	ldrh	r3, [r4, #12]
1a005744:	f043 0308 	orr.w	r3, r3, #8
1a005748:	81a3      	strh	r3, [r4, #12]
1a00574a:	6923      	ldr	r3, [r4, #16]
1a00574c:	b94b      	cbnz	r3, 1a005762 <__swsetup_r+0x9a>
1a00574e:	89a3      	ldrh	r3, [r4, #12]
1a005750:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a005754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a005758:	d003      	beq.n	1a005762 <__swsetup_r+0x9a>
1a00575a:	4621      	mov	r1, r4
1a00575c:	4630      	mov	r0, r6
1a00575e:	f000 f9bf 	bl	1a005ae0 <__smakebuf_r>
1a005762:	89a2      	ldrh	r2, [r4, #12]
1a005764:	f012 0301 	ands.w	r3, r2, #1
1a005768:	d00c      	beq.n	1a005784 <__swsetup_r+0xbc>
1a00576a:	2300      	movs	r3, #0
1a00576c:	60a3      	str	r3, [r4, #8]
1a00576e:	6963      	ldr	r3, [r4, #20]
1a005770:	425b      	negs	r3, r3
1a005772:	61a3      	str	r3, [r4, #24]
1a005774:	6923      	ldr	r3, [r4, #16]
1a005776:	b953      	cbnz	r3, 1a00578e <__swsetup_r+0xc6>
1a005778:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00577c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a005780:	d1ba      	bne.n	1a0056f8 <__swsetup_r+0x30>
1a005782:	bd70      	pop	{r4, r5, r6, pc}
1a005784:	0792      	lsls	r2, r2, #30
1a005786:	bf58      	it	pl
1a005788:	6963      	ldrpl	r3, [r4, #20]
1a00578a:	60a3      	str	r3, [r4, #8]
1a00578c:	e7f2      	b.n	1a005774 <__swsetup_r+0xac>
1a00578e:	2000      	movs	r0, #0
1a005790:	e7f7      	b.n	1a005782 <__swsetup_r+0xba>
1a005792:	bf00      	nop
1a005794:	10000094 	.word	0x10000094
1a005798:	1a006dc4 	.word	0x1a006dc4
1a00579c:	1a006de4 	.word	0x1a006de4
1a0057a0:	1a006da4 	.word	0x1a006da4

1a0057a4 <__sflush_r>:
1a0057a4:	898a      	ldrh	r2, [r1, #12]
1a0057a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0057aa:	4605      	mov	r5, r0
1a0057ac:	0710      	lsls	r0, r2, #28
1a0057ae:	460c      	mov	r4, r1
1a0057b0:	d458      	bmi.n	1a005864 <__sflush_r+0xc0>
1a0057b2:	684b      	ldr	r3, [r1, #4]
1a0057b4:	2b00      	cmp	r3, #0
1a0057b6:	dc05      	bgt.n	1a0057c4 <__sflush_r+0x20>
1a0057b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a0057ba:	2b00      	cmp	r3, #0
1a0057bc:	dc02      	bgt.n	1a0057c4 <__sflush_r+0x20>
1a0057be:	2000      	movs	r0, #0
1a0057c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0057c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a0057c6:	2e00      	cmp	r6, #0
1a0057c8:	d0f9      	beq.n	1a0057be <__sflush_r+0x1a>
1a0057ca:	2300      	movs	r3, #0
1a0057cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a0057d0:	682f      	ldr	r7, [r5, #0]
1a0057d2:	6a21      	ldr	r1, [r4, #32]
1a0057d4:	602b      	str	r3, [r5, #0]
1a0057d6:	d032      	beq.n	1a00583e <__sflush_r+0x9a>
1a0057d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a0057da:	89a3      	ldrh	r3, [r4, #12]
1a0057dc:	075a      	lsls	r2, r3, #29
1a0057de:	d505      	bpl.n	1a0057ec <__sflush_r+0x48>
1a0057e0:	6863      	ldr	r3, [r4, #4]
1a0057e2:	1ac0      	subs	r0, r0, r3
1a0057e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a0057e6:	b10b      	cbz	r3, 1a0057ec <__sflush_r+0x48>
1a0057e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0057ea:	1ac0      	subs	r0, r0, r3
1a0057ec:	2300      	movs	r3, #0
1a0057ee:	4602      	mov	r2, r0
1a0057f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a0057f2:	6a21      	ldr	r1, [r4, #32]
1a0057f4:	4628      	mov	r0, r5
1a0057f6:	47b0      	blx	r6
1a0057f8:	1c43      	adds	r3, r0, #1
1a0057fa:	89a3      	ldrh	r3, [r4, #12]
1a0057fc:	d106      	bne.n	1a00580c <__sflush_r+0x68>
1a0057fe:	6829      	ldr	r1, [r5, #0]
1a005800:	291d      	cmp	r1, #29
1a005802:	d848      	bhi.n	1a005896 <__sflush_r+0xf2>
1a005804:	4a29      	ldr	r2, [pc, #164]	; (1a0058ac <__sflush_r+0x108>)
1a005806:	40ca      	lsrs	r2, r1
1a005808:	07d6      	lsls	r6, r2, #31
1a00580a:	d544      	bpl.n	1a005896 <__sflush_r+0xf2>
1a00580c:	2200      	movs	r2, #0
1a00580e:	6062      	str	r2, [r4, #4]
1a005810:	04d9      	lsls	r1, r3, #19
1a005812:	6922      	ldr	r2, [r4, #16]
1a005814:	6022      	str	r2, [r4, #0]
1a005816:	d504      	bpl.n	1a005822 <__sflush_r+0x7e>
1a005818:	1c42      	adds	r2, r0, #1
1a00581a:	d101      	bne.n	1a005820 <__sflush_r+0x7c>
1a00581c:	682b      	ldr	r3, [r5, #0]
1a00581e:	b903      	cbnz	r3, 1a005822 <__sflush_r+0x7e>
1a005820:	6560      	str	r0, [r4, #84]	; 0x54
1a005822:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a005824:	602f      	str	r7, [r5, #0]
1a005826:	2900      	cmp	r1, #0
1a005828:	d0c9      	beq.n	1a0057be <__sflush_r+0x1a>
1a00582a:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a00582e:	4299      	cmp	r1, r3
1a005830:	d002      	beq.n	1a005838 <__sflush_r+0x94>
1a005832:	4628      	mov	r0, r5
1a005834:	f000 f994 	bl	1a005b60 <_free_r>
1a005838:	2000      	movs	r0, #0
1a00583a:	6360      	str	r0, [r4, #52]	; 0x34
1a00583c:	e7c0      	b.n	1a0057c0 <__sflush_r+0x1c>
1a00583e:	2301      	movs	r3, #1
1a005840:	4628      	mov	r0, r5
1a005842:	47b0      	blx	r6
1a005844:	1c41      	adds	r1, r0, #1
1a005846:	d1c8      	bne.n	1a0057da <__sflush_r+0x36>
1a005848:	682b      	ldr	r3, [r5, #0]
1a00584a:	2b00      	cmp	r3, #0
1a00584c:	d0c5      	beq.n	1a0057da <__sflush_r+0x36>
1a00584e:	2b1d      	cmp	r3, #29
1a005850:	d001      	beq.n	1a005856 <__sflush_r+0xb2>
1a005852:	2b16      	cmp	r3, #22
1a005854:	d101      	bne.n	1a00585a <__sflush_r+0xb6>
1a005856:	602f      	str	r7, [r5, #0]
1a005858:	e7b1      	b.n	1a0057be <__sflush_r+0x1a>
1a00585a:	89a3      	ldrh	r3, [r4, #12]
1a00585c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a005860:	81a3      	strh	r3, [r4, #12]
1a005862:	e7ad      	b.n	1a0057c0 <__sflush_r+0x1c>
1a005864:	690f      	ldr	r7, [r1, #16]
1a005866:	2f00      	cmp	r7, #0
1a005868:	d0a9      	beq.n	1a0057be <__sflush_r+0x1a>
1a00586a:	0793      	lsls	r3, r2, #30
1a00586c:	680e      	ldr	r6, [r1, #0]
1a00586e:	bf08      	it	eq
1a005870:	694b      	ldreq	r3, [r1, #20]
1a005872:	600f      	str	r7, [r1, #0]
1a005874:	bf18      	it	ne
1a005876:	2300      	movne	r3, #0
1a005878:	eba6 0807 	sub.w	r8, r6, r7
1a00587c:	608b      	str	r3, [r1, #8]
1a00587e:	f1b8 0f00 	cmp.w	r8, #0
1a005882:	dd9c      	ble.n	1a0057be <__sflush_r+0x1a>
1a005884:	4643      	mov	r3, r8
1a005886:	463a      	mov	r2, r7
1a005888:	6a21      	ldr	r1, [r4, #32]
1a00588a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a00588c:	4628      	mov	r0, r5
1a00588e:	47b0      	blx	r6
1a005890:	2800      	cmp	r0, #0
1a005892:	dc06      	bgt.n	1a0058a2 <__sflush_r+0xfe>
1a005894:	89a3      	ldrh	r3, [r4, #12]
1a005896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00589a:	81a3      	strh	r3, [r4, #12]
1a00589c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0058a0:	e78e      	b.n	1a0057c0 <__sflush_r+0x1c>
1a0058a2:	4407      	add	r7, r0
1a0058a4:	eba8 0800 	sub.w	r8, r8, r0
1a0058a8:	e7e9      	b.n	1a00587e <__sflush_r+0xda>
1a0058aa:	bf00      	nop
1a0058ac:	20400001 	.word	0x20400001

1a0058b0 <_fflush_r>:
1a0058b0:	b538      	push	{r3, r4, r5, lr}
1a0058b2:	690b      	ldr	r3, [r1, #16]
1a0058b4:	4605      	mov	r5, r0
1a0058b6:	460c      	mov	r4, r1
1a0058b8:	b1db      	cbz	r3, 1a0058f2 <_fflush_r+0x42>
1a0058ba:	b118      	cbz	r0, 1a0058c4 <_fflush_r+0x14>
1a0058bc:	6983      	ldr	r3, [r0, #24]
1a0058be:	b90b      	cbnz	r3, 1a0058c4 <_fflush_r+0x14>
1a0058c0:	f000 f860 	bl	1a005984 <__sinit>
1a0058c4:	4b0c      	ldr	r3, [pc, #48]	; (1a0058f8 <_fflush_r+0x48>)
1a0058c6:	429c      	cmp	r4, r3
1a0058c8:	d109      	bne.n	1a0058de <_fflush_r+0x2e>
1a0058ca:	686c      	ldr	r4, [r5, #4]
1a0058cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0058d0:	b17b      	cbz	r3, 1a0058f2 <_fflush_r+0x42>
1a0058d2:	4621      	mov	r1, r4
1a0058d4:	4628      	mov	r0, r5
1a0058d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a0058da:	f7ff bf63 	b.w	1a0057a4 <__sflush_r>
1a0058de:	4b07      	ldr	r3, [pc, #28]	; (1a0058fc <_fflush_r+0x4c>)
1a0058e0:	429c      	cmp	r4, r3
1a0058e2:	d101      	bne.n	1a0058e8 <_fflush_r+0x38>
1a0058e4:	68ac      	ldr	r4, [r5, #8]
1a0058e6:	e7f1      	b.n	1a0058cc <_fflush_r+0x1c>
1a0058e8:	4b05      	ldr	r3, [pc, #20]	; (1a005900 <_fflush_r+0x50>)
1a0058ea:	429c      	cmp	r4, r3
1a0058ec:	bf08      	it	eq
1a0058ee:	68ec      	ldreq	r4, [r5, #12]
1a0058f0:	e7ec      	b.n	1a0058cc <_fflush_r+0x1c>
1a0058f2:	2000      	movs	r0, #0
1a0058f4:	bd38      	pop	{r3, r4, r5, pc}
1a0058f6:	bf00      	nop
1a0058f8:	1a006dc4 	.word	0x1a006dc4
1a0058fc:	1a006de4 	.word	0x1a006de4
1a005900:	1a006da4 	.word	0x1a006da4

1a005904 <std>:
1a005904:	2300      	movs	r3, #0
1a005906:	b510      	push	{r4, lr}
1a005908:	4604      	mov	r4, r0
1a00590a:	e9c0 3300 	strd	r3, r3, [r0]
1a00590e:	6083      	str	r3, [r0, #8]
1a005910:	8181      	strh	r1, [r0, #12]
1a005912:	6643      	str	r3, [r0, #100]	; 0x64
1a005914:	81c2      	strh	r2, [r0, #14]
1a005916:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a00591a:	6183      	str	r3, [r0, #24]
1a00591c:	4619      	mov	r1, r3
1a00591e:	2208      	movs	r2, #8
1a005920:	305c      	adds	r0, #92	; 0x5c
1a005922:	f7ff fddb 	bl	1a0054dc <memset>
1a005926:	4b05      	ldr	r3, [pc, #20]	; (1a00593c <std+0x38>)
1a005928:	6263      	str	r3, [r4, #36]	; 0x24
1a00592a:	4b05      	ldr	r3, [pc, #20]	; (1a005940 <std+0x3c>)
1a00592c:	62a3      	str	r3, [r4, #40]	; 0x28
1a00592e:	4b05      	ldr	r3, [pc, #20]	; (1a005944 <std+0x40>)
1a005930:	62e3      	str	r3, [r4, #44]	; 0x2c
1a005932:	4b05      	ldr	r3, [pc, #20]	; (1a005948 <std+0x44>)
1a005934:	6224      	str	r4, [r4, #32]
1a005936:	6323      	str	r3, [r4, #48]	; 0x30
1a005938:	bd10      	pop	{r4, pc}
1a00593a:	bf00      	nop
1a00593c:	1a006241 	.word	0x1a006241
1a005940:	1a006263 	.word	0x1a006263
1a005944:	1a00629b 	.word	0x1a00629b
1a005948:	1a0062bf 	.word	0x1a0062bf

1a00594c <_cleanup_r>:
1a00594c:	4901      	ldr	r1, [pc, #4]	; (1a005954 <_cleanup_r+0x8>)
1a00594e:	f000 b885 	b.w	1a005a5c <_fwalk_reent>
1a005952:	bf00      	nop
1a005954:	1a0058b1 	.word	0x1a0058b1

1a005958 <__sfmoreglue>:
1a005958:	b570      	push	{r4, r5, r6, lr}
1a00595a:	1e4a      	subs	r2, r1, #1
1a00595c:	2568      	movs	r5, #104	; 0x68
1a00595e:	4355      	muls	r5, r2
1a005960:	460e      	mov	r6, r1
1a005962:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a005966:	f000 f949 	bl	1a005bfc <_malloc_r>
1a00596a:	4604      	mov	r4, r0
1a00596c:	b140      	cbz	r0, 1a005980 <__sfmoreglue+0x28>
1a00596e:	2100      	movs	r1, #0
1a005970:	e9c0 1600 	strd	r1, r6, [r0]
1a005974:	300c      	adds	r0, #12
1a005976:	60a0      	str	r0, [r4, #8]
1a005978:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a00597c:	f7ff fdae 	bl	1a0054dc <memset>
1a005980:	4620      	mov	r0, r4
1a005982:	bd70      	pop	{r4, r5, r6, pc}

1a005984 <__sinit>:
1a005984:	6983      	ldr	r3, [r0, #24]
1a005986:	b510      	push	{r4, lr}
1a005988:	4604      	mov	r4, r0
1a00598a:	bb33      	cbnz	r3, 1a0059da <__sinit+0x56>
1a00598c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
1a005990:	6503      	str	r3, [r0, #80]	; 0x50
1a005992:	4b12      	ldr	r3, [pc, #72]	; (1a0059dc <__sinit+0x58>)
1a005994:	4a12      	ldr	r2, [pc, #72]	; (1a0059e0 <__sinit+0x5c>)
1a005996:	681b      	ldr	r3, [r3, #0]
1a005998:	6282      	str	r2, [r0, #40]	; 0x28
1a00599a:	4298      	cmp	r0, r3
1a00599c:	bf04      	itt	eq
1a00599e:	2301      	moveq	r3, #1
1a0059a0:	6183      	streq	r3, [r0, #24]
1a0059a2:	f000 f81f 	bl	1a0059e4 <__sfp>
1a0059a6:	6060      	str	r0, [r4, #4]
1a0059a8:	4620      	mov	r0, r4
1a0059aa:	f000 f81b 	bl	1a0059e4 <__sfp>
1a0059ae:	60a0      	str	r0, [r4, #8]
1a0059b0:	4620      	mov	r0, r4
1a0059b2:	f000 f817 	bl	1a0059e4 <__sfp>
1a0059b6:	2200      	movs	r2, #0
1a0059b8:	60e0      	str	r0, [r4, #12]
1a0059ba:	2104      	movs	r1, #4
1a0059bc:	6860      	ldr	r0, [r4, #4]
1a0059be:	f7ff ffa1 	bl	1a005904 <std>
1a0059c2:	2201      	movs	r2, #1
1a0059c4:	2109      	movs	r1, #9
1a0059c6:	68a0      	ldr	r0, [r4, #8]
1a0059c8:	f7ff ff9c 	bl	1a005904 <std>
1a0059cc:	2202      	movs	r2, #2
1a0059ce:	2112      	movs	r1, #18
1a0059d0:	68e0      	ldr	r0, [r4, #12]
1a0059d2:	f7ff ff97 	bl	1a005904 <std>
1a0059d6:	2301      	movs	r3, #1
1a0059d8:	61a3      	str	r3, [r4, #24]
1a0059da:	bd10      	pop	{r4, pc}
1a0059dc:	1a006e04 	.word	0x1a006e04
1a0059e0:	1a00594d 	.word	0x1a00594d

1a0059e4 <__sfp>:
1a0059e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0059e6:	4b1b      	ldr	r3, [pc, #108]	; (1a005a54 <__sfp+0x70>)
1a0059e8:	681e      	ldr	r6, [r3, #0]
1a0059ea:	69b3      	ldr	r3, [r6, #24]
1a0059ec:	4607      	mov	r7, r0
1a0059ee:	b913      	cbnz	r3, 1a0059f6 <__sfp+0x12>
1a0059f0:	4630      	mov	r0, r6
1a0059f2:	f7ff ffc7 	bl	1a005984 <__sinit>
1a0059f6:	3648      	adds	r6, #72	; 0x48
1a0059f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a0059fc:	3b01      	subs	r3, #1
1a0059fe:	d503      	bpl.n	1a005a08 <__sfp+0x24>
1a005a00:	6833      	ldr	r3, [r6, #0]
1a005a02:	b133      	cbz	r3, 1a005a12 <__sfp+0x2e>
1a005a04:	6836      	ldr	r6, [r6, #0]
1a005a06:	e7f7      	b.n	1a0059f8 <__sfp+0x14>
1a005a08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a005a0c:	b16d      	cbz	r5, 1a005a2a <__sfp+0x46>
1a005a0e:	3468      	adds	r4, #104	; 0x68
1a005a10:	e7f4      	b.n	1a0059fc <__sfp+0x18>
1a005a12:	2104      	movs	r1, #4
1a005a14:	4638      	mov	r0, r7
1a005a16:	f7ff ff9f 	bl	1a005958 <__sfmoreglue>
1a005a1a:	6030      	str	r0, [r6, #0]
1a005a1c:	2800      	cmp	r0, #0
1a005a1e:	d1f1      	bne.n	1a005a04 <__sfp+0x20>
1a005a20:	230c      	movs	r3, #12
1a005a22:	603b      	str	r3, [r7, #0]
1a005a24:	4604      	mov	r4, r0
1a005a26:	4620      	mov	r0, r4
1a005a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a005a2a:	4b0b      	ldr	r3, [pc, #44]	; (1a005a58 <__sfp+0x74>)
1a005a2c:	6665      	str	r5, [r4, #100]	; 0x64
1a005a2e:	e9c4 5500 	strd	r5, r5, [r4]
1a005a32:	60a5      	str	r5, [r4, #8]
1a005a34:	e9c4 3503 	strd	r3, r5, [r4, #12]
1a005a38:	e9c4 5505 	strd	r5, r5, [r4, #20]
1a005a3c:	2208      	movs	r2, #8
1a005a3e:	4629      	mov	r1, r5
1a005a40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a005a44:	f7ff fd4a 	bl	1a0054dc <memset>
1a005a48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a005a4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a005a50:	e7e9      	b.n	1a005a26 <__sfp+0x42>
1a005a52:	bf00      	nop
1a005a54:	1a006e04 	.word	0x1a006e04
1a005a58:	ffff0001 	.word	0xffff0001

1a005a5c <_fwalk_reent>:
1a005a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a005a60:	4680      	mov	r8, r0
1a005a62:	4689      	mov	r9, r1
1a005a64:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a005a68:	2600      	movs	r6, #0
1a005a6a:	b914      	cbnz	r4, 1a005a72 <_fwalk_reent+0x16>
1a005a6c:	4630      	mov	r0, r6
1a005a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a005a72:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a005a76:	3f01      	subs	r7, #1
1a005a78:	d501      	bpl.n	1a005a7e <_fwalk_reent+0x22>
1a005a7a:	6824      	ldr	r4, [r4, #0]
1a005a7c:	e7f5      	b.n	1a005a6a <_fwalk_reent+0xe>
1a005a7e:	89ab      	ldrh	r3, [r5, #12]
1a005a80:	2b01      	cmp	r3, #1
1a005a82:	d907      	bls.n	1a005a94 <_fwalk_reent+0x38>
1a005a84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a005a88:	3301      	adds	r3, #1
1a005a8a:	d003      	beq.n	1a005a94 <_fwalk_reent+0x38>
1a005a8c:	4629      	mov	r1, r5
1a005a8e:	4640      	mov	r0, r8
1a005a90:	47c8      	blx	r9
1a005a92:	4306      	orrs	r6, r0
1a005a94:	3568      	adds	r5, #104	; 0x68
1a005a96:	e7ee      	b.n	1a005a76 <_fwalk_reent+0x1a>

1a005a98 <__swhatbuf_r>:
1a005a98:	b570      	push	{r4, r5, r6, lr}
1a005a9a:	460e      	mov	r6, r1
1a005a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a005aa0:	2900      	cmp	r1, #0
1a005aa2:	b096      	sub	sp, #88	; 0x58
1a005aa4:	4614      	mov	r4, r2
1a005aa6:	461d      	mov	r5, r3
1a005aa8:	da07      	bge.n	1a005aba <__swhatbuf_r+0x22>
1a005aaa:	2300      	movs	r3, #0
1a005aac:	602b      	str	r3, [r5, #0]
1a005aae:	89b3      	ldrh	r3, [r6, #12]
1a005ab0:	061a      	lsls	r2, r3, #24
1a005ab2:	d410      	bmi.n	1a005ad6 <__swhatbuf_r+0x3e>
1a005ab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a005ab8:	e00e      	b.n	1a005ad8 <__swhatbuf_r+0x40>
1a005aba:	466a      	mov	r2, sp
1a005abc:	f7fa ff5b 	bl	1a000976 <_fstat_r>
1a005ac0:	2800      	cmp	r0, #0
1a005ac2:	dbf2      	blt.n	1a005aaa <__swhatbuf_r+0x12>
1a005ac4:	9a01      	ldr	r2, [sp, #4]
1a005ac6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a005aca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a005ace:	425a      	negs	r2, r3
1a005ad0:	415a      	adcs	r2, r3
1a005ad2:	602a      	str	r2, [r5, #0]
1a005ad4:	e7ee      	b.n	1a005ab4 <__swhatbuf_r+0x1c>
1a005ad6:	2340      	movs	r3, #64	; 0x40
1a005ad8:	2000      	movs	r0, #0
1a005ada:	6023      	str	r3, [r4, #0]
1a005adc:	b016      	add	sp, #88	; 0x58
1a005ade:	bd70      	pop	{r4, r5, r6, pc}

1a005ae0 <__smakebuf_r>:
1a005ae0:	898b      	ldrh	r3, [r1, #12]
1a005ae2:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a005ae4:	079d      	lsls	r5, r3, #30
1a005ae6:	4606      	mov	r6, r0
1a005ae8:	460c      	mov	r4, r1
1a005aea:	d507      	bpl.n	1a005afc <__smakebuf_r+0x1c>
1a005aec:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a005af0:	6023      	str	r3, [r4, #0]
1a005af2:	6123      	str	r3, [r4, #16]
1a005af4:	2301      	movs	r3, #1
1a005af6:	6163      	str	r3, [r4, #20]
1a005af8:	b002      	add	sp, #8
1a005afa:	bd70      	pop	{r4, r5, r6, pc}
1a005afc:	ab01      	add	r3, sp, #4
1a005afe:	466a      	mov	r2, sp
1a005b00:	f7ff ffca 	bl	1a005a98 <__swhatbuf_r>
1a005b04:	9900      	ldr	r1, [sp, #0]
1a005b06:	4605      	mov	r5, r0
1a005b08:	4630      	mov	r0, r6
1a005b0a:	f000 f877 	bl	1a005bfc <_malloc_r>
1a005b0e:	b948      	cbnz	r0, 1a005b24 <__smakebuf_r+0x44>
1a005b10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a005b14:	059a      	lsls	r2, r3, #22
1a005b16:	d4ef      	bmi.n	1a005af8 <__smakebuf_r+0x18>
1a005b18:	f023 0303 	bic.w	r3, r3, #3
1a005b1c:	f043 0302 	orr.w	r3, r3, #2
1a005b20:	81a3      	strh	r3, [r4, #12]
1a005b22:	e7e3      	b.n	1a005aec <__smakebuf_r+0xc>
1a005b24:	4b0d      	ldr	r3, [pc, #52]	; (1a005b5c <__smakebuf_r+0x7c>)
1a005b26:	62b3      	str	r3, [r6, #40]	; 0x28
1a005b28:	89a3      	ldrh	r3, [r4, #12]
1a005b2a:	6020      	str	r0, [r4, #0]
1a005b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a005b30:	81a3      	strh	r3, [r4, #12]
1a005b32:	9b00      	ldr	r3, [sp, #0]
1a005b34:	6163      	str	r3, [r4, #20]
1a005b36:	9b01      	ldr	r3, [sp, #4]
1a005b38:	6120      	str	r0, [r4, #16]
1a005b3a:	b15b      	cbz	r3, 1a005b54 <__smakebuf_r+0x74>
1a005b3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a005b40:	4630      	mov	r0, r6
1a005b42:	f7fa ff1d 	bl	1a000980 <_isatty_r>
1a005b46:	b128      	cbz	r0, 1a005b54 <__smakebuf_r+0x74>
1a005b48:	89a3      	ldrh	r3, [r4, #12]
1a005b4a:	f023 0303 	bic.w	r3, r3, #3
1a005b4e:	f043 0301 	orr.w	r3, r3, #1
1a005b52:	81a3      	strh	r3, [r4, #12]
1a005b54:	89a3      	ldrh	r3, [r4, #12]
1a005b56:	431d      	orrs	r5, r3
1a005b58:	81a5      	strh	r5, [r4, #12]
1a005b5a:	e7cd      	b.n	1a005af8 <__smakebuf_r+0x18>
1a005b5c:	1a00594d 	.word	0x1a00594d

1a005b60 <_free_r>:
1a005b60:	b538      	push	{r3, r4, r5, lr}
1a005b62:	4605      	mov	r5, r0
1a005b64:	2900      	cmp	r1, #0
1a005b66:	d045      	beq.n	1a005bf4 <_free_r+0x94>
1a005b68:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a005b6c:	1f0c      	subs	r4, r1, #4
1a005b6e:	2b00      	cmp	r3, #0
1a005b70:	bfb8      	it	lt
1a005b72:	18e4      	addlt	r4, r4, r3
1a005b74:	f000 fbfc 	bl	1a006370 <__malloc_lock>
1a005b78:	4a1f      	ldr	r2, [pc, #124]	; (1a005bf8 <_free_r+0x98>)
1a005b7a:	6813      	ldr	r3, [r2, #0]
1a005b7c:	4610      	mov	r0, r2
1a005b7e:	b933      	cbnz	r3, 1a005b8e <_free_r+0x2e>
1a005b80:	6063      	str	r3, [r4, #4]
1a005b82:	6014      	str	r4, [r2, #0]
1a005b84:	4628      	mov	r0, r5
1a005b86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a005b8a:	f000 bbf2 	b.w	1a006372 <__malloc_unlock>
1a005b8e:	42a3      	cmp	r3, r4
1a005b90:	d90c      	bls.n	1a005bac <_free_r+0x4c>
1a005b92:	6821      	ldr	r1, [r4, #0]
1a005b94:	1862      	adds	r2, r4, r1
1a005b96:	4293      	cmp	r3, r2
1a005b98:	bf04      	itt	eq
1a005b9a:	681a      	ldreq	r2, [r3, #0]
1a005b9c:	685b      	ldreq	r3, [r3, #4]
1a005b9e:	6063      	str	r3, [r4, #4]
1a005ba0:	bf04      	itt	eq
1a005ba2:	1852      	addeq	r2, r2, r1
1a005ba4:	6022      	streq	r2, [r4, #0]
1a005ba6:	6004      	str	r4, [r0, #0]
1a005ba8:	e7ec      	b.n	1a005b84 <_free_r+0x24>
1a005baa:	4613      	mov	r3, r2
1a005bac:	685a      	ldr	r2, [r3, #4]
1a005bae:	b10a      	cbz	r2, 1a005bb4 <_free_r+0x54>
1a005bb0:	42a2      	cmp	r2, r4
1a005bb2:	d9fa      	bls.n	1a005baa <_free_r+0x4a>
1a005bb4:	6819      	ldr	r1, [r3, #0]
1a005bb6:	1858      	adds	r0, r3, r1
1a005bb8:	42a0      	cmp	r0, r4
1a005bba:	d10b      	bne.n	1a005bd4 <_free_r+0x74>
1a005bbc:	6820      	ldr	r0, [r4, #0]
1a005bbe:	4401      	add	r1, r0
1a005bc0:	1858      	adds	r0, r3, r1
1a005bc2:	4282      	cmp	r2, r0
1a005bc4:	6019      	str	r1, [r3, #0]
1a005bc6:	d1dd      	bne.n	1a005b84 <_free_r+0x24>
1a005bc8:	6810      	ldr	r0, [r2, #0]
1a005bca:	6852      	ldr	r2, [r2, #4]
1a005bcc:	605a      	str	r2, [r3, #4]
1a005bce:	4401      	add	r1, r0
1a005bd0:	6019      	str	r1, [r3, #0]
1a005bd2:	e7d7      	b.n	1a005b84 <_free_r+0x24>
1a005bd4:	d902      	bls.n	1a005bdc <_free_r+0x7c>
1a005bd6:	230c      	movs	r3, #12
1a005bd8:	602b      	str	r3, [r5, #0]
1a005bda:	e7d3      	b.n	1a005b84 <_free_r+0x24>
1a005bdc:	6820      	ldr	r0, [r4, #0]
1a005bde:	1821      	adds	r1, r4, r0
1a005be0:	428a      	cmp	r2, r1
1a005be2:	bf04      	itt	eq
1a005be4:	6811      	ldreq	r1, [r2, #0]
1a005be6:	6852      	ldreq	r2, [r2, #4]
1a005be8:	6062      	str	r2, [r4, #4]
1a005bea:	bf04      	itt	eq
1a005bec:	1809      	addeq	r1, r1, r0
1a005bee:	6021      	streq	r1, [r4, #0]
1a005bf0:	605c      	str	r4, [r3, #4]
1a005bf2:	e7c7      	b.n	1a005b84 <_free_r+0x24>
1a005bf4:	bd38      	pop	{r3, r4, r5, pc}
1a005bf6:	bf00      	nop
1a005bf8:	10000a18 	.word	0x10000a18

1a005bfc <_malloc_r>:
1a005bfc:	b570      	push	{r4, r5, r6, lr}
1a005bfe:	1ccd      	adds	r5, r1, #3
1a005c00:	f025 0503 	bic.w	r5, r5, #3
1a005c04:	3508      	adds	r5, #8
1a005c06:	2d0c      	cmp	r5, #12
1a005c08:	bf38      	it	cc
1a005c0a:	250c      	movcc	r5, #12
1a005c0c:	2d00      	cmp	r5, #0
1a005c0e:	4606      	mov	r6, r0
1a005c10:	db01      	blt.n	1a005c16 <_malloc_r+0x1a>
1a005c12:	42a9      	cmp	r1, r5
1a005c14:	d903      	bls.n	1a005c1e <_malloc_r+0x22>
1a005c16:	230c      	movs	r3, #12
1a005c18:	6033      	str	r3, [r6, #0]
1a005c1a:	2000      	movs	r0, #0
1a005c1c:	bd70      	pop	{r4, r5, r6, pc}
1a005c1e:	f000 fba7 	bl	1a006370 <__malloc_lock>
1a005c22:	4a21      	ldr	r2, [pc, #132]	; (1a005ca8 <_malloc_r+0xac>)
1a005c24:	6814      	ldr	r4, [r2, #0]
1a005c26:	4621      	mov	r1, r4
1a005c28:	b991      	cbnz	r1, 1a005c50 <_malloc_r+0x54>
1a005c2a:	4c20      	ldr	r4, [pc, #128]	; (1a005cac <_malloc_r+0xb0>)
1a005c2c:	6823      	ldr	r3, [r4, #0]
1a005c2e:	b91b      	cbnz	r3, 1a005c38 <_malloc_r+0x3c>
1a005c30:	4630      	mov	r0, r6
1a005c32:	f7fa feef 	bl	1a000a14 <_sbrk_r>
1a005c36:	6020      	str	r0, [r4, #0]
1a005c38:	4629      	mov	r1, r5
1a005c3a:	4630      	mov	r0, r6
1a005c3c:	f7fa feea 	bl	1a000a14 <_sbrk_r>
1a005c40:	1c43      	adds	r3, r0, #1
1a005c42:	d124      	bne.n	1a005c8e <_malloc_r+0x92>
1a005c44:	230c      	movs	r3, #12
1a005c46:	6033      	str	r3, [r6, #0]
1a005c48:	4630      	mov	r0, r6
1a005c4a:	f000 fb92 	bl	1a006372 <__malloc_unlock>
1a005c4e:	e7e4      	b.n	1a005c1a <_malloc_r+0x1e>
1a005c50:	680b      	ldr	r3, [r1, #0]
1a005c52:	1b5b      	subs	r3, r3, r5
1a005c54:	d418      	bmi.n	1a005c88 <_malloc_r+0x8c>
1a005c56:	2b0b      	cmp	r3, #11
1a005c58:	d90f      	bls.n	1a005c7a <_malloc_r+0x7e>
1a005c5a:	600b      	str	r3, [r1, #0]
1a005c5c:	50cd      	str	r5, [r1, r3]
1a005c5e:	18cc      	adds	r4, r1, r3
1a005c60:	4630      	mov	r0, r6
1a005c62:	f000 fb86 	bl	1a006372 <__malloc_unlock>
1a005c66:	f104 000b 	add.w	r0, r4, #11
1a005c6a:	1d23      	adds	r3, r4, #4
1a005c6c:	f020 0007 	bic.w	r0, r0, #7
1a005c70:	1ac3      	subs	r3, r0, r3
1a005c72:	d0d3      	beq.n	1a005c1c <_malloc_r+0x20>
1a005c74:	425a      	negs	r2, r3
1a005c76:	50e2      	str	r2, [r4, r3]
1a005c78:	e7d0      	b.n	1a005c1c <_malloc_r+0x20>
1a005c7a:	428c      	cmp	r4, r1
1a005c7c:	684b      	ldr	r3, [r1, #4]
1a005c7e:	bf16      	itet	ne
1a005c80:	6063      	strne	r3, [r4, #4]
1a005c82:	6013      	streq	r3, [r2, #0]
1a005c84:	460c      	movne	r4, r1
1a005c86:	e7eb      	b.n	1a005c60 <_malloc_r+0x64>
1a005c88:	460c      	mov	r4, r1
1a005c8a:	6849      	ldr	r1, [r1, #4]
1a005c8c:	e7cc      	b.n	1a005c28 <_malloc_r+0x2c>
1a005c8e:	1cc4      	adds	r4, r0, #3
1a005c90:	f024 0403 	bic.w	r4, r4, #3
1a005c94:	42a0      	cmp	r0, r4
1a005c96:	d005      	beq.n	1a005ca4 <_malloc_r+0xa8>
1a005c98:	1a21      	subs	r1, r4, r0
1a005c9a:	4630      	mov	r0, r6
1a005c9c:	f7fa feba 	bl	1a000a14 <_sbrk_r>
1a005ca0:	3001      	adds	r0, #1
1a005ca2:	d0cf      	beq.n	1a005c44 <_malloc_r+0x48>
1a005ca4:	6025      	str	r5, [r4, #0]
1a005ca6:	e7db      	b.n	1a005c60 <_malloc_r+0x64>
1a005ca8:	10000a18 	.word	0x10000a18
1a005cac:	10000a1c 	.word	0x10000a1c

1a005cb0 <__sfputc_r>:
1a005cb0:	6893      	ldr	r3, [r2, #8]
1a005cb2:	3b01      	subs	r3, #1
1a005cb4:	2b00      	cmp	r3, #0
1a005cb6:	b410      	push	{r4}
1a005cb8:	6093      	str	r3, [r2, #8]
1a005cba:	da08      	bge.n	1a005cce <__sfputc_r+0x1e>
1a005cbc:	6994      	ldr	r4, [r2, #24]
1a005cbe:	42a3      	cmp	r3, r4
1a005cc0:	db01      	blt.n	1a005cc6 <__sfputc_r+0x16>
1a005cc2:	290a      	cmp	r1, #10
1a005cc4:	d103      	bne.n	1a005cce <__sfputc_r+0x1e>
1a005cc6:	f85d 4b04 	ldr.w	r4, [sp], #4
1a005cca:	f7ff bcab 	b.w	1a005624 <__swbuf_r>
1a005cce:	6813      	ldr	r3, [r2, #0]
1a005cd0:	1c58      	adds	r0, r3, #1
1a005cd2:	6010      	str	r0, [r2, #0]
1a005cd4:	7019      	strb	r1, [r3, #0]
1a005cd6:	4608      	mov	r0, r1
1a005cd8:	f85d 4b04 	ldr.w	r4, [sp], #4
1a005cdc:	4770      	bx	lr

1a005cde <__sfputs_r>:
1a005cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a005ce0:	4606      	mov	r6, r0
1a005ce2:	460f      	mov	r7, r1
1a005ce4:	4614      	mov	r4, r2
1a005ce6:	18d5      	adds	r5, r2, r3
1a005ce8:	42ac      	cmp	r4, r5
1a005cea:	d101      	bne.n	1a005cf0 <__sfputs_r+0x12>
1a005cec:	2000      	movs	r0, #0
1a005cee:	e007      	b.n	1a005d00 <__sfputs_r+0x22>
1a005cf0:	463a      	mov	r2, r7
1a005cf2:	f814 1b01 	ldrb.w	r1, [r4], #1
1a005cf6:	4630      	mov	r0, r6
1a005cf8:	f7ff ffda 	bl	1a005cb0 <__sfputc_r>
1a005cfc:	1c43      	adds	r3, r0, #1
1a005cfe:	d1f3      	bne.n	1a005ce8 <__sfputs_r+0xa>
1a005d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a005d02:	Address 0x000000001a005d02 is out of bounds.


1a005d04 <_vfiprintf_r>:
1a005d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a005d08:	460c      	mov	r4, r1
1a005d0a:	b09d      	sub	sp, #116	; 0x74
1a005d0c:	4617      	mov	r7, r2
1a005d0e:	461d      	mov	r5, r3
1a005d10:	4606      	mov	r6, r0
1a005d12:	b118      	cbz	r0, 1a005d1c <_vfiprintf_r+0x18>
1a005d14:	6983      	ldr	r3, [r0, #24]
1a005d16:	b90b      	cbnz	r3, 1a005d1c <_vfiprintf_r+0x18>
1a005d18:	f7ff fe34 	bl	1a005984 <__sinit>
1a005d1c:	4b7c      	ldr	r3, [pc, #496]	; (1a005f10 <_vfiprintf_r+0x20c>)
1a005d1e:	429c      	cmp	r4, r3
1a005d20:	d158      	bne.n	1a005dd4 <_vfiprintf_r+0xd0>
1a005d22:	6874      	ldr	r4, [r6, #4]
1a005d24:	89a3      	ldrh	r3, [r4, #12]
1a005d26:	0718      	lsls	r0, r3, #28
1a005d28:	d55e      	bpl.n	1a005de8 <_vfiprintf_r+0xe4>
1a005d2a:	6923      	ldr	r3, [r4, #16]
1a005d2c:	2b00      	cmp	r3, #0
1a005d2e:	d05b      	beq.n	1a005de8 <_vfiprintf_r+0xe4>
1a005d30:	2300      	movs	r3, #0
1a005d32:	9309      	str	r3, [sp, #36]	; 0x24
1a005d34:	2320      	movs	r3, #32
1a005d36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a005d3a:	2330      	movs	r3, #48	; 0x30
1a005d3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a005d40:	9503      	str	r5, [sp, #12]
1a005d42:	f04f 0b01 	mov.w	fp, #1
1a005d46:	46b8      	mov	r8, r7
1a005d48:	4645      	mov	r5, r8
1a005d4a:	f815 3b01 	ldrb.w	r3, [r5], #1
1a005d4e:	b10b      	cbz	r3, 1a005d54 <_vfiprintf_r+0x50>
1a005d50:	2b25      	cmp	r3, #37	; 0x25
1a005d52:	d154      	bne.n	1a005dfe <_vfiprintf_r+0xfa>
1a005d54:	ebb8 0a07 	subs.w	sl, r8, r7
1a005d58:	d00b      	beq.n	1a005d72 <_vfiprintf_r+0x6e>
1a005d5a:	4653      	mov	r3, sl
1a005d5c:	463a      	mov	r2, r7
1a005d5e:	4621      	mov	r1, r4
1a005d60:	4630      	mov	r0, r6
1a005d62:	f7ff ffbc 	bl	1a005cde <__sfputs_r>
1a005d66:	3001      	adds	r0, #1
1a005d68:	f000 80c2 	beq.w	1a005ef0 <_vfiprintf_r+0x1ec>
1a005d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005d6e:	4453      	add	r3, sl
1a005d70:	9309      	str	r3, [sp, #36]	; 0x24
1a005d72:	f898 3000 	ldrb.w	r3, [r8]
1a005d76:	2b00      	cmp	r3, #0
1a005d78:	f000 80ba 	beq.w	1a005ef0 <_vfiprintf_r+0x1ec>
1a005d7c:	2300      	movs	r3, #0
1a005d7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a005d82:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a005d86:	9304      	str	r3, [sp, #16]
1a005d88:	9307      	str	r3, [sp, #28]
1a005d8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a005d8e:	931a      	str	r3, [sp, #104]	; 0x68
1a005d90:	46a8      	mov	r8, r5
1a005d92:	2205      	movs	r2, #5
1a005d94:	f818 1b01 	ldrb.w	r1, [r8], #1
1a005d98:	485e      	ldr	r0, [pc, #376]	; (1a005f14 <_vfiprintf_r+0x210>)
1a005d9a:	f000 fa99 	bl	1a0062d0 <memchr>
1a005d9e:	9b04      	ldr	r3, [sp, #16]
1a005da0:	bb78      	cbnz	r0, 1a005e02 <_vfiprintf_r+0xfe>
1a005da2:	06d9      	lsls	r1, r3, #27
1a005da4:	bf44      	itt	mi
1a005da6:	2220      	movmi	r2, #32
1a005da8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a005dac:	071a      	lsls	r2, r3, #28
1a005dae:	bf44      	itt	mi
1a005db0:	222b      	movmi	r2, #43	; 0x2b
1a005db2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a005db6:	782a      	ldrb	r2, [r5, #0]
1a005db8:	2a2a      	cmp	r2, #42	; 0x2a
1a005dba:	d02a      	beq.n	1a005e12 <_vfiprintf_r+0x10e>
1a005dbc:	9a07      	ldr	r2, [sp, #28]
1a005dbe:	46a8      	mov	r8, r5
1a005dc0:	2000      	movs	r0, #0
1a005dc2:	250a      	movs	r5, #10
1a005dc4:	4641      	mov	r1, r8
1a005dc6:	f811 3b01 	ldrb.w	r3, [r1], #1
1a005dca:	3b30      	subs	r3, #48	; 0x30
1a005dcc:	2b09      	cmp	r3, #9
1a005dce:	d969      	bls.n	1a005ea4 <_vfiprintf_r+0x1a0>
1a005dd0:	b360      	cbz	r0, 1a005e2c <_vfiprintf_r+0x128>
1a005dd2:	e024      	b.n	1a005e1e <_vfiprintf_r+0x11a>
1a005dd4:	4b50      	ldr	r3, [pc, #320]	; (1a005f18 <_vfiprintf_r+0x214>)
1a005dd6:	429c      	cmp	r4, r3
1a005dd8:	d101      	bne.n	1a005dde <_vfiprintf_r+0xda>
1a005dda:	68b4      	ldr	r4, [r6, #8]
1a005ddc:	e7a2      	b.n	1a005d24 <_vfiprintf_r+0x20>
1a005dde:	4b4f      	ldr	r3, [pc, #316]	; (1a005f1c <_vfiprintf_r+0x218>)
1a005de0:	429c      	cmp	r4, r3
1a005de2:	bf08      	it	eq
1a005de4:	68f4      	ldreq	r4, [r6, #12]
1a005de6:	e79d      	b.n	1a005d24 <_vfiprintf_r+0x20>
1a005de8:	4621      	mov	r1, r4
1a005dea:	4630      	mov	r0, r6
1a005dec:	f7ff fc6c 	bl	1a0056c8 <__swsetup_r>
1a005df0:	2800      	cmp	r0, #0
1a005df2:	d09d      	beq.n	1a005d30 <_vfiprintf_r+0x2c>
1a005df4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005df8:	b01d      	add	sp, #116	; 0x74
1a005dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005dfe:	46a8      	mov	r8, r5
1a005e00:	e7a2      	b.n	1a005d48 <_vfiprintf_r+0x44>
1a005e02:	4a44      	ldr	r2, [pc, #272]	; (1a005f14 <_vfiprintf_r+0x210>)
1a005e04:	1a80      	subs	r0, r0, r2
1a005e06:	fa0b f000 	lsl.w	r0, fp, r0
1a005e0a:	4318      	orrs	r0, r3
1a005e0c:	9004      	str	r0, [sp, #16]
1a005e0e:	4645      	mov	r5, r8
1a005e10:	e7be      	b.n	1a005d90 <_vfiprintf_r+0x8c>
1a005e12:	9a03      	ldr	r2, [sp, #12]
1a005e14:	1d11      	adds	r1, r2, #4
1a005e16:	6812      	ldr	r2, [r2, #0]
1a005e18:	9103      	str	r1, [sp, #12]
1a005e1a:	2a00      	cmp	r2, #0
1a005e1c:	db01      	blt.n	1a005e22 <_vfiprintf_r+0x11e>
1a005e1e:	9207      	str	r2, [sp, #28]
1a005e20:	e004      	b.n	1a005e2c <_vfiprintf_r+0x128>
1a005e22:	4252      	negs	r2, r2
1a005e24:	f043 0302 	orr.w	r3, r3, #2
1a005e28:	9207      	str	r2, [sp, #28]
1a005e2a:	9304      	str	r3, [sp, #16]
1a005e2c:	f898 3000 	ldrb.w	r3, [r8]
1a005e30:	2b2e      	cmp	r3, #46	; 0x2e
1a005e32:	d10e      	bne.n	1a005e52 <_vfiprintf_r+0x14e>
1a005e34:	f898 3001 	ldrb.w	r3, [r8, #1]
1a005e38:	2b2a      	cmp	r3, #42	; 0x2a
1a005e3a:	d138      	bne.n	1a005eae <_vfiprintf_r+0x1aa>
1a005e3c:	9b03      	ldr	r3, [sp, #12]
1a005e3e:	1d1a      	adds	r2, r3, #4
1a005e40:	681b      	ldr	r3, [r3, #0]
1a005e42:	9203      	str	r2, [sp, #12]
1a005e44:	2b00      	cmp	r3, #0
1a005e46:	bfb8      	it	lt
1a005e48:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a005e4c:	f108 0802 	add.w	r8, r8, #2
1a005e50:	9305      	str	r3, [sp, #20]
1a005e52:	4d33      	ldr	r5, [pc, #204]	; (1a005f20 <_vfiprintf_r+0x21c>)
1a005e54:	f898 1000 	ldrb.w	r1, [r8]
1a005e58:	2203      	movs	r2, #3
1a005e5a:	4628      	mov	r0, r5
1a005e5c:	f000 fa38 	bl	1a0062d0 <memchr>
1a005e60:	b140      	cbz	r0, 1a005e74 <_vfiprintf_r+0x170>
1a005e62:	2340      	movs	r3, #64	; 0x40
1a005e64:	1b40      	subs	r0, r0, r5
1a005e66:	fa03 f000 	lsl.w	r0, r3, r0
1a005e6a:	9b04      	ldr	r3, [sp, #16]
1a005e6c:	4303      	orrs	r3, r0
1a005e6e:	f108 0801 	add.w	r8, r8, #1
1a005e72:	9304      	str	r3, [sp, #16]
1a005e74:	f898 1000 	ldrb.w	r1, [r8]
1a005e78:	482a      	ldr	r0, [pc, #168]	; (1a005f24 <_vfiprintf_r+0x220>)
1a005e7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a005e7e:	2206      	movs	r2, #6
1a005e80:	f108 0701 	add.w	r7, r8, #1
1a005e84:	f000 fa24 	bl	1a0062d0 <memchr>
1a005e88:	2800      	cmp	r0, #0
1a005e8a:	d037      	beq.n	1a005efc <_vfiprintf_r+0x1f8>
1a005e8c:	4b26      	ldr	r3, [pc, #152]	; (1a005f28 <_vfiprintf_r+0x224>)
1a005e8e:	bb1b      	cbnz	r3, 1a005ed8 <_vfiprintf_r+0x1d4>
1a005e90:	9b03      	ldr	r3, [sp, #12]
1a005e92:	3307      	adds	r3, #7
1a005e94:	f023 0307 	bic.w	r3, r3, #7
1a005e98:	3308      	adds	r3, #8
1a005e9a:	9303      	str	r3, [sp, #12]
1a005e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005e9e:	444b      	add	r3, r9
1a005ea0:	9309      	str	r3, [sp, #36]	; 0x24
1a005ea2:	e750      	b.n	1a005d46 <_vfiprintf_r+0x42>
1a005ea4:	fb05 3202 	mla	r2, r5, r2, r3
1a005ea8:	2001      	movs	r0, #1
1a005eaa:	4688      	mov	r8, r1
1a005eac:	e78a      	b.n	1a005dc4 <_vfiprintf_r+0xc0>
1a005eae:	2300      	movs	r3, #0
1a005eb0:	f108 0801 	add.w	r8, r8, #1
1a005eb4:	9305      	str	r3, [sp, #20]
1a005eb6:	4619      	mov	r1, r3
1a005eb8:	250a      	movs	r5, #10
1a005eba:	4640      	mov	r0, r8
1a005ebc:	f810 2b01 	ldrb.w	r2, [r0], #1
1a005ec0:	3a30      	subs	r2, #48	; 0x30
1a005ec2:	2a09      	cmp	r2, #9
1a005ec4:	d903      	bls.n	1a005ece <_vfiprintf_r+0x1ca>
1a005ec6:	2b00      	cmp	r3, #0
1a005ec8:	d0c3      	beq.n	1a005e52 <_vfiprintf_r+0x14e>
1a005eca:	9105      	str	r1, [sp, #20]
1a005ecc:	e7c1      	b.n	1a005e52 <_vfiprintf_r+0x14e>
1a005ece:	fb05 2101 	mla	r1, r5, r1, r2
1a005ed2:	2301      	movs	r3, #1
1a005ed4:	4680      	mov	r8, r0
1a005ed6:	e7f0      	b.n	1a005eba <_vfiprintf_r+0x1b6>
1a005ed8:	ab03      	add	r3, sp, #12
1a005eda:	9300      	str	r3, [sp, #0]
1a005edc:	4622      	mov	r2, r4
1a005ede:	4b13      	ldr	r3, [pc, #76]	; (1a005f2c <_vfiprintf_r+0x228>)
1a005ee0:	a904      	add	r1, sp, #16
1a005ee2:	4630      	mov	r0, r6
1a005ee4:	f3af 8000 	nop.w
1a005ee8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a005eec:	4681      	mov	r9, r0
1a005eee:	d1d5      	bne.n	1a005e9c <_vfiprintf_r+0x198>
1a005ef0:	89a3      	ldrh	r3, [r4, #12]
1a005ef2:	065b      	lsls	r3, r3, #25
1a005ef4:	f53f af7e 	bmi.w	1a005df4 <_vfiprintf_r+0xf0>
1a005ef8:	9809      	ldr	r0, [sp, #36]	; 0x24
1a005efa:	e77d      	b.n	1a005df8 <_vfiprintf_r+0xf4>
1a005efc:	ab03      	add	r3, sp, #12
1a005efe:	9300      	str	r3, [sp, #0]
1a005f00:	4622      	mov	r2, r4
1a005f02:	4b0a      	ldr	r3, [pc, #40]	; (1a005f2c <_vfiprintf_r+0x228>)
1a005f04:	a904      	add	r1, sp, #16
1a005f06:	4630      	mov	r0, r6
1a005f08:	f000 f888 	bl	1a00601c <_printf_i>
1a005f0c:	e7ec      	b.n	1a005ee8 <_vfiprintf_r+0x1e4>
1a005f0e:	bf00      	nop
1a005f10:	1a006dc4 	.word	0x1a006dc4
1a005f14:	1a006e08 	.word	0x1a006e08
1a005f18:	1a006de4 	.word	0x1a006de4
1a005f1c:	1a006da4 	.word	0x1a006da4
1a005f20:	1a006e0e 	.word	0x1a006e0e
1a005f24:	1a006e12 	.word	0x1a006e12
1a005f28:	00000000 	.word	0x00000000
1a005f2c:	1a005cdf 	.word	0x1a005cdf

1a005f30 <_printf_common>:
1a005f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a005f34:	4691      	mov	r9, r2
1a005f36:	461f      	mov	r7, r3
1a005f38:	688a      	ldr	r2, [r1, #8]
1a005f3a:	690b      	ldr	r3, [r1, #16]
1a005f3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a005f40:	4293      	cmp	r3, r2
1a005f42:	bfb8      	it	lt
1a005f44:	4613      	movlt	r3, r2
1a005f46:	f8c9 3000 	str.w	r3, [r9]
1a005f4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a005f4e:	4606      	mov	r6, r0
1a005f50:	460c      	mov	r4, r1
1a005f52:	b112      	cbz	r2, 1a005f5a <_printf_common+0x2a>
1a005f54:	3301      	adds	r3, #1
1a005f56:	f8c9 3000 	str.w	r3, [r9]
1a005f5a:	6823      	ldr	r3, [r4, #0]
1a005f5c:	0699      	lsls	r1, r3, #26
1a005f5e:	bf42      	ittt	mi
1a005f60:	f8d9 3000 	ldrmi.w	r3, [r9]
1a005f64:	3302      	addmi	r3, #2
1a005f66:	f8c9 3000 	strmi.w	r3, [r9]
1a005f6a:	6825      	ldr	r5, [r4, #0]
1a005f6c:	f015 0506 	ands.w	r5, r5, #6
1a005f70:	d107      	bne.n	1a005f82 <_printf_common+0x52>
1a005f72:	f104 0a19 	add.w	sl, r4, #25
1a005f76:	68e3      	ldr	r3, [r4, #12]
1a005f78:	f8d9 2000 	ldr.w	r2, [r9]
1a005f7c:	1a9b      	subs	r3, r3, r2
1a005f7e:	42ab      	cmp	r3, r5
1a005f80:	dc28      	bgt.n	1a005fd4 <_printf_common+0xa4>
1a005f82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a005f86:	6822      	ldr	r2, [r4, #0]
1a005f88:	3300      	adds	r3, #0
1a005f8a:	bf18      	it	ne
1a005f8c:	2301      	movne	r3, #1
1a005f8e:	0692      	lsls	r2, r2, #26
1a005f90:	d42d      	bmi.n	1a005fee <_printf_common+0xbe>
1a005f92:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a005f96:	4639      	mov	r1, r7
1a005f98:	4630      	mov	r0, r6
1a005f9a:	47c0      	blx	r8
1a005f9c:	3001      	adds	r0, #1
1a005f9e:	d020      	beq.n	1a005fe2 <_printf_common+0xb2>
1a005fa0:	6823      	ldr	r3, [r4, #0]
1a005fa2:	68e5      	ldr	r5, [r4, #12]
1a005fa4:	f8d9 2000 	ldr.w	r2, [r9]
1a005fa8:	f003 0306 	and.w	r3, r3, #6
1a005fac:	2b04      	cmp	r3, #4
1a005fae:	bf08      	it	eq
1a005fb0:	1aad      	subeq	r5, r5, r2
1a005fb2:	68a3      	ldr	r3, [r4, #8]
1a005fb4:	6922      	ldr	r2, [r4, #16]
1a005fb6:	bf0c      	ite	eq
1a005fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a005fbc:	2500      	movne	r5, #0
1a005fbe:	4293      	cmp	r3, r2
1a005fc0:	bfc4      	itt	gt
1a005fc2:	1a9b      	subgt	r3, r3, r2
1a005fc4:	18ed      	addgt	r5, r5, r3
1a005fc6:	f04f 0900 	mov.w	r9, #0
1a005fca:	341a      	adds	r4, #26
1a005fcc:	454d      	cmp	r5, r9
1a005fce:	d11a      	bne.n	1a006006 <_printf_common+0xd6>
1a005fd0:	2000      	movs	r0, #0
1a005fd2:	e008      	b.n	1a005fe6 <_printf_common+0xb6>
1a005fd4:	2301      	movs	r3, #1
1a005fd6:	4652      	mov	r2, sl
1a005fd8:	4639      	mov	r1, r7
1a005fda:	4630      	mov	r0, r6
1a005fdc:	47c0      	blx	r8
1a005fde:	3001      	adds	r0, #1
1a005fe0:	d103      	bne.n	1a005fea <_printf_common+0xba>
1a005fe2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a005fea:	3501      	adds	r5, #1
1a005fec:	e7c3      	b.n	1a005f76 <_printf_common+0x46>
1a005fee:	18e1      	adds	r1, r4, r3
1a005ff0:	1c5a      	adds	r2, r3, #1
1a005ff2:	2030      	movs	r0, #48	; 0x30
1a005ff4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a005ff8:	4422      	add	r2, r4
1a005ffa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a005ffe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a006002:	3302      	adds	r3, #2
1a006004:	e7c5      	b.n	1a005f92 <_printf_common+0x62>
1a006006:	2301      	movs	r3, #1
1a006008:	4622      	mov	r2, r4
1a00600a:	4639      	mov	r1, r7
1a00600c:	4630      	mov	r0, r6
1a00600e:	47c0      	blx	r8
1a006010:	3001      	adds	r0, #1
1a006012:	d0e6      	beq.n	1a005fe2 <_printf_common+0xb2>
1a006014:	f109 0901 	add.w	r9, r9, #1
1a006018:	e7d8      	b.n	1a005fcc <_printf_common+0x9c>
1a00601a:	Address 0x000000001a00601a is out of bounds.


1a00601c <_printf_i>:
1a00601c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a006020:	f101 0c43 	add.w	ip, r1, #67	; 0x43
1a006024:	460c      	mov	r4, r1
1a006026:	7e09      	ldrb	r1, [r1, #24]
1a006028:	b085      	sub	sp, #20
1a00602a:	296e      	cmp	r1, #110	; 0x6e
1a00602c:	4617      	mov	r7, r2
1a00602e:	4606      	mov	r6, r0
1a006030:	4698      	mov	r8, r3
1a006032:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a006034:	f000 80b3 	beq.w	1a00619e <_printf_i+0x182>
1a006038:	d822      	bhi.n	1a006080 <_printf_i+0x64>
1a00603a:	2963      	cmp	r1, #99	; 0x63
1a00603c:	d036      	beq.n	1a0060ac <_printf_i+0x90>
1a00603e:	d80a      	bhi.n	1a006056 <_printf_i+0x3a>
1a006040:	2900      	cmp	r1, #0
1a006042:	f000 80b9 	beq.w	1a0061b8 <_printf_i+0x19c>
1a006046:	2958      	cmp	r1, #88	; 0x58
1a006048:	f000 8083 	beq.w	1a006152 <_printf_i+0x136>
1a00604c:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a006050:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a006054:	e032      	b.n	1a0060bc <_printf_i+0xa0>
1a006056:	2964      	cmp	r1, #100	; 0x64
1a006058:	d001      	beq.n	1a00605e <_printf_i+0x42>
1a00605a:	2969      	cmp	r1, #105	; 0x69
1a00605c:	d1f6      	bne.n	1a00604c <_printf_i+0x30>
1a00605e:	6820      	ldr	r0, [r4, #0]
1a006060:	6813      	ldr	r3, [r2, #0]
1a006062:	0605      	lsls	r5, r0, #24
1a006064:	f103 0104 	add.w	r1, r3, #4
1a006068:	d52a      	bpl.n	1a0060c0 <_printf_i+0xa4>
1a00606a:	681b      	ldr	r3, [r3, #0]
1a00606c:	6011      	str	r1, [r2, #0]
1a00606e:	2b00      	cmp	r3, #0
1a006070:	da03      	bge.n	1a00607a <_printf_i+0x5e>
1a006072:	222d      	movs	r2, #45	; 0x2d
1a006074:	425b      	negs	r3, r3
1a006076:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
1a00607a:	486f      	ldr	r0, [pc, #444]	; (1a006238 <_printf_i+0x21c>)
1a00607c:	220a      	movs	r2, #10
1a00607e:	e039      	b.n	1a0060f4 <_printf_i+0xd8>
1a006080:	2973      	cmp	r1, #115	; 0x73
1a006082:	f000 809d 	beq.w	1a0061c0 <_printf_i+0x1a4>
1a006086:	d808      	bhi.n	1a00609a <_printf_i+0x7e>
1a006088:	296f      	cmp	r1, #111	; 0x6f
1a00608a:	d020      	beq.n	1a0060ce <_printf_i+0xb2>
1a00608c:	2970      	cmp	r1, #112	; 0x70
1a00608e:	d1dd      	bne.n	1a00604c <_printf_i+0x30>
1a006090:	6823      	ldr	r3, [r4, #0]
1a006092:	f043 0320 	orr.w	r3, r3, #32
1a006096:	6023      	str	r3, [r4, #0]
1a006098:	e003      	b.n	1a0060a2 <_printf_i+0x86>
1a00609a:	2975      	cmp	r1, #117	; 0x75
1a00609c:	d017      	beq.n	1a0060ce <_printf_i+0xb2>
1a00609e:	2978      	cmp	r1, #120	; 0x78
1a0060a0:	d1d4      	bne.n	1a00604c <_printf_i+0x30>
1a0060a2:	2378      	movs	r3, #120	; 0x78
1a0060a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0060a8:	4864      	ldr	r0, [pc, #400]	; (1a00623c <_printf_i+0x220>)
1a0060aa:	e055      	b.n	1a006158 <_printf_i+0x13c>
1a0060ac:	6813      	ldr	r3, [r2, #0]
1a0060ae:	1d19      	adds	r1, r3, #4
1a0060b0:	681b      	ldr	r3, [r3, #0]
1a0060b2:	6011      	str	r1, [r2, #0]
1a0060b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a0060b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a0060bc:	2301      	movs	r3, #1
1a0060be:	e08c      	b.n	1a0061da <_printf_i+0x1be>
1a0060c0:	681b      	ldr	r3, [r3, #0]
1a0060c2:	6011      	str	r1, [r2, #0]
1a0060c4:	f010 0f40 	tst.w	r0, #64	; 0x40
1a0060c8:	bf18      	it	ne
1a0060ca:	b21b      	sxthne	r3, r3
1a0060cc:	e7cf      	b.n	1a00606e <_printf_i+0x52>
1a0060ce:	6813      	ldr	r3, [r2, #0]
1a0060d0:	6825      	ldr	r5, [r4, #0]
1a0060d2:	1d18      	adds	r0, r3, #4
1a0060d4:	6010      	str	r0, [r2, #0]
1a0060d6:	0628      	lsls	r0, r5, #24
1a0060d8:	d501      	bpl.n	1a0060de <_printf_i+0xc2>
1a0060da:	681b      	ldr	r3, [r3, #0]
1a0060dc:	e002      	b.n	1a0060e4 <_printf_i+0xc8>
1a0060de:	0668      	lsls	r0, r5, #25
1a0060e0:	d5fb      	bpl.n	1a0060da <_printf_i+0xbe>
1a0060e2:	881b      	ldrh	r3, [r3, #0]
1a0060e4:	4854      	ldr	r0, [pc, #336]	; (1a006238 <_printf_i+0x21c>)
1a0060e6:	296f      	cmp	r1, #111	; 0x6f
1a0060e8:	bf14      	ite	ne
1a0060ea:	220a      	movne	r2, #10
1a0060ec:	2208      	moveq	r2, #8
1a0060ee:	2100      	movs	r1, #0
1a0060f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a0060f4:	6865      	ldr	r5, [r4, #4]
1a0060f6:	60a5      	str	r5, [r4, #8]
1a0060f8:	2d00      	cmp	r5, #0
1a0060fa:	f2c0 8095 	blt.w	1a006228 <_printf_i+0x20c>
1a0060fe:	6821      	ldr	r1, [r4, #0]
1a006100:	f021 0104 	bic.w	r1, r1, #4
1a006104:	6021      	str	r1, [r4, #0]
1a006106:	2b00      	cmp	r3, #0
1a006108:	d13d      	bne.n	1a006186 <_printf_i+0x16a>
1a00610a:	2d00      	cmp	r5, #0
1a00610c:	f040 808e 	bne.w	1a00622c <_printf_i+0x210>
1a006110:	4665      	mov	r5, ip
1a006112:	2a08      	cmp	r2, #8
1a006114:	d10b      	bne.n	1a00612e <_printf_i+0x112>
1a006116:	6823      	ldr	r3, [r4, #0]
1a006118:	07db      	lsls	r3, r3, #31
1a00611a:	d508      	bpl.n	1a00612e <_printf_i+0x112>
1a00611c:	6923      	ldr	r3, [r4, #16]
1a00611e:	6862      	ldr	r2, [r4, #4]
1a006120:	429a      	cmp	r2, r3
1a006122:	bfde      	ittt	le
1a006124:	2330      	movle	r3, #48	; 0x30
1a006126:	f805 3c01 	strble.w	r3, [r5, #-1]
1a00612a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a00612e:	ebac 0305 	sub.w	r3, ip, r5
1a006132:	6123      	str	r3, [r4, #16]
1a006134:	f8cd 8000 	str.w	r8, [sp]
1a006138:	463b      	mov	r3, r7
1a00613a:	aa03      	add	r2, sp, #12
1a00613c:	4621      	mov	r1, r4
1a00613e:	4630      	mov	r0, r6
1a006140:	f7ff fef6 	bl	1a005f30 <_printf_common>
1a006144:	3001      	adds	r0, #1
1a006146:	d14d      	bne.n	1a0061e4 <_printf_i+0x1c8>
1a006148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00614c:	b005      	add	sp, #20
1a00614e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a006152:	4839      	ldr	r0, [pc, #228]	; (1a006238 <_printf_i+0x21c>)
1a006154:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a006158:	6813      	ldr	r3, [r2, #0]
1a00615a:	6821      	ldr	r1, [r4, #0]
1a00615c:	1d1d      	adds	r5, r3, #4
1a00615e:	681b      	ldr	r3, [r3, #0]
1a006160:	6015      	str	r5, [r2, #0]
1a006162:	060a      	lsls	r2, r1, #24
1a006164:	d50b      	bpl.n	1a00617e <_printf_i+0x162>
1a006166:	07ca      	lsls	r2, r1, #31
1a006168:	bf44      	itt	mi
1a00616a:	f041 0120 	orrmi.w	r1, r1, #32
1a00616e:	6021      	strmi	r1, [r4, #0]
1a006170:	b91b      	cbnz	r3, 1a00617a <_printf_i+0x15e>
1a006172:	6822      	ldr	r2, [r4, #0]
1a006174:	f022 0220 	bic.w	r2, r2, #32
1a006178:	6022      	str	r2, [r4, #0]
1a00617a:	2210      	movs	r2, #16
1a00617c:	e7b7      	b.n	1a0060ee <_printf_i+0xd2>
1a00617e:	064d      	lsls	r5, r1, #25
1a006180:	bf48      	it	mi
1a006182:	b29b      	uxthmi	r3, r3
1a006184:	e7ef      	b.n	1a006166 <_printf_i+0x14a>
1a006186:	4665      	mov	r5, ip
1a006188:	fbb3 f1f2 	udiv	r1, r3, r2
1a00618c:	fb02 3311 	mls	r3, r2, r1, r3
1a006190:	5cc3      	ldrb	r3, [r0, r3]
1a006192:	f805 3d01 	strb.w	r3, [r5, #-1]!
1a006196:	460b      	mov	r3, r1
1a006198:	2900      	cmp	r1, #0
1a00619a:	d1f5      	bne.n	1a006188 <_printf_i+0x16c>
1a00619c:	e7b9      	b.n	1a006112 <_printf_i+0xf6>
1a00619e:	6813      	ldr	r3, [r2, #0]
1a0061a0:	6825      	ldr	r5, [r4, #0]
1a0061a2:	6961      	ldr	r1, [r4, #20]
1a0061a4:	1d18      	adds	r0, r3, #4
1a0061a6:	6010      	str	r0, [r2, #0]
1a0061a8:	0628      	lsls	r0, r5, #24
1a0061aa:	681b      	ldr	r3, [r3, #0]
1a0061ac:	d501      	bpl.n	1a0061b2 <_printf_i+0x196>
1a0061ae:	6019      	str	r1, [r3, #0]
1a0061b0:	e002      	b.n	1a0061b8 <_printf_i+0x19c>
1a0061b2:	066a      	lsls	r2, r5, #25
1a0061b4:	d5fb      	bpl.n	1a0061ae <_printf_i+0x192>
1a0061b6:	8019      	strh	r1, [r3, #0]
1a0061b8:	2300      	movs	r3, #0
1a0061ba:	6123      	str	r3, [r4, #16]
1a0061bc:	4665      	mov	r5, ip
1a0061be:	e7b9      	b.n	1a006134 <_printf_i+0x118>
1a0061c0:	6813      	ldr	r3, [r2, #0]
1a0061c2:	1d19      	adds	r1, r3, #4
1a0061c4:	6011      	str	r1, [r2, #0]
1a0061c6:	681d      	ldr	r5, [r3, #0]
1a0061c8:	6862      	ldr	r2, [r4, #4]
1a0061ca:	2100      	movs	r1, #0
1a0061cc:	4628      	mov	r0, r5
1a0061ce:	f000 f87f 	bl	1a0062d0 <memchr>
1a0061d2:	b108      	cbz	r0, 1a0061d8 <_printf_i+0x1bc>
1a0061d4:	1b40      	subs	r0, r0, r5
1a0061d6:	6060      	str	r0, [r4, #4]
1a0061d8:	6863      	ldr	r3, [r4, #4]
1a0061da:	6123      	str	r3, [r4, #16]
1a0061dc:	2300      	movs	r3, #0
1a0061de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a0061e2:	e7a7      	b.n	1a006134 <_printf_i+0x118>
1a0061e4:	6923      	ldr	r3, [r4, #16]
1a0061e6:	462a      	mov	r2, r5
1a0061e8:	4639      	mov	r1, r7
1a0061ea:	4630      	mov	r0, r6
1a0061ec:	47c0      	blx	r8
1a0061ee:	3001      	adds	r0, #1
1a0061f0:	d0aa      	beq.n	1a006148 <_printf_i+0x12c>
1a0061f2:	6823      	ldr	r3, [r4, #0]
1a0061f4:	079b      	lsls	r3, r3, #30
1a0061f6:	d413      	bmi.n	1a006220 <_printf_i+0x204>
1a0061f8:	68e0      	ldr	r0, [r4, #12]
1a0061fa:	9b03      	ldr	r3, [sp, #12]
1a0061fc:	4298      	cmp	r0, r3
1a0061fe:	bfb8      	it	lt
1a006200:	4618      	movlt	r0, r3
1a006202:	e7a3      	b.n	1a00614c <_printf_i+0x130>
1a006204:	2301      	movs	r3, #1
1a006206:	464a      	mov	r2, r9
1a006208:	4639      	mov	r1, r7
1a00620a:	4630      	mov	r0, r6
1a00620c:	47c0      	blx	r8
1a00620e:	3001      	adds	r0, #1
1a006210:	d09a      	beq.n	1a006148 <_printf_i+0x12c>
1a006212:	3501      	adds	r5, #1
1a006214:	68e3      	ldr	r3, [r4, #12]
1a006216:	9a03      	ldr	r2, [sp, #12]
1a006218:	1a9b      	subs	r3, r3, r2
1a00621a:	42ab      	cmp	r3, r5
1a00621c:	dcf2      	bgt.n	1a006204 <_printf_i+0x1e8>
1a00621e:	e7eb      	b.n	1a0061f8 <_printf_i+0x1dc>
1a006220:	2500      	movs	r5, #0
1a006222:	f104 0919 	add.w	r9, r4, #25
1a006226:	e7f5      	b.n	1a006214 <_printf_i+0x1f8>
1a006228:	2b00      	cmp	r3, #0
1a00622a:	d1ac      	bne.n	1a006186 <_printf_i+0x16a>
1a00622c:	7803      	ldrb	r3, [r0, #0]
1a00622e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a006232:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a006236:	e76c      	b.n	1a006112 <_printf_i+0xf6>
1a006238:	1a006e19 	.word	0x1a006e19
1a00623c:	1a006e2a 	.word	0x1a006e2a

1a006240 <__sread>:
1a006240:	b510      	push	{r4, lr}
1a006242:	460c      	mov	r4, r1
1a006244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a006248:	f7fa fba8 	bl	1a00099c <_read_r>
1a00624c:	2800      	cmp	r0, #0
1a00624e:	bfab      	itete	ge
1a006250:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a006252:	89a3      	ldrhlt	r3, [r4, #12]
1a006254:	181b      	addge	r3, r3, r0
1a006256:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a00625a:	bfac      	ite	ge
1a00625c:	6563      	strge	r3, [r4, #84]	; 0x54
1a00625e:	81a3      	strhlt	r3, [r4, #12]
1a006260:	bd10      	pop	{r4, pc}

1a006262 <__swrite>:
1a006262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a006266:	461f      	mov	r7, r3
1a006268:	898b      	ldrh	r3, [r1, #12]
1a00626a:	05db      	lsls	r3, r3, #23
1a00626c:	4605      	mov	r5, r0
1a00626e:	460c      	mov	r4, r1
1a006270:	4616      	mov	r6, r2
1a006272:	d505      	bpl.n	1a006280 <__swrite+0x1e>
1a006274:	2302      	movs	r3, #2
1a006276:	2200      	movs	r2, #0
1a006278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00627c:	f7fa fb89 	bl	1a000992 <_lseek_r>
1a006280:	89a3      	ldrh	r3, [r4, #12]
1a006282:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a006286:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a00628a:	81a3      	strh	r3, [r4, #12]
1a00628c:	4632      	mov	r2, r6
1a00628e:	463b      	mov	r3, r7
1a006290:	4628      	mov	r0, r5
1a006292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a006296:	f7fa bba8 	b.w	1a0009ea <_write_r>

1a00629a <__sseek>:
1a00629a:	b510      	push	{r4, lr}
1a00629c:	460c      	mov	r4, r1
1a00629e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0062a2:	f7fa fb76 	bl	1a000992 <_lseek_r>
1a0062a6:	1c43      	adds	r3, r0, #1
1a0062a8:	89a3      	ldrh	r3, [r4, #12]
1a0062aa:	bf15      	itete	ne
1a0062ac:	6560      	strne	r0, [r4, #84]	; 0x54
1a0062ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a0062b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a0062b6:	81a3      	strheq	r3, [r4, #12]
1a0062b8:	bf18      	it	ne
1a0062ba:	81a3      	strhne	r3, [r4, #12]
1a0062bc:	bd10      	pop	{r4, pc}

1a0062be <__sclose>:
1a0062be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0062c2:	f7fa bb53 	b.w	1a00096c <_close_r>
1a0062c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0062ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0062ce:	Address 0x000000001a0062ce is out of bounds.


1a0062d0 <memchr>:
1a0062d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a0062d4:	2a10      	cmp	r2, #16
1a0062d6:	db2b      	blt.n	1a006330 <memchr+0x60>
1a0062d8:	f010 0f07 	tst.w	r0, #7
1a0062dc:	d008      	beq.n	1a0062f0 <memchr+0x20>
1a0062de:	f810 3b01 	ldrb.w	r3, [r0], #1
1a0062e2:	3a01      	subs	r2, #1
1a0062e4:	428b      	cmp	r3, r1
1a0062e6:	d02d      	beq.n	1a006344 <memchr+0x74>
1a0062e8:	f010 0f07 	tst.w	r0, #7
1a0062ec:	b342      	cbz	r2, 1a006340 <memchr+0x70>
1a0062ee:	d1f6      	bne.n	1a0062de <memchr+0xe>
1a0062f0:	b4f0      	push	{r4, r5, r6, r7}
1a0062f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a0062f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a0062fa:	f022 0407 	bic.w	r4, r2, #7
1a0062fe:	f07f 0700 	mvns.w	r7, #0
1a006302:	2300      	movs	r3, #0
1a006304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a006308:	3c08      	subs	r4, #8
1a00630a:	ea85 0501 	eor.w	r5, r5, r1
1a00630e:	ea86 0601 	eor.w	r6, r6, r1
1a006312:	fa85 f547 	uadd8	r5, r5, r7
1a006316:	faa3 f587 	sel	r5, r3, r7
1a00631a:	fa86 f647 	uadd8	r6, r6, r7
1a00631e:	faa5 f687 	sel	r6, r5, r7
1a006322:	b98e      	cbnz	r6, 1a006348 <memchr+0x78>
1a006324:	d1ee      	bne.n	1a006304 <memchr+0x34>
1a006326:	bcf0      	pop	{r4, r5, r6, r7}
1a006328:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a00632c:	f002 0207 	and.w	r2, r2, #7
1a006330:	b132      	cbz	r2, 1a006340 <memchr+0x70>
1a006332:	f810 3b01 	ldrb.w	r3, [r0], #1
1a006336:	3a01      	subs	r2, #1
1a006338:	ea83 0301 	eor.w	r3, r3, r1
1a00633c:	b113      	cbz	r3, 1a006344 <memchr+0x74>
1a00633e:	d1f8      	bne.n	1a006332 <memchr+0x62>
1a006340:	2000      	movs	r0, #0
1a006342:	4770      	bx	lr
1a006344:	3801      	subs	r0, #1
1a006346:	4770      	bx	lr
1a006348:	2d00      	cmp	r5, #0
1a00634a:	bf06      	itte	eq
1a00634c:	4635      	moveq	r5, r6
1a00634e:	3803      	subeq	r0, #3
1a006350:	3807      	subne	r0, #7
1a006352:	f015 0f01 	tst.w	r5, #1
1a006356:	d107      	bne.n	1a006368 <memchr+0x98>
1a006358:	3001      	adds	r0, #1
1a00635a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a00635e:	bf02      	ittt	eq
1a006360:	3001      	addeq	r0, #1
1a006362:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a006366:	3001      	addeq	r0, #1
1a006368:	bcf0      	pop	{r4, r5, r6, r7}
1a00636a:	3801      	subs	r0, #1
1a00636c:	4770      	bx	lr
1a00636e:	bf00      	nop

1a006370 <__malloc_lock>:
1a006370:	4770      	bx	lr

1a006372 <__malloc_unlock>:
1a006372:	4770      	bx	lr
1a006374:	3a434453 	.word	0x3a434453
1a006378:	0000002f 	.word	0x0000002f
	...
1a00639c:	3a434453 	.word	0x3a434453
1a0063a0:	00000000 	.word	0x00000000
1a0063a4:	72746e45 	.word	0x72746e45
1a0063a8:	6f646e61 	.word	0x6f646e61
1a0063ac:	6d206120 	.word	0x6d206120
1a0063b0:	206f646f 	.word	0x206f646f
1a0063b4:	74696e49 	.word	0x74696e49
1a0063b8:	7250202e 	.word	0x7250202e
1a0063bc:	6f697365 	.word	0x6f697365
1a0063c0:	5420656e 	.word	0x5420656e
1a0063c4:	20314345 	.word	0x20314345
1a0063c8:	61726170 	.word	0x61726170
1a0063cc:	696e6920 	.word	0x696e6920
1a0063d0:	72616963 	.word	0x72616963
1a0063d4:	000d202e 	.word	0x000d202e
1a0063d8:	69636572 	.word	0x69636572
1a0063dc:	6e656962 	.word	0x6e656962
1a0063e0:	62206f64 	.word	0x62206f64
1a0063e4:	20657479 	.word	0x20657479
1a0063e8:	64253a6e 	.word	0x64253a6e
1a0063ec:	00000a0d 	.word	0x00000a0d
1a0063f0:	68637261 	.word	0x68637261
1a0063f4:	206f7669 	.word	0x206f7669
1a0063f8:	75672061 	.word	0x75672061
1a0063fc:	61647261 	.word	0x61647261
1a006400:	6e652072 	.word	0x6e652072
1a006404:	63696d20 	.word	0x63696d20
1a006408:	44536f72 	.word	0x44536f72
1a00640c:	20732520 	.word	0x20732520
1a006410:	ff000a0d 	.word	0xff000a0d

1a006414 <ExCvt>:
1a006414:	41455543 43414141 49454545 41414949     CUEAAAACEEEIIIAA
1a006424:	4f929245 55554f4f 4f554f59 9f9e4f9c     E..OOOUUYOUO.O..
1a006434:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
1a006444:	b3b2b1b0 414141b4 bbbab9b8 bfbebdbc     .....AAA........
1a006454:	c3c2c1c0 4141c5c4 cbcac9c8 cfcecdcc     ......AA........
1a006464:	4545d1d1 49494945 dbdad949 df49dddc     ..EEEIIII.....I.
1a006474:	4f4fe14f e8e64f4f 555555e8 efee5959     O.OOOO...UUUYY..
1a006484:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

1a006494 <LfnOfs>:
1a006494:	07050301 12100e09 1c181614 ffffff1e     ................

1a0064a4 <VolumeStr>:
1a0064a4:	1a0064d8 1a0064dc 459076eb 54414658     .d...d...v.EXFAT
1a0064b4:	00202020 00544146 33544146 ffff0032        .FAT.FAT32...
1a0064c4:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
1a0064d4:	ff005d5b 00434453 00425355              []..SDC.USB.

1a0064e0 <cvt1.5491>:
1a0064e0:	031a0061 031700e0 030700f8 000100ff     a...............
1a0064f0:	01000178 01320130 01390106 014a0110     x...0.2...9...J.
1a006500:	0179012e 01800106 0243004d 01820181     ..y.....M.C.....
1a006510:	01840182 01860184 01870187 018a0189     ................
1a006520:	018b018b 018e018d 0190018f 01910191     ................
1a006530:	01940193 019601f6 01980197 023d0198     ..............=.
1a006540:	019c019b 0220019d 01a0019f 01a201a0     ...... .........
1a006550:	01a401a2 01a601a4 01a701a7 01aa01a9     ................
1a006560:	01ac01ab 01ae01ac 01af01af 01b201b1     ................
1a006570:	01b301b3 01b501b5 01b801b7 01ba01b8     ................
1a006580:	01bc01bb 01be01bc 01c001f7 01c201c1     ................
1a006590:	01c401c3 01c401c5 01c801c7 01ca01c7     ................
1a0065a0:	01ca01cb 011001cd 000101dd 01de018e     ................
1a0065b0:	01f30112 01f10003 01f401f4 012801f8     ..............(.
1a0065c0:	01120222 0009023a 023b2c65 023d023b     "...:...e,;.;.=.
1a0065d0:	023f2c66 02410240 02460241 0253010a     f,?.@.A.A.F...S.
1a0065e0:	01810040 02550186 018a0189 018f0258     @.....U.....X...
1a0065f0:	0190025a 025d025c 025f025e 02610193     Z...\.].^._...a.
1a006600:	01940262 02650264 02670266 01960197     b...d.e.f.g.....
1a006610:	2c62026a 026d026c 019c026e 02710270     j.b,l.m.n...p.q.
1a006620:	0273019d 019f0274 02770276 02790278     ..s.t...v.w.x.y.
1a006630:	027b027a 2c64027c 027f027e 028101a6     z.{.|.d,~.......
1a006640:	01a90282 02850284 02870286 024401ae     ..............D.
1a006650:	01b201b1 028d0245 028f028e 02910290     ....E...........
1a006660:	037b01b7 03fd0003 03ff03fe 000403ac     ..{.............
1a006670:	03880386 038a0389 031103b1 000203c2     ................
1a006680:	03a303a3 030803c4 000303cc 038e038c     ................
1a006690:	03d8038f 03f20118 03f9000a 03f403f3     ................
1a0066a0:	03f603f5 03f703f7 03fa03f9 043003fa     ..............0.
1a0066b0:	04500320 04600710 048a0122 04c10136      .P...`."...6...
1a0066c0:	04cf010e 04c00001 014404d0 04260561     ..........D.a.&.
1a0066d0:	ffff0000                                ....

1a0066d4 <cvt2.5492>:
1a0066d4:	00011d7d 1e002c63 1ea00196 1f00015a     }...c,......Z...
1a0066e4:	1f100608 1f200606 1f300608 1f400608     ...... ...0...@.
1a0066f4:	1f510606 1f590007 1f5b1f52 1f5d1f54     ..Q...Y.R.[.T.].
1a006704:	1f5f1f56 06081f60 000e1f70 1fbb1fba     V._.`...p.......
1a006714:	1fc91fc8 1fcb1fca 1fdb1fda 1ff91ff8     ................
1a006724:	1feb1fea 1ffb1ffa 06081f80 06081f90     ................
1a006734:	06081fa0 00041fb0 1fb91fb8 1fbc1fb2     ................
1a006744:	00011fcc 1fd01fc3 1fe00602 1fe50602     ................
1a006754:	1fec0001 00011ff3 214e1ffc 21320001     ..........N!..2!
1a006764:	02102170 00012184 24d02183 2c30051a     p!...!...!.$..0,
1a006774:	2c60042f 2c670102 2c750106 2c800102     /.`,..g,..u,...,
1a006784:	2d000164 ff410826 0000031a              d..-&.A.....

1a006790 <uc850>:
1a006790:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
1a0067a0:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
1a0067b0:	00e600c9 00f400c6 00f200f6 00f900fb     ................
1a0067c0:	00d600ff 00f800dc 00d800a3 019200d7     ................
1a0067d0:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
1a0067e0:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
1a0067f0:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
1a006800:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
1a006810:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
1a006820:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
1a006830:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
1a006840:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
1a006850:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
1a006860:	00da00de 00d900db 00dd00fd 00b400af     ................
1a006870:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
1a006880:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..
1a006890:	44535346 5b203a43 74696e49 6f4e205d     FSSDC: [Init] No
1a0068a0:	72616320 6e692064 636f7320 2e74656b      card in socket.
1a0068b0:	00000a0d 44535346 5b203a43 74696e49     ....FSSDC: [Init
1a0068c0:	6e49205d 61697469 617a696c 6e6f6974     ] Initialization
1a0068d0:	67656220 2e736e69 00000a0d 44535346      begins.....FSSD
1a0068e0:	5b203a43 74696e49 654e205d 61632077     C: [Init] New ca
1a0068f0:	73206472 75746174 4e203a73 76697461     rd status: Nativ
1a006900:	6f4d2065 0d2e6564 0000000a 44535346     e Mode......FSSD
1a006910:	5b203a43 74696e49 654e205d 61632077     C: [Init] New ca
1a006920:	73206472 75746174 49203a73 6974696e     rd status: Initi
1a006930:	7a696c61 2e676e69 00000a0d 44535346     alizing.....FSSD
1a006940:	5b203a43 74696e49 654e205d 61632077     C: [Init] New ca
1a006950:	73206472 75746174 52203a73 79646165     rd status: Ready
1a006960:	61462820 43207473 6b636f6c 0a0d2e29      (Fast Clock)...
1a006970:	00000000 44535346 5b203a43 74696e49     ....FSSDC: [Init
1a006980:	654e205d 61632077 73206472 75746174     ] New card statu
1a006990:	45203a73 726f7272 6f4e2820 6e492074     s: Error (Not In
1a0069a0:	61697469 657a696c 0d2e2964 ffff000a     itialized)......
1a0069b0:	44535346 5b203a43 74434f49 43205d6c     FSSDC: [IOCtl] C
1a0069c0:	20647261 20746f6e 74696e69 696c6169     ard not initiali
1a0069d0:	2e64657a 00000a0d 44535346 5b203a43     zed.....FSSDC: [
1a0069e0:	74434f49 52205d6c 72757465 676e696e     IOCtl] Returning
1a0069f0:	72724520 0d2e726f ffff000a 44535346      Error......FSSD
1a006a00:	5b203a43 64616552 6143205d 6e206472     C: [Read] Card n
1a006a10:	6920746f 6974696e 7a696c61 0d2e6465     ot initialized..
1a006a20:	ffff000a 44535346 5b203a43 74697257     ....FSSDC: [Writ
1a006a30:	43205d65 20647261 20746f6e 74696e69     e] Card not init
1a006a40:	696c6169 2e64657a 00000a0d 44535346     ialized.....FSSD
1a006a50:	5b203a43 74697257 43205d65 20647261     C: [Write] Card 
1a006a60:	77207369 65746972 6f727020 74636574     is write protect
1a006a70:	0d2e6465 ffff000a 44535346 5b203a43     ed......FSSDC: [
1a006a80:	74696e49 5d495053 77654e20 72616320     InitSPI] New car
1a006a90:	74732064 73757461 6e49203a 74726573     d status: Insert
1a006aa0:	0d2e6465 ffff000a                       ed......

1a006aa8 <ExtRateIn>:
1a006aa8:	00000000                                ....

1a006aac <GpioButtons>:
1a006aac:	08000400 09010900                       ........

1a006ab4 <GpioLeds>:
1a006ab4:	01050005 0e000205 0c010b01              ............

1a006ac0 <GpioPorts>:
1a006ac0:	03030003 0f050403 05031005 07030603     ................
1a006ad0:	ffff0802                                ....

1a006ad4 <OscRateIn>:
1a006ad4:	00b71b00                                ....

1a006ad8 <InitClkStates>:
1a006ad8:	01010f01                                ....

1a006adc <pinmuxing>:
1a006adc:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a006aec:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a006afc:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a006b0c:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a006b1c:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a006b2c:	00d50301 00d50401 00160107 00560207     ..............V.
1a006b3c:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a006b4c:	00570206                                ..W.

1a006b50 <UART_BClock>:
1a006b50:	01a201c2 01620182                       ......b.

1a006b58 <UART_PClock>:
1a006b58:	00820081 00a200a1 08040201 0f0f0f03     ................
1a006b68:	000000ff                                ....

1a006b6c <periph_to_base>:
1a006b6c:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a006b7c:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a006b8c:	000100e0 01000100 01200003 00060120     .......... . ...
1a006b9c:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a006bac:	01820013 00120182 01a201a2 01c20011     ................
1a006bbc:	001001c2 01e201e2 0202000f 000e0202     ................
1a006bcc:	02220222 0223000d 001c0223              "."...#.#...

1a006bd8 <InitClkStates>:
1a006bd8:	00010100 00010909 0001090a 01010701     ................
1a006be8:	00010902 00010906 0101090c 0001090d     ................
1a006bf8:	0001090e 0001090f 00010910 00010911     ................
1a006c08:	00010912 00010913 00011114 00011119     ................
1a006c18:	0001111a 0001111b                       ........

1a006c20 <lpcUarts>:
1a006c20:	40081000 06020406 00180205 40081000     ...@...........@
1a006c30:	09070509 00180706 40082000 00000000     ......... .@....
1a006c40:	00190000 400c1000 07060107 001a0602     .......@........
1a006c50:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a006c60:	02020302 001b0204                       ........

1a006c68 <gpioPinsInit>:
1a006c68:	02000104 00050701 05010d03 04080100     ................
1a006c78:	02020002 02000304 00000403 04070002     ................
1a006c88:	030c0300 09050402 05040103 04030208     ................
1a006c98:	04020305 06040504 0802000c 03000b06     ................
1a006ca8:	00090607 07060503 060f0504 03030004     ................
1a006cb8:	02000404 00050404 06040502 04060200     ................
1a006cc8:	0c050408 05040a04 0003010e 14010a00     ................
1a006cd8:	010f0000 0d000012 00001101 0010010c     ................
1a006ce8:	07070300 000f0300 01000001 00000000     ................
1a006cf8:	000a0600 08060603 06100504 04030005     ................
1a006d08:	03000106 04090400 04010d05 010b0000     ................
1a006d18:	0200000f 00000001 00010104 02010800     ................
1a006d28:	01090000 09010006 05040002 04010200     ................
1a006d38:	02020105 02020504 0e00000a 01000b02     ................
1a006d48:	000c020b 00040c01 04000200 01020001     ................
1a006d58:	02000204 00030402 03070302 070b0300     ................
1a006d68:	0c030004 03000507 0006070d 01020e03     ................
1a006d78:	04010504 06020006 02000504 00040405     ................
1a006d88:	08040402 040c0504 0d050409 05040a04     ................
1a006d98:	0005010e ffff0801                       ........

1a006da0 <ultrasonicSensorsIrqMap>:
1a006da0:	ff020100                                ....

1a006da4 <__sf_fake_stderr>:
	...

1a006dc4 <__sf_fake_stdin>:
	...

1a006de4 <__sf_fake_stdout>:
	...

1a006e04 <_global_impure_ptr>:
1a006e04:	10000098 2b302d23 6c680020 6665004c     ....#-0+ .hlL.ef
1a006e14:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a006e24:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a006e34:	64636261 ff006665                       abcdef..
